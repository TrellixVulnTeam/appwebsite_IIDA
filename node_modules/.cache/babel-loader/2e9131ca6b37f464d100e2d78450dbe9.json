{"ast":null,"code":"const errorValues = require('./errorValues.json');\n\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal;\n\nconst {\n  EthereumRpcError\n} = require('./classes');\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param {number} code - The integer error code\n * @param {string} fallbackMessage - The fallback message\n * @return {string} The corresponding message or the fallback message\n */\n\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n  if (Number.isInteger(code)) {\n    const codeString = code.toString();\n\n    if (errorValues[codeString]) {\n      return errorValues[codeString].message;\n    }\n\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n\n  return fallbackMessage;\n}\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n *\n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\n\n\nfunction isValidCode(code) {\n  if (!Number.isInteger(code)) {\n    return false;\n  }\n\n  const codeString = code.toString();\n\n  if (errorValues[codeString]) {\n    return true;\n  }\n\n  if (isJsonRpcServerError(code)) {\n    return true;\n  } // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n\n  return false;\n}\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n *\n * @param {any} error - The error to serialize.\n * @param {Object} [options] - An options object.\n * @param {Object} [options.fallbackError] - The custom fallback error values if\n * the given error is invalid.\n * @param {boolean} [options.shouldIncludeStack] - Whether the 'stack' property\n * of the given error should be included on the serialized error, if present.\n * @return {Object} A standardized, plain error object.\n */\n\n\nfunction serializeError(error, {\n  fallbackError = FALLBACK_ERROR,\n  shouldIncludeStack = false\n} = {}) {\n  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n    throw new Error('Must provide fallback error with integer number code and string message.');\n  }\n\n  if (error instanceof EthereumRpcError) {\n    return error.serialize();\n  }\n\n  const serialized = {};\n\n  if (error && isValidCode(error.code)) {\n    serialized.code = error.code;\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message;\n\n      if ('data' in error) {\n        serialized.data = error.data;\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code);\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n  } else {\n    serialized.code = fallbackError.code;\n    serialized.message = error && error.message ? error.message : fallbackError.message;\n    serialized.data = {\n      originalError: assignOriginalError(error)\n    };\n  }\n\n  if (shouldIncludeStack && error && typeof error.stack === 'string') {\n    serialized.stack = error.stack;\n  }\n\n  return serialized;\n} // Internal\n\n\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\n\nfunction assignOriginalError(error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return { ...error\n    };\n  }\n\n  return error;\n} // Exports\n\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE\n};","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/node_modules/eth-rpc-errors/src/utils.js"],"names":["errorValues","require","FALLBACK_ERROR_CODE","rpc","internal","EthereumRpcError","JSON_RPC_SERVER_ERROR_MESSAGE","FALLBACK_MESSAGE","FALLBACK_ERROR","code","message","getMessageFromCode","fallbackMessage","Number","isInteger","codeString","toString","isJsonRpcServerError","isValidCode","serializeError","error","fallbackError","shouldIncludeStack","Error","serialize","serialized","data","originalError","assignOriginalError","stack","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["\nconst errorValues = require('./errorValues.json')\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal\nconst { EthereumRpcError } = require('./classes')\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'\n\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.'\n\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE),\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param {number} code - The integer error code\n * @param {string} fallbackMessage - The fallback message\n * @return {string} The corresponding message or the fallback message\n */\nfunction getMessageFromCode (code, fallbackMessage = FALLBACK_MESSAGE) {\n\n  if (Number.isInteger(code)) {\n\n    const codeString = code.toString()\n\n    if (errorValues[codeString]) {\n      return errorValues[codeString].message\n    }\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE\n    }\n  }\n  return fallbackMessage\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n *\n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode (code) {\n\n  if (!Number.isInteger(code)) {\n    return false\n  }\n\n  const codeString = code.toString()\n  if (errorValues[codeString]) {\n    return true\n  }\n\n  if (isJsonRpcServerError(code)) {\n    return true\n  }\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n *\n * @param {any} error - The error to serialize.\n * @param {Object} [options] - An options object.\n * @param {Object} [options.fallbackError] - The custom fallback error values if\n * the given error is invalid.\n * @param {boolean} [options.shouldIncludeStack] - Whether the 'stack' property\n * of the given error should be included on the serialized error, if present.\n * @return {Object} A standardized, plain error object.\n */\nfunction serializeError (\n  error,\n  { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false } = {},\n) {\n\n  if (\n    !fallbackError ||\n    !Number.isInteger(fallbackError.code) ||\n    typeof fallbackError.message !== 'string'\n  ) {\n    throw new Error(\n      'Must provide fallback error with integer number code and string message.',\n    )\n  }\n\n  if (error instanceof EthereumRpcError) {\n    return error.serialize()\n  }\n\n  const serialized = {}\n\n  if (error && isValidCode(error.code)) {\n\n    serialized.code = error.code\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message\n      if ('data' in error) {\n        serialized.data = error.data\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code)\n      serialized.data = { originalError: assignOriginalError(error) }\n    }\n\n  } else {\n    serialized.code = fallbackError.code\n    serialized.message = (\n      error && error.message\n        ? error.message\n        : fallbackError.message\n    )\n    serialized.data = { originalError: assignOriginalError(error) }\n  }\n\n  if (shouldIncludeStack && error && typeof error.stack === 'string') {\n    serialized.stack = error.stack\n  }\n  return serialized\n}\n\n// Internal\n\nfunction isJsonRpcServerError (code) {\n  return code >= -32099 && code <= -32000\n}\n\nfunction assignOriginalError (error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return { ...error }\n  }\n  return error\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE,\n}\n"]},"metadata":{},"sourceType":"script"}