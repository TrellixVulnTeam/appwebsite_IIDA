{"ast":null,"code":"import { Contract, ethers } from 'ethers';\nimport Web3 from 'web3';\nimport { ethTokenAddress, wethTokenPolygonAddress } from 'constants/ethContractAddresses';\nimport { getProvider } from 'constants/provider';\nimport ERC20ABI from 'index-sdk/abi/ERC20.json';\nimport SupplyCapIssuanceABI from 'index-sdk/abi/SupplyCapIssuanceHook.json';\nimport BigNumber from 'utils/bignumber';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from './connectors';\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const waitTransaction = async (provider, txHash) => {\n  const web3 = new Web3(provider);\n  let txReceipt = null;\n\n  while (txReceipt == null) {\n    txReceipt = await web3.eth.getTransactionReceipt(txHash);\n    await sleep(2000);\n  }\n\n  return txReceipt.status;\n};\nexport const approve = async (userAddress, spenderAddress, tokenAddress, provider, onTxHash) => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress);\n    return tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({\n      from: userAddress,\n      gas: 80000\n    }, async (error, txHash) => {\n      if (error) {\n        console.log('ERC20 could not be approved', error);\n        onTxHash && onTxHash('');\n        return false;\n      }\n\n      if (onTxHash) {\n        onTxHash(txHash);\n      }\n\n      const status = await waitTransaction(provider, txHash);\n\n      if (!status) {\n        console.log('Approval transaction failed.');\n        return false;\n      }\n\n      return true;\n    });\n  } catch (e) {\n    return false;\n  }\n};\nexport const getAllowance = async (userAddress, spenderAddress, tokenAddress, provider) => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress);\n    const allowance = await tokenContract.methods.allowance(userAddress, spenderAddress).call();\n    return allowance;\n  } catch (e) {\n    return '0';\n  }\n};\nexport const getEthBalance = async (provider, userAddress) => {\n  const web3 = new Web3(provider);\n\n  try {\n    const balance = await web3.eth.getBalance(userAddress);\n    return balance;\n  } catch (e) {\n    return '0';\n  }\n};\nexport const getBalance = async (provider, tokenAddress, userAddress) => {\n  const tokenContract = getERC20Contract(provider, tokenAddress);\n\n  try {\n    const balance = await tokenContract.methods.balanceOf(userAddress).call();\n    return balance;\n  } catch (e) {\n    return '0';\n  }\n};\nexport const getBigNumBalance = async (provider, tokenAddress, userAddress) => {\n  const tokenContract = getERC20Contract(provider, tokenAddress);\n\n  try {\n    const balance = await tokenContract.methods.balanceOf(userAddress).call();\n    return new BigNumber(balance);\n  } catch (e) {\n    return new BigNumber(0);\n  }\n};\nexport const getERC20Contract = (provider, address) => {\n  const web3 = new Web3(provider);\n  const contract = new web3.eth.Contract(ERC20ABI.abi, address);\n  return contract;\n};\nexport const getFullDisplayBalance = (balance, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed();\n};\nexport const makeEtherscanLink = (transactionHash, chainId) => {\n  if (chainId && chainId === POLYGON_CHAIN_DATA.chainId) return `https://polygonscan.com/tx/${transactionHash}`;\n  return `https://etherscan.io/tx/${transactionHash}`;\n};\nexport const makeEtherscanAddressLink = transactionHash => {\n  return `https://etherscan.io/address/${transactionHash}`;\n};\nexport const getSupplyCap = async tokenAddress => {\n  const provider = getProvider();\n  const tokenContract = await new Contract(tokenAddress, SupplyCapIssuanceABI, provider);\n\n  try {\n    const cap = await tokenContract.supplyCap();\n    return cap.toString();\n  } catch (e) {\n    return '1';\n  }\n};\n/**\n * returns an undefined safe BigNumber\n * @param number\n * @returns\n */\n\nexport const getBigNumber = number => {\n  return number ? number : new BigNumber(0);\n};\n/**\n * Converts a number from Wei to another denomination of Eth\n * @param number\n * @param power\n * @returns\n */\n\nexport const fromWei = (number, power = 18) => {\n  return getBigNumber(number).dividedBy(new BigNumber(10).pow(power));\n};\n/**\n * Formats a BigNumber to 2 decimals from Wei\n * @param number\n * @returns\n */\n\nexport const displayFromWei = (number, decimals = 2) => {\n  return fromWei(number).toFormat(decimals);\n};\n/**\n * retrieves appropriate addresses for tokens\n * @param token\n * @param chainId\n * @returns\n */\n\nexport const getTokenAddress = (chainId, token) => {\n  if (token) {\n    if (chainId === POLYGON_CHAIN_DATA.chainId) return token.polygonAddress;\n    return token.address;\n  } else {\n    if (chainId === MAINNET_CHAIN_DATA.chainId) return ethTokenAddress;\n    return wethTokenPolygonAddress;\n  }\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/utils/index.ts"],"names":["Contract","ethers","Web3","ethTokenAddress","wethTokenPolygonAddress","getProvider","ERC20ABI","SupplyCapIssuanceABI","BigNumber","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","sleep","ms","Promise","resolve","setTimeout","waitTransaction","provider","txHash","web3","txReceipt","eth","getTransactionReceipt","status","approve","userAddress","spenderAddress","tokenAddress","onTxHash","tokenContract","getERC20Contract","methods","constants","MaxUint256","send","from","gas","error","console","log","e","getAllowance","allowance","call","getEthBalance","balance","getBalance","balanceOf","getBigNumBalance","address","contract","abi","getFullDisplayBalance","decimals","dividedBy","pow","toFixed","makeEtherscanLink","transactionHash","chainId","makeEtherscanAddressLink","getSupplyCap","cap","supplyCap","toString","getBigNumber","number","fromWei","power","displayFromWei","toFormat","getTokenAddress","token","polygonAddress"],"mappings":"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","sourcesContent":["import { Contract, ethers } from 'ethers'\nimport Web3 from 'web3'\nimport { provider, TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\n\nimport {\n  ethTokenAddress,\n  wethTokenPolygonAddress,\n} from 'constants/ethContractAddresses'\nimport { ProductToken } from 'constants/productTokens'\nimport { getProvider } from 'constants/provider'\nimport ERC20ABI from 'index-sdk/abi/ERC20.json'\nimport SupplyCapIssuanceABI from 'index-sdk/abi/SupplyCapIssuanceHook.json'\nimport BigNumber from 'utils/bignumber'\n\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from './connectors'\n\nconst sleep = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const waitTransaction = async (provider: provider, txHash: string) => {\n  const web3 = new Web3(provider)\n  let txReceipt: TransactionReceipt | null = null\n  while (txReceipt == null) {\n    txReceipt = await web3.eth.getTransactionReceipt(txHash)\n    await sleep(2000)\n  }\n  return txReceipt.status\n}\n\nexport const approve = async (\n  userAddress: string,\n  spenderAddress: string,\n  tokenAddress: string,\n  provider: provider,\n  onTxHash?: (txHash: string) => void\n): Promise<boolean> => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress)\n    return tokenContract.methods\n      .approve(spenderAddress, ethers.constants.MaxUint256)\n      .send(\n        { from: userAddress, gas: 80000 },\n        async (error: any, txHash: string) => {\n          if (error) {\n            console.log('ERC20 could not be approved', error)\n            onTxHash && onTxHash('')\n            return false\n          }\n          if (onTxHash) {\n            onTxHash(txHash)\n          }\n          const status = await waitTransaction(provider, txHash)\n          if (!status) {\n            console.log('Approval transaction failed.')\n            return false\n          }\n          return true\n        }\n      )\n  } catch (e) {\n    return false\n  }\n}\n\nexport const getAllowance = async (\n  userAddress: string,\n  spenderAddress: string,\n  tokenAddress: string,\n  provider: provider\n): Promise<string> => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress)\n    const allowance: string = await tokenContract.methods\n      .allowance(userAddress, spenderAddress)\n      .call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getEthBalance = async (\n  provider: provider,\n  userAddress: string\n): Promise<string> => {\n  const web3 = new Web3(provider)\n  try {\n    const balance: string = await web3.eth.getBalance(userAddress)\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getBalance = async (\n  provider: provider,\n  tokenAddress: string,\n  userAddress: string\n): Promise<string> => {\n  const tokenContract = getERC20Contract(provider, tokenAddress)\n  try {\n    const balance: string = await tokenContract.methods\n      .balanceOf(userAddress)\n      .call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getBigNumBalance = async (\n  provider: provider,\n  tokenAddress: string,\n  userAddress: string\n): Promise<BigNumber> => {\n  const tokenContract = getERC20Contract(provider, tokenAddress)\n  try {\n    const balance = await tokenContract.methods.balanceOf(userAddress).call()\n    return new BigNumber(balance)\n  } catch (e) {\n    return new BigNumber(0)\n  }\n}\n\nexport const getERC20Contract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(\n    ERC20ABI.abi as unknown as AbiItem,\n    address\n  )\n  return contract\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const makeEtherscanLink = (\n  transactionHash: string,\n  chainId: number | undefined\n) => {\n  if (chainId && chainId === POLYGON_CHAIN_DATA.chainId)\n    return `https://polygonscan.com/tx/${transactionHash}`\n  return `https://etherscan.io/tx/${transactionHash}`\n}\n\nexport const makeEtherscanAddressLink = (transactionHash: string) => {\n  return `https://etherscan.io/address/${transactionHash}`\n}\n\nexport const getSupplyCap = async (tokenAddress: string): Promise<string> => {\n  const provider = getProvider()\n  const tokenContract = await new Contract(\n    tokenAddress,\n    SupplyCapIssuanceABI,\n    provider\n  )\n  try {\n    const cap = await tokenContract.supplyCap()\n    return cap.toString()\n  } catch (e) {\n    return '1'\n  }\n}\n\n/**\n * returns an undefined safe BigNumber\n * @param number\n * @returns\n */\nexport const getBigNumber = (number: BigNumber | undefined) => {\n  return number ? number : new BigNumber(0)\n}\n\n/**\n * Converts a number from Wei to another denomination of Eth\n * @param number\n * @param power\n * @returns\n */\nexport const fromWei = (number: BigNumber | undefined, power: number = 18) => {\n  return getBigNumber(number).dividedBy(new BigNumber(10).pow(power))\n}\n\n/**\n * Formats a BigNumber to 2 decimals from Wei\n * @param number\n * @returns\n */\nexport const displayFromWei = (number: BigNumber | undefined, decimals: number = 2) => {\n  return fromWei(number).toFormat(decimals)\n}\n\n/**\n * retrieves appropriate addresses for tokens\n * @param token\n * @param chainId\n * @returns\n */\nexport const getTokenAddress = (chainId: number, token?: ProductToken) => {\n  if (token) {\n    if (chainId === POLYGON_CHAIN_DATA.chainId) return token.polygonAddress\n    return token.address\n  } else {\n    if (chainId === MAINNET_CHAIN_DATA.chainId) return ethTokenAddress\n    return wethTokenPolygonAddress\n  }\n}\n"]},"metadata":{},"sourceType":"module"}