{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/index-ui-master/src/contexts/Wallet/WalletProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core';\nimport useEagerConnect from 'hooks/useEagerConnect';\nimport { injected, ledgerwallet, walletconnect, walletlink } from 'utils/connectors';\nimport WalletContext from './WalletContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WalletProvider = ({\n  children\n}) => {\n  _s();\n\n  const [connector, setConnector] = useState('');\n  const [status, setStatus] = useState('disconnected');\n  const [isShowingWalletModal, setIsShowingWalletModal] = useState(false);\n  const [isMetamaskConnected, setIsMetamaskConnected] = useState(false);\n  const {\n    account,\n    activate,\n    active,\n    deactivate,\n    library: ethereum,\n    chainId\n  } = useWeb3React();\n  const reset = useCallback(() => {\n    if (active) deactivate();\n    setConnector('');\n    setStatus('disconnected');\n    localStorage.removeItem('walletconnect');\n  }, [active, deactivate]);\n  const connect = useCallback(async walletType => {\n    try {\n      reset();\n      setConnector(walletType);\n      setStatus('connecting');\n\n      switch (walletType) {\n        case 'injected':\n          activate(injected, undefined, true);\n          setStatus('connected');\n          setIsMetamaskConnected(true);\n          break;\n\n        case 'walletconnect':\n          await activate(walletconnect, undefined, true);\n          setStatus('connected');\n          break;\n\n        case 'walletlink':\n          await activate(walletlink, undefined, true);\n          setStatus('connected');\n          break;\n\n        case 'ledgerwallet':\n          await activate(ledgerwallet, undefined, true);\n          setStatus('connected');\n          break;\n\n        default:\n          throw new Error('unknown wallet type: ' + walletType);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }, [activate, reset]);\n  const triedEagerConnect = useEagerConnect(connect);\n  const onOpenWalletModal = useCallback(() => {\n    setIsShowingWalletModal(true);\n  }, [setIsShowingWalletModal]);\n  const onCloseWalletModal = useCallback(() => {\n    setIsShowingWalletModal(false);\n  }, [setIsShowingWalletModal]);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      account,\n      connector,\n      ethereum,\n      status,\n      isShowingWalletModal,\n      isMetamaskConnected,\n      triedEagerConnect,\n      connect,\n      reset,\n      onOpenWalletModal,\n      onCloseWalletModal,\n      chainId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WalletProvider, \"e5EaQJQ28qp2tnOfvQML6p+8Blw=\", false, function () {\n  return [useWeb3React, useEagerConnect];\n});\n\n_c = WalletProvider;\n\nfunction UseWalletProviderWrapper(props) {\n  return /*#__PURE__*/_jsxDEV(Web3ReactProvider, {\n    getLibrary: ethereum => ethereum,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = UseWalletProviderWrapper;\nexport default UseWalletProviderWrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WalletProvider\");\n$RefreshReg$(_c2, \"UseWalletProviderWrapper\");","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/contexts/Wallet/WalletProvider.tsx"],"names":["React","useCallback","useState","useWeb3React","Web3ReactProvider","useEagerConnect","injected","ledgerwallet","walletconnect","walletlink","WalletContext","WalletProvider","children","connector","setConnector","status","setStatus","isShowingWalletModal","setIsShowingWalletModal","isMetamaskConnected","setIsMetamaskConnected","account","activate","active","deactivate","library","ethereum","chainId","reset","localStorage","removeItem","connect","walletType","undefined","Error","err","console","log","triedEagerConnect","onOpenWalletModal","onCloseWalletModal","UseWalletProviderWrapper","props"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core'\n\nimport useChainData from 'hooks/useChainData'\nimport useEagerConnect from 'hooks/useEagerConnect'\nimport {\n  injected,\n  ledgerwallet,\n  walletconnect,\n  walletlink,\n} from 'utils/connectors'\n\nimport WalletContext from './WalletContext'\n\nconst WalletProvider: React.FC = ({ children }) => {\n  const [connector, setConnector] = useState<string>('')\n  const [status, setStatus] = useState('disconnected')\n  const [isShowingWalletModal, setIsShowingWalletModal] =\n    useState<boolean>(false)\n  const [isMetamaskConnected, setIsMetamaskConnected] = useState<boolean>(false)\n  const {\n    account,\n    activate,\n    active,\n    deactivate,\n    library: ethereum,\n    chainId,\n  } = useWeb3React()\n\n  const reset = useCallback(() => {\n    if (active) deactivate()\n\n    setConnector('')\n    setStatus('disconnected')\n    localStorage.removeItem('walletconnect')\n  }, [active, deactivate])\n\n  const connect = useCallback(\n    async (walletType: string) => {\n      try {\n        reset()\n        setConnector(walletType)\n        setStatus('connecting')\n        switch (walletType) {\n          case 'injected':\n            activate(injected, undefined, true)\n            setStatus('connected')\n            setIsMetamaskConnected(true)\n            break\n          case 'walletconnect':\n            await activate(walletconnect, undefined, true)\n            setStatus('connected')\n            break\n          case 'walletlink':\n            await activate(walletlink, undefined, true)\n            setStatus('connected')\n            break\n          case 'ledgerwallet':\n            await activate(ledgerwallet, undefined, true)\n            setStatus('connected')\n            break\n          default:\n            throw new Error('unknown wallet type: ' + walletType)\n        }\n      } catch (err) {\n        console.log(err)\n      }\n    },\n    [activate, reset]\n  )\n\n  const triedEagerConnect = useEagerConnect(connect)\n\n  const onOpenWalletModal = useCallback(() => {\n    setIsShowingWalletModal(true)\n  }, [setIsShowingWalletModal])\n\n  const onCloseWalletModal = useCallback(() => {\n    setIsShowingWalletModal(false)\n  }, [setIsShowingWalletModal])\n\n  return (\n    <WalletContext.Provider\n      value={{\n        account,\n        connector,\n        ethereum,\n        status,\n        isShowingWalletModal,\n        isMetamaskConnected,\n        triedEagerConnect,\n        connect,\n        reset,\n        onOpenWalletModal,\n        onCloseWalletModal,\n        chainId,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  )\n}\n\ninterface UseWalletProviderWrapperPropTypes {\n  children: any\n}\n\nfunction UseWalletProviderWrapper(props: UseWalletProviderWrapperPropTypes) {\n  return (\n    <Web3ReactProvider getLibrary={(ethereum) => ethereum}>\n      <WalletProvider {...props} />\n    </Web3ReactProvider>\n  )\n}\n\nexport default UseWalletProviderWrapper\n"]},"metadata":{},"sourceType":"module"}