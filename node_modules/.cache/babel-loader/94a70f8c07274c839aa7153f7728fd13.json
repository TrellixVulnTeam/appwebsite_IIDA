{"ast":null,"code":"import blob from \"@ledgerhq/cryptoassets/data/erc20-signatures\";\n/**\n * Retrieve the token information by a given contract address if any\n */\n\nexport var byContractAddressAndChainId = function (contract, chainId) {\n  return get().byContractAndChainId(asContractAddress(contract), chainId);\n};\n/**\n * list all the ERC20 tokens informations\n */\n\nexport var list = function () {\n  return get().list();\n};\n\nvar asContractAddress = function (addr) {\n  var a = addr.toLowerCase();\n  return a.startsWith(\"0x\") ? a : \"0x\" + a;\n}; // this internal get() will lazy load and cache the data from the erc20 data blob\n\n\nvar get = function () {\n  var cache;\n  return function () {\n    if (cache) return cache;\n    var buf = Buffer.from(blob, \"base64\");\n    var map = {};\n    var entries = [];\n    var i = 0;\n\n    while (i < buf.length) {\n      var length_1 = buf.readUInt32BE(i);\n      i += 4;\n      var item = buf.slice(i, i + length_1);\n      var j = 0;\n      var tickerLength = item.readUInt8(j);\n      j += 1;\n      var ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n      j += tickerLength;\n      var contractAddress = asContractAddress(item.slice(j, j + 20).toString(\"hex\"));\n      j += 20;\n      var decimals = item.readUInt32BE(j);\n      j += 4;\n      var chainId = item.readUInt32BE(j);\n      j += 4;\n      var signature = item.slice(j);\n      var entry = {\n        ticker: ticker,\n        contractAddress: contractAddress,\n        decimals: decimals,\n        chainId: chainId,\n        signature: signature,\n        data: item\n      };\n      entries.push(entry);\n      map[String(chainId) + \":\" + contractAddress] = entry;\n      i += length_1;\n    }\n\n    var api = {\n      list: function () {\n        return entries;\n      },\n      byContractAndChainId: function (contractAddress, chainId) {\n        return map[String(chainId) + \":\" + contractAddress];\n      }\n    };\n    cache = api;\n    return api;\n  };\n}();","map":{"version":3,"sources":["../src/erc20.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import blob from \"@ledgerhq/cryptoassets/data/erc20-signatures\";\n/**\n * Retrieve the token information by a given contract address if any\n */\nexport var byContractAddressAndChainId = function (contract, chainId) {\n    return get().byContractAndChainId(asContractAddress(contract), chainId);\n};\n/**\n * list all the ERC20 tokens informations\n */\nexport var list = function () { return get().list(); };\nvar asContractAddress = function (addr) {\n    var a = addr.toLowerCase();\n    return a.startsWith(\"0x\") ? a : \"0x\" + a;\n};\n// this internal get() will lazy load and cache the data from the erc20 data blob\nvar get = (function () {\n    var cache;\n    return function () {\n        if (cache)\n            return cache;\n        var buf = Buffer.from(blob, \"base64\");\n        var map = {};\n        var entries = [];\n        var i = 0;\n        while (i < buf.length) {\n            var length_1 = buf.readUInt32BE(i);\n            i += 4;\n            var item = buf.slice(i, i + length_1);\n            var j = 0;\n            var tickerLength = item.readUInt8(j);\n            j += 1;\n            var ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n            j += tickerLength;\n            var contractAddress = asContractAddress(item.slice(j, j + 20).toString(\"hex\"));\n            j += 20;\n            var decimals = item.readUInt32BE(j);\n            j += 4;\n            var chainId = item.readUInt32BE(j);\n            j += 4;\n            var signature = item.slice(j);\n            var entry = {\n                ticker: ticker,\n                contractAddress: contractAddress,\n                decimals: decimals,\n                chainId: chainId,\n                signature: signature,\n                data: item\n            };\n            entries.push(entry);\n            map[String(chainId) + \":\" + contractAddress] = entry;\n            i += length_1;\n        }\n        var api = {\n            list: function () { return entries; },\n            byContractAndChainId: function (contractAddress, chainId) {\n                return map[String(chainId) + \":\" + contractAddress];\n            }\n        };\n        cache = api;\n        return api;\n    };\n})();\n//# sourceMappingURL=erc20.js.map"]},"metadata":{},"sourceType":"module"}