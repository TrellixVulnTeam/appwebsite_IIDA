{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertLibraryNameToLinkId = void 0;\n\nvar ethers_1 = require(\"ethers\");\n\nvar path_1 = __importDefault(require(\"path\")); // Converts a fully qualified contract name in a bytecode link id.\n// (A fully qualified name looks like: `contracts/mocks/LibraryMock.sol:LibraryMock`)\n\n\nfunction convertLibraryNameToLinkId(libraryName) {\n  if (!(libraryName.includes(path_1.default.sep) && libraryName.includes(\":\"))) {\n    throw new Error(\"Converting library name to link id requires a fully qualified \" + \"contract name. Example: `contracts/mocks/LibraryMock.sol:LibraryMock`\");\n  }\n\n  var hashedName = ethers_1.utils.keccak256(ethers_1.utils.toUtf8Bytes(libraryName));\n  return \"__$\" + hashedName.slice(2).slice(0, 34) + \"$__\";\n}\n\nexports.convertLibraryNameToLinkId = convertLibraryNameToLinkId;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/node_modules/@setprotocol/set-protocol-v2/dist/utils/common/libraryUtils.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","convertLibraryNameToLinkId","ethers_1","require","path_1","libraryName","includes","default","sep","Error","hashedName","utils","keccak256","toUtf8Bytes","slice"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,0BAAR,GAAqC,KAAK,CAA1C;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAIC,MAAM,GAAGV,eAAe,CAACS,OAAO,CAAC,MAAD,CAAR,CAA5B,C,CACA;AACA;;;AACA,SAASF,0BAAT,CAAoCI,WAApC,EAAiD;AAC7C,MAAI,EAAEA,WAAW,CAACC,QAAZ,CAAqBF,MAAM,CAACG,OAAP,CAAeC,GAApC,KAA4CH,WAAW,CAACC,QAAZ,CAAqB,GAArB,CAA9C,CAAJ,EAA8E;AAC1E,UAAM,IAAIG,KAAJ,CAAU,mEACZ,uEADE,CAAN;AAEH;;AACD,MAAIC,UAAU,GAAGR,QAAQ,CAACS,KAAT,CAAeC,SAAf,CAAyBV,QAAQ,CAACS,KAAT,CAAeE,WAAf,CAA2BR,WAA3B,CAAzB,CAAjB;AACA,SAAO,QAAQK,UAAU,CAACI,KAAX,CAAiB,CAAjB,EAAoBA,KAApB,CAA0B,CAA1B,EAA6B,EAA7B,CAAR,GAA2C,KAAlD;AACH;;AACDf,OAAO,CAACE,0BAAR,GAAqCA,0BAArC","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertLibraryNameToLinkId = void 0;\nvar ethers_1 = require(\"ethers\");\nvar path_1 = __importDefault(require(\"path\"));\n// Converts a fully qualified contract name in a bytecode link id.\n// (A fully qualified name looks like: `contracts/mocks/LibraryMock.sol:LibraryMock`)\nfunction convertLibraryNameToLinkId(libraryName) {\n    if (!(libraryName.includes(path_1.default.sep) && libraryName.includes(\":\"))) {\n        throw new Error(\"Converting library name to link id requires a fully qualified \" +\n            \"contract name. Example: `contracts/mocks/LibraryMock.sol:LibraryMock`\");\n    }\n    var hashedName = ethers_1.utils.keccak256(ethers_1.utils.toUtf8Bytes(libraryName));\n    return \"__$\" + hashedName.slice(2).slice(0, 34) + \"$__\";\n}\nexports.convertLibraryNameToLinkId = convertLibraryNameToLinkId;\n"]},"metadata":{},"sourceType":"script"}