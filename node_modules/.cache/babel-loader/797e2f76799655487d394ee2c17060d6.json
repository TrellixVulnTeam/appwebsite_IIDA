{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/views/MVI/MVI.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport ProductDataUI from 'components/ProductPage/ProductDataUI';\nimport { MetaverseIndex } from 'constants/productTokens';\nimport useBalances from 'hooks/useBalances';\nimport useMviTokenMarketData from 'hooks/useMviTokenMarketData';\nimport useSetComponents from 'hooks/useSetComponents';\nimport useStreamingFee from 'hooks/useStreamingFee';\nimport useTokenSupply from 'hooks/useTokenSupply';\nimport useWallet from 'hooks/useWallet';\nimport BigNumber from 'utils/bignumber';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MviProductPage = props => {\n  _s();\n\n  useEffect(() => {\n    document.title = props.title;\n  }, [props.title]);\n  const {\n    latestPrice,\n    prices,\n    hourlyPrices,\n    latestMarketCap,\n    latestVolume\n  } = useMviTokenMarketData();\n  const {\n    chainId\n  } = useWallet();\n  const {\n    mviComponents: components\n  } = useSetComponents();\n  const {\n    mviBalance,\n    mviBalancePolygon\n  } = useBalances();\n  const {\n    mviStreamingFee\n  } = useStreamingFee();\n  const {\n    mviTotalSupply\n  } = useTokenSupply();\n  const token = { ...MetaverseIndex,\n    fees: mviStreamingFee ? {\n      streamingFee: mviStreamingFee\n    } : undefined\n  };\n\n  const getTokenBalance = () => {\n    if (chainId) {\n      if (chainId === MAINNET_CHAIN_DATA.chainId) return mviBalance;else if (chainId === POLYGON_CHAIN_DATA.chainId) return mviBalancePolygon;\n    }\n\n    return new BigNumber(0);\n  };\n\n  const tokenDataProps = {\n    prices: prices,\n    hourlyPrices: hourlyPrices,\n    latestPrice: latestPrice,\n    latestMarketCap: latestMarketCap,\n    latestVolume: latestVolume,\n    token: token,\n    components: components,\n    balance: getTokenBalance(),\n    currentSupply: mviTotalSupply\n  };\n  return /*#__PURE__*/_jsxDEV(ProductDataUI, {\n    tokenDataProps: tokenDataProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n};\n\n_s(MviProductPage, \"HDmvk8YDvQB+a1HzRMF6tCtLezY=\", false, function () {\n  return [useMviTokenMarketData, useWallet, useSetComponents, useBalances, useStreamingFee, useTokenSupply];\n});\n\n_c = MviProductPage;\nexport default MviProductPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MviProductPage\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/views/MVI/MVI.tsx"],"names":["React","useEffect","ProductDataUI","MetaverseIndex","useBalances","useMviTokenMarketData","useSetComponents","useStreamingFee","useTokenSupply","useWallet","BigNumber","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","MviProductPage","props","document","title","latestPrice","prices","hourlyPrices","latestMarketCap","latestVolume","chainId","mviComponents","components","mviBalance","mviBalancePolygon","mviStreamingFee","mviTotalSupply","token","fees","streamingFee","undefined","getTokenBalance","tokenDataProps","balance","currentSupply"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,aAAP,MAEO,sCAFP;AAIA,SAASC,cAAT,QAA6C,yBAA7C;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,kBAAvD;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAA8B;AAAA;;AACnDb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACC,KAAT,GAAiBF,KAAK,CAACE,KAAvB;AACD,GAFQ,EAEN,CAACF,KAAK,CAACE,KAAP,CAFM,CAAT;AAIA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA,YAAvB;AAAqCC,IAAAA,eAArC;AAAsDC,IAAAA;AAAtD,MACJhB,qBAAqB,EADvB;AAEA,QAAM;AAAEiB,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAM;AAAEc,IAAAA,aAAa,EAAEC;AAAjB,MAAgClB,gBAAgB,EAAtD;AACA,QAAM;AAAEmB,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAoCtB,WAAW,EAArD;AACA,QAAM;AAAEuB,IAAAA;AAAF,MAAsBpB,eAAe,EAA3C;AACA,QAAM;AAAEqB,IAAAA;AAAF,MAAqBpB,cAAc,EAAzC;AAEA,QAAMqB,KAAmB,GAAG,EAC1B,GAAG1B,cADuB;AAE1B2B,IAAAA,IAAI,EAAEH,eAAe,GAAG;AAAEI,MAAAA,YAAY,EAAEJ;AAAhB,KAAH,GAAuCK;AAFlC,GAA5B;;AAKA,QAAMC,eAAe,GAAG,MAAM;AAC5B,QAAIX,OAAJ,EAAa;AACX,UAAIA,OAAO,KAAKX,kBAAkB,CAACW,OAAnC,EAA4C,OAAOG,UAAP,CAA5C,KACK,IAAIH,OAAO,KAAKV,kBAAkB,CAACU,OAAnC,EAA4C,OAAOI,iBAAP;AAClD;;AACD,WAAO,IAAIhB,SAAJ,CAAc,CAAd,CAAP;AACD,GAND;;AAQA,QAAMwB,cAA8B,GAAG;AACrChB,IAAAA,MAAM,EAAEA,MAD6B;AAErCC,IAAAA,YAAY,EAAEA,YAFuB;AAGrCF,IAAAA,WAAW,EAAEA,WAHwB;AAIrCG,IAAAA,eAAe,EAAEA,eAJoB;AAKrCC,IAAAA,YAAY,EAAEA,YALuB;AAMrCQ,IAAAA,KAAK,EAAEA,KAN8B;AAOrCL,IAAAA,UAAU,EAAEA,UAPyB;AAQrCW,IAAAA,OAAO,EAAEF,eAAe,EARa;AASrCG,IAAAA,aAAa,EAAER;AATsB,GAAvC;AAYA,sBAAO,QAAC,aAAD;AAAe,IAAA,cAAc,EAAEM;AAA/B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAvCD;;GAAMrB,c;UAMFR,qB,EACkBI,S,EACkBH,gB,EACIF,W,EACdG,e,EACDC,c;;;KAXvBK,c;AAyCN,eAAeA,cAAf","sourcesContent":["import React, { useEffect } from 'react'\n\nimport ProductDataUI, {\n  TokenDataProps,\n} from 'components/ProductPage/ProductDataUI'\nimport { mviTokenPolygonAddress } from 'constants/ethContractAddresses'\nimport { MetaverseIndex, ProductToken } from 'constants/productTokens'\nimport useBalances from 'hooks/useBalances'\nimport useMviTokenMarketData from 'hooks/useMviTokenMarketData'\nimport useSetComponents from 'hooks/useSetComponents'\nimport useStreamingFee from 'hooks/useStreamingFee'\nimport useTokenSupply from 'hooks/useTokenSupply'\nimport useWallet from 'hooks/useWallet'\nimport BigNumber from 'utils/bignumber'\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors'\n\nconst MviProductPage = (props: { title: string }) => {\n  useEffect(() => {\n    document.title = props.title\n  }, [props.title])\n\n  const { latestPrice, prices, hourlyPrices, latestMarketCap, latestVolume } =\n    useMviTokenMarketData()\n  const { chainId } = useWallet()\n  const { mviComponents: components } = useSetComponents()\n  const { mviBalance, mviBalancePolygon } = useBalances()\n  const { mviStreamingFee } = useStreamingFee()\n  const { mviTotalSupply } = useTokenSupply()\n\n  const token: ProductToken = {\n    ...MetaverseIndex,\n    fees: mviStreamingFee ? { streamingFee: mviStreamingFee } : undefined,\n  }\n\n  const getTokenBalance = () => {\n    if (chainId) {\n      if (chainId === MAINNET_CHAIN_DATA.chainId) return mviBalance\n      else if (chainId === POLYGON_CHAIN_DATA.chainId) return mviBalancePolygon\n    }\n    return new BigNumber(0)\n  }\n\n  const tokenDataProps: TokenDataProps = {\n    prices: prices,\n    hourlyPrices: hourlyPrices,\n    latestPrice: latestPrice,\n    latestMarketCap: latestMarketCap,\n    latestVolume: latestVolume,\n    token: token,\n    components: components,\n    balance: getTokenBalance(),\n    currentSupply: mviTotalSupply,\n  }\n\n  return <ProductDataUI tokenDataProps={tokenDataProps} />\n}\n\nexport default MviProductPage\n"]},"metadata":{},"sourceType":"module"}