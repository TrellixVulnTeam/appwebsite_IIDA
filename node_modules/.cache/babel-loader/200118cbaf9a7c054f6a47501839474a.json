{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/Balances/Provider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { bedTokenAddress, btc2xfliTokenAddress, daiTokenAddress, daiTokenPolygonAddress, dataTokenAddress, dataTokenPolygonAddress, dpiTokenAddress, dpiTokenPolygonAddress, eth2xflipTokenAddress, eth2xfliTokenAddress, farmTwoAddress, gmiStakingRewardsAddress, gmiTokenAddress, gmiTokenPolygonAddress, iethflipTokenAddress, imaticflipTokenAddress, indexTokenAddress, matic2xflipTokenAddress, mviStakingRewardsAddress, mviTokenAddress, mviTokenPolygonAddress, stakingRewardsAddress, uniswapEthDpiLpTokenAddress, uniswapEthMviLpTokenAddress, usdcTokenAddress, usdcTokenPolygonAddress, wethTokenPolygonAddress } from 'constants/ethContractAddresses';\nimport useWallet from 'hooks/useWallet';\nimport { getEarnedIndexTokenQuantity as getEarnedFarmTwoBalance } from 'index-sdk/farmTwo';\nimport { getEarnedIndexTokenQuantity as getGmiRewardsBalance } from 'index-sdk/gmiStaking';\nimport { getEarnedIndexTokenQuantity as getMviRewardsBalance } from 'index-sdk/mviStaking';\nimport { getEarnedIndexTokenQuantity } from 'index-sdk/stake';\nimport BigNumber from 'utils/bignumber';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { getBalance, getBigNumBalance, getEthBalance } from 'utils/index';\nimport Context from './Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Provider = ({\n  children\n}) => {\n  _s();\n\n  const [ethBalance, setEthBalance] = useState();\n  const [indexBalance, setIndexBalance] = useState();\n  const [dpiBalance, setDpiBalance] = useState();\n  const [ethfliBalance, setEthFliBalance] = useState();\n  const [btcfliBalance, setBtcFliBalance] = useState();\n  const [mviBalance, setMviBalance] = useState();\n  const [daiBalance, setDaiBalance] = useState();\n  const [usdcBalance, setUsdcBalance] = useState();\n  const [bedBalance, setBedBalance] = useState();\n  const [dataBalance, setDataBalance] = useState();\n  const [gmiBalance, setGmiBalance] = useState(); // polygon balances\n\n  const [wethBalancePolygon, setWethBalancePolygon] = useState();\n  const [dpiBalancePolygon, setDpiBalancePolygon] = useState();\n  const [ethflipBalance, setEthFlipBalance] = useState();\n  const [mviBalancePolygon, setMviBalancePolygon] = useState();\n  const [daiBalancePolygon, setDaiBalancePolygon] = useState();\n  const [usdcBalancePolygon, setUsdcBalancePolygon] = useState();\n  const [dataBalancePolygon, setDataBalancePolygon] = useState();\n  const [gmiBalancePolygon, setGmiBalancePolygon] = useState();\n  const [iethFlipBalance, setIEthFlipBalance] = useState();\n  const [maticFlipBalancePolygon, setMaticFlipBalance] = useState();\n  const [imaticFlipBalancePolygon, setIMaticFlipBalance] = useState(); // LP Tokens Balances\n\n  const [uniswapEthDpiLpBalance, setUniswapEthDpiLpBalance] = useState();\n  const [uniswapEthMviLpBalance, setUniswapEthMviLpBalance] = useState(); // Legacy DPI LM Program\n\n  const [stakedUniswapEthDpiLpBalance, setStakedUniswapEthDpiLpBalance] = useState();\n  const [unharvestedIndexBalance, setUnharvestedIndexBalance] = useState(); // Current DPI LM Program\n\n  const [stakedFarmTwoBalance, setStakedFarmTwoBalance] = useState();\n  const [unharvestedFarmTwoBalance, setUnharvestedFarmTwoBalance] = useState(); // Current MVI LM Program\n\n  const [stakedUniswapEthMviLpBalance, setStakedUniswapEthMviLpBalance] = useState();\n  const [unharvestedMviRewardsBalance, setUnharvestedMviRewardsBalance] = useState(); // GMI Staking Program\n\n  const [stakedGmiBalance, setStakedGmiBalance] = useState();\n  const [unharvestedIndexFromGmiBalance, setUnharvestedIndexFromGmiBalance] = useState();\n  const {\n    account,\n    ethereum,\n    status,\n    chainId\n  } = useWallet();\n  const fetchBalances = useCallback(async (userAddress, provider) => {\n    if (!indexTokenAddress || !dpiTokenAddress || !dpiTokenPolygonAddress || !eth2xfliTokenAddress || !eth2xflipTokenAddress || !btc2xfliTokenAddress || !mviTokenAddress || !mviTokenPolygonAddress || !daiTokenAddress || !daiTokenPolygonAddress || !usdcTokenAddress || !usdcTokenPolygonAddress || !bedTokenAddress || !gmiTokenAddress || !dataTokenAddress || !dataTokenPolygonAddress || !gmiTokenPolygonAddress || !uniswapEthDpiLpTokenAddress || !uniswapEthMviLpTokenAddress || !stakingRewardsAddress || !gmiStakingRewardsAddress || !farmTwoAddress || !mviStakingRewardsAddress || !wethTokenPolygonAddress || !iethflipTokenAddress || !matic2xflipTokenAddress || !imaticflipTokenAddress) {\n      throw new Error('A token address is not defined. Please check your .env to confirm all token addresses are defined.');\n    }\n\n    if (chainId && chainId === MAINNET_CHAIN_DATA.chainId) {\n      const balances = await Promise.all([getEthBalance(provider, userAddress), getBalance(provider, indexTokenAddress, userAddress), getBalance(provider, dpiTokenAddress, userAddress), getBalance(provider, eth2xfliTokenAddress, userAddress), getBalance(provider, btc2xfliTokenAddress, userAddress), getBalance(provider, mviTokenAddress, userAddress), getBalance(provider, daiTokenAddress, userAddress), getBalance(provider, usdcTokenAddress, userAddress), getBalance(provider, bedTokenAddress, userAddress), getBalance(provider, dataTokenAddress, userAddress), getBalance(provider, gmiTokenAddress, userAddress), // LP Token Balances\n      getBalance(provider, uniswapEthDpiLpTokenAddress, userAddress), getBalance(provider, uniswapEthMviLpTokenAddress, userAddress), // Legacy DPI LM Program Balances\n      getBalance(provider, stakingRewardsAddress, userAddress), getEarnedIndexTokenQuantity(provider, userAddress), // Current DPI LM Program Balances\n      getBalance(provider, farmTwoAddress, userAddress), getEarnedFarmTwoBalance(provider, userAddress), // GMI staking Balances\n      getBalance(provider, gmiStakingRewardsAddress, userAddress), getGmiRewardsBalance(provider, userAddress)]); // Current MVI LM Program Balances\n\n      const balances2 = await Promise.all([getBigNumBalance(provider, mviStakingRewardsAddress, userAddress), getMviRewardsBalance(provider, userAddress)]); // mainnet\n\n      setEthBalance(new BigNumber(balances[0]));\n      setIndexBalance(new BigNumber(balances[1]));\n      setDpiBalance(new BigNumber(balances[2]));\n      setEthFliBalance(new BigNumber(balances[3]));\n      setBtcFliBalance(new BigNumber(balances[4]));\n      setMviBalance(new BigNumber(balances[5]));\n      setDaiBalance(new BigNumber(balances[6]));\n      setUsdcBalance(new BigNumber(balances[7]));\n      setBedBalance(new BigNumber(balances[8]));\n      setDataBalance(new BigNumber(balances[9]));\n      setGmiBalance(new BigNumber(balances[10]));\n      setUniswapEthDpiLpBalance(new BigNumber(balances[11]));\n      setUniswapEthMviLpBalance(new BigNumber(balances[12]));\n      setStakedUniswapEthDpiLpBalance(new BigNumber(balances[13]));\n      setUnharvestedIndexBalance(new BigNumber(balances[14]));\n      setStakedFarmTwoBalance(new BigNumber(balances[15]));\n      setUnharvestedFarmTwoBalance(new BigNumber(balances[16]));\n      setStakedGmiBalance(new BigNumber(balances[17]));\n      setUnharvestedIndexFromGmiBalance(new BigNumber(balances[18])); // BN Balances\n\n      setStakedUniswapEthMviLpBalance(balances2[0]);\n      setUnharvestedMviRewardsBalance(balances2[1]);\n    } else if (chainId && chainId === POLYGON_CHAIN_DATA.chainId) {\n      const balances = await Promise.all([//polygon\n      getBalance(provider, wethTokenPolygonAddress, userAddress), getBalance(provider, dpiTokenPolygonAddress, userAddress), getBalance(provider, eth2xflipTokenAddress, userAddress), getBalance(provider, mviTokenPolygonAddress, userAddress), getBalance(provider, daiTokenPolygonAddress, userAddress), getBalance(provider, usdcTokenPolygonAddress, userAddress), getBalance(provider, dataTokenPolygonAddress, userAddress), getBalance(provider, gmiTokenPolygonAddress, userAddress), getBalance(provider, iethflipTokenAddress, userAddress), getBalance(provider, imaticflipTokenAddress, userAddress), getBalance(provider, matic2xflipTokenAddress, userAddress)]); // polygon\n\n      setWethBalancePolygon(new BigNumber(balances[0]));\n      setDpiBalancePolygon(new BigNumber(balances[1]));\n      setEthFlipBalance(new BigNumber(balances[2]));\n      setMviBalancePolygon(new BigNumber(balances[3]));\n      setDaiBalancePolygon(new BigNumber(balances[4]));\n      setUsdcBalancePolygon(new BigNumber(balances[5]));\n      setDataBalancePolygon(new BigNumber(balances[6]));\n      setGmiBalancePolygon(new BigNumber(balances[7]));\n      setIEthFlipBalance(new BigNumber(balances[8]));\n      setIMaticFlipBalance(new BigNumber(balances[9]));\n      setMaticFlipBalance(new BigNumber(balances[10]));\n    }\n  }, [chainId, setEthBalance, setWethBalancePolygon, setIndexBalance, setDpiBalance, setEthFliBalance, setEthFlipBalance, setBtcFliBalance, setMviBalance, setBedBalance, setGmiBalance, setDataBalance, setDataBalancePolygon, setGmiBalancePolygon, setUniswapEthDpiLpBalance, setUniswapEthMviLpBalance, setStakedUniswapEthDpiLpBalance, setUnharvestedIndexBalance, setStakedFarmTwoBalance, setUnharvestedFarmTwoBalance, setStakedUniswapEthMviLpBalance, setUnharvestedMviRewardsBalance, setStakedGmiBalance, setUnharvestedIndexFromGmiBalance, setMaticFlipBalance, setIMaticFlipBalance, setIEthFlipBalance]);\n  useEffect(() => {\n    if (status !== 'connected') {\n      setEthBalance(new BigNumber(0));\n      setWethBalancePolygon(new BigNumber(0));\n      setIndexBalance(new BigNumber(0));\n      setDpiBalance(new BigNumber(0));\n      setDpiBalancePolygon(new BigNumber(0));\n      setEthFliBalance(new BigNumber(0));\n      setEthFlipBalance(new BigNumber(0));\n      setBtcFliBalance(new BigNumber(0));\n      setMviBalance(new BigNumber(0));\n      setMviBalancePolygon(new BigNumber(0));\n      setBedBalance(new BigNumber(0));\n      setGmiBalance(new BigNumber(0));\n      setDaiBalance(new BigNumber(0));\n      setDaiBalancePolygon(new BigNumber(0));\n      setUsdcBalance(new BigNumber(0));\n      setUsdcBalancePolygon(new BigNumber(0));\n      setUniswapEthDpiLpBalance(new BigNumber(0));\n      setUniswapEthMviLpBalance(new BigNumber(0));\n      setStakedUniswapEthDpiLpBalance(new BigNumber(0));\n      setUnharvestedIndexBalance(new BigNumber(0));\n      setStakedFarmTwoBalance(new BigNumber(0));\n      setUnharvestedFarmTwoBalance(new BigNumber(0));\n      setStakedUniswapEthMviLpBalance(new BigNumber(0));\n      setUnharvestedMviRewardsBalance(new BigNumber(0));\n      setDataBalance(new BigNumber(0));\n      setDataBalancePolygon(new BigNumber(0));\n      setStakedGmiBalance(new BigNumber(0));\n      setUnharvestedIndexFromGmiBalance(new BigNumber(0));\n      setGmiBalancePolygon(new BigNumber(0));\n      setMaticFlipBalance(new BigNumber(0));\n      setIMaticFlipBalance(new BigNumber(0));\n      setIEthFlipBalance(new BigNumber(0));\n    }\n  }, [status]);\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum);\n      let refreshInterval = setInterval(() => fetchBalances(account, ethereum), 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [account, ethereum, fetchBalances]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      ethBalance,\n      wethBalancePolygon,\n      indexBalance,\n      dpiBalance,\n      dpiBalancePolygon,\n      ethfliBalance,\n      ethflipBalance,\n      btcfliBalance,\n      mviBalance,\n      mviBalancePolygon,\n      daiBalance,\n      daiBalancePolygon,\n      usdcBalance,\n      usdcBalancePolygon,\n      bedBalance,\n      gmiBalance,\n      dataBalance,\n      dataBalancePolygon,\n      uniswapEthDpiLpBalance,\n      uniswapEthMviLpBalance,\n      stakedUniswapEthDpiLpBalance,\n      unharvestedIndexBalance,\n      stakedFarmTwoBalance,\n      unharvestedFarmTwoBalance,\n      stakedUniswapEthMviLpBalance,\n      unharvestedMviRewardsBalance,\n      stakedGmiBalance,\n      unharvestedIndexFromGmiBalance,\n      gmiBalancePolygon,\n      maticFlipBalancePolygon,\n      imaticFlipBalancePolygon,\n      iethFlipBalance\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Provider, \"KeUdB/G2BdngNZNxaPfkeajSOa0=\", false, function () {\n  return [useWallet];\n});\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/Balances/Provider.tsx"],"names":["React","useCallback","useEffect","useState","bedTokenAddress","btc2xfliTokenAddress","daiTokenAddress","daiTokenPolygonAddress","dataTokenAddress","dataTokenPolygonAddress","dpiTokenAddress","dpiTokenPolygonAddress","eth2xflipTokenAddress","eth2xfliTokenAddress","farmTwoAddress","gmiStakingRewardsAddress","gmiTokenAddress","gmiTokenPolygonAddress","iethflipTokenAddress","imaticflipTokenAddress","indexTokenAddress","matic2xflipTokenAddress","mviStakingRewardsAddress","mviTokenAddress","mviTokenPolygonAddress","stakingRewardsAddress","uniswapEthDpiLpTokenAddress","uniswapEthMviLpTokenAddress","usdcTokenAddress","usdcTokenPolygonAddress","wethTokenPolygonAddress","useWallet","getEarnedIndexTokenQuantity","getEarnedFarmTwoBalance","getGmiRewardsBalance","getMviRewardsBalance","BigNumber","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","getBalance","getBigNumBalance","getEthBalance","Context","Provider","children","ethBalance","setEthBalance","indexBalance","setIndexBalance","dpiBalance","setDpiBalance","ethfliBalance","setEthFliBalance","btcfliBalance","setBtcFliBalance","mviBalance","setMviBalance","daiBalance","setDaiBalance","usdcBalance","setUsdcBalance","bedBalance","setBedBalance","dataBalance","setDataBalance","gmiBalance","setGmiBalance","wethBalancePolygon","setWethBalancePolygon","dpiBalancePolygon","setDpiBalancePolygon","ethflipBalance","setEthFlipBalance","mviBalancePolygon","setMviBalancePolygon","daiBalancePolygon","setDaiBalancePolygon","usdcBalancePolygon","setUsdcBalancePolygon","dataBalancePolygon","setDataBalancePolygon","gmiBalancePolygon","setGmiBalancePolygon","iethFlipBalance","setIEthFlipBalance","maticFlipBalancePolygon","setMaticFlipBalance","imaticFlipBalancePolygon","setIMaticFlipBalance","uniswapEthDpiLpBalance","setUniswapEthDpiLpBalance","uniswapEthMviLpBalance","setUniswapEthMviLpBalance","stakedUniswapEthDpiLpBalance","setStakedUniswapEthDpiLpBalance","unharvestedIndexBalance","setUnharvestedIndexBalance","stakedFarmTwoBalance","setStakedFarmTwoBalance","unharvestedFarmTwoBalance","setUnharvestedFarmTwoBalance","stakedUniswapEthMviLpBalance","setStakedUniswapEthMviLpBalance","unharvestedMviRewardsBalance","setUnharvestedMviRewardsBalance","stakedGmiBalance","setStakedGmiBalance","unharvestedIndexFromGmiBalance","setUnharvestedIndexFromGmiBalance","account","ethereum","status","chainId","fetchBalances","userAddress","provider","Error","balances","Promise","all","balances2","refreshInterval","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AAIA,SACEC,eADF,EAEEC,oBAFF,EAGEC,eAHF,EAIEC,sBAJF,EAKEC,gBALF,EAMEC,uBANF,EAOEC,eAPF,EAQEC,sBARF,EAWEC,qBAXF,EAYEC,oBAZF,EAaEC,cAbF,EAcEC,wBAdF,EAeEC,eAfF,EAgBEC,sBAhBF,EAiBEC,oBAjBF,EAkBEC,sBAlBF,EAmBEC,iBAnBF,EAoBEC,uBApBF,EAqBEC,wBArBF,EAsBEC,eAtBF,EAuBEC,sBAvBF,EAwBEC,qBAxBF,EAyBEC,2BAzBF,EA0BEC,2BA1BF,EA2BEC,gBA3BF,EA4BEC,uBA5BF,EA6BEC,uBA7BF,QA8BO,gCA9BP;AA+BA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,2BAA2B,IAAIC,uBAAxC,QAAuE,mBAAvE;AACA,SAASD,2BAA2B,IAAIE,oBAAxC,QAAoE,sBAApE;AACA,SAASF,2BAA2B,IAAIG,oBAAxC,QAAoE,sBAApE;AACA,SAASH,2BAAT,QAA4C,iBAA5C;AACA,OAAOI,SAAP,MAAsB,iBAAtB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,kBAAvD;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,aAAvC,QAA4D,aAA5D;AAEA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,QAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC3C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B3C,QAAQ,EAA5C;AACA,QAAM,CAAC4C,YAAD,EAAeC,eAAf,IAAkC7C,QAAQ,EAAhD;AACA,QAAM,CAAC8C,UAAD,EAAaC,aAAb,IAA8B/C,QAAQ,EAA5C;AACA,QAAM,CAACgD,aAAD,EAAgBC,gBAAhB,IAAoCjD,QAAQ,EAAlD;AACA,QAAM,CAACkD,aAAD,EAAgBC,gBAAhB,IAAoCnD,QAAQ,EAAlD;AACA,QAAM,CAACoD,UAAD,EAAaC,aAAb,IAA8BrD,QAAQ,EAA5C;AACA,QAAM,CAACsD,UAAD,EAAaC,aAAb,IAA8BvD,QAAQ,EAA5C;AACA,QAAM,CAACwD,WAAD,EAAcC,cAAd,IAAgCzD,QAAQ,EAA9C;AACA,QAAM,CAAC0D,UAAD,EAAaC,aAAb,IAA8B3D,QAAQ,EAA5C;AACA,QAAM,CAAC4D,WAAD,EAAcC,cAAd,IAAgC7D,QAAQ,EAA9C;AACA,QAAM,CAAC8D,UAAD,EAAaC,aAAb,IAA8B/D,QAAQ,EAA5C,CAX2C,CAa3C;;AACA,QAAM,CAACgE,kBAAD,EAAqBC,qBAArB,IAA8CjE,QAAQ,EAA5D;AACA,QAAM,CAACkE,iBAAD,EAAoBC,oBAApB,IAA4CnE,QAAQ,EAA1D;AACA,QAAM,CAACoE,cAAD,EAAiBC,iBAAjB,IAAsCrE,QAAQ,EAApD;AACA,QAAM,CAACsE,iBAAD,EAAoBC,oBAApB,IAA4CvE,QAAQ,EAA1D;AACA,QAAM,CAACwE,iBAAD,EAAoBC,oBAApB,IAA4CzE,QAAQ,EAA1D;AACA,QAAM,CAAC0E,kBAAD,EAAqBC,qBAArB,IAA8C3E,QAAQ,EAA5D;AACA,QAAM,CAAC4E,kBAAD,EAAqBC,qBAArB,IAA8C7E,QAAQ,EAA5D;AACA,QAAM,CAAC8E,iBAAD,EAAoBC,oBAApB,IAA4C/E,QAAQ,EAA1D;AACA,QAAM,CAACgF,eAAD,EAAkBC,kBAAlB,IAAwCjF,QAAQ,EAAtD;AACA,QAAM,CAACkF,uBAAD,EAA0BC,mBAA1B,IAAiDnF,QAAQ,EAA/D;AACA,QAAM,CAACoF,wBAAD,EAA2BC,oBAA3B,IAAmDrF,QAAQ,EAAjE,CAxB2C,CA0B3C;;AACA,QAAM,CAACsF,sBAAD,EAAyBC,yBAAzB,IACJvF,QAAQ,EADV;AAEA,QAAM,CAACwF,sBAAD,EAAyBC,yBAAzB,IACJzF,QAAQ,EADV,CA7B2C,CAgC3C;;AACA,QAAM,CAAC0F,4BAAD,EAA+BC,+BAA/B,IACJ3F,QAAQ,EADV;AAEA,QAAM,CAAC4F,uBAAD,EAA0BC,0BAA1B,IACJ7F,QAAQ,EADV,CAnC2C,CAsC3C;;AACA,QAAM,CAAC8F,oBAAD,EAAuBC,uBAAvB,IAAkD/F,QAAQ,EAAhE;AACA,QAAM,CAACgG,yBAAD,EAA4BC,4BAA5B,IACJjG,QAAQ,EADV,CAxC2C,CA2C3C;;AACA,QAAM,CAACkG,4BAAD,EAA+BC,+BAA/B,IACJnG,QAAQ,EADV;AAEA,QAAM,CAACoG,4BAAD,EAA+BC,+BAA/B,IACJrG,QAAQ,EADV,CA9C2C,CAiD3C;;AACA,QAAM,CAACsG,gBAAD,EAAmBC,mBAAnB,IAA0CvG,QAAQ,EAAxD;AACA,QAAM,CAACwG,8BAAD,EAAiCC,iCAAjC,IACJzG,QAAQ,EADV;AAGA,QAAM;AAAE0G,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B,MAAyCjF,SAAS,EAAxD;AAEA,QAAMkF,aAAa,GAAGhH,WAAW,CAC/B,OAAOiH,WAAP,EAA4BC,QAA5B,KAAmD;AACjD,QACE,CAAC/F,iBAAD,IACA,CAACV,eADD,IAEA,CAACC,sBAFD,IAGA,CAACE,oBAHD,IAIA,CAACD,qBAJD,IAKA,CAACP,oBALD,IAMA,CAACkB,eAND,IAOA,CAACC,sBAPD,IAQA,CAAClB,eARD,IASA,CAACC,sBATD,IAUA,CAACqB,gBAVD,IAWA,CAACC,uBAXD,IAYA,CAACzB,eAZD,IAaA,CAACY,eAbD,IAcA,CAACR,gBAdD,IAeA,CAACC,uBAfD,IAgBA,CAACQ,sBAhBD,IAiBA,CAACS,2BAjBD,IAkBA,CAACC,2BAlBD,IAmBA,CAACF,qBAnBD,IAoBA,CAACV,wBApBD,IAqBA,CAACD,cArBD,IAsBA,CAACQ,wBAtBD,IAuBA,CAACQ,uBAvBD,IAwBA,CAACZ,oBAxBD,IAyBA,CAACG,uBAzBD,IA0BA,CAACF,sBA3BH,EA4BE;AACA,YAAM,IAAIiG,KAAJ,CACJ,oGADI,CAAN;AAGD;;AACD,QAAIJ,OAAO,IAAIA,OAAO,KAAK3E,kBAAkB,CAAC2E,OAA9C,EAAuD;AACrD,YAAMK,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CACjC9E,aAAa,CAAC0E,QAAD,EAAWD,WAAX,CADoB,EAEjC3E,UAAU,CAAC4E,QAAD,EAAW/F,iBAAX,EAA8B8F,WAA9B,CAFuB,EAGjC3E,UAAU,CAAC4E,QAAD,EAAWzG,eAAX,EAA4BwG,WAA5B,CAHuB,EAIjC3E,UAAU,CAAC4E,QAAD,EAAWtG,oBAAX,EAAiCqG,WAAjC,CAJuB,EAKjC3E,UAAU,CAAC4E,QAAD,EAAW9G,oBAAX,EAAiC6G,WAAjC,CALuB,EAMjC3E,UAAU,CAAC4E,QAAD,EAAW5F,eAAX,EAA4B2F,WAA5B,CANuB,EAOjC3E,UAAU,CAAC4E,QAAD,EAAW7G,eAAX,EAA4B4G,WAA5B,CAPuB,EAQjC3E,UAAU,CAAC4E,QAAD,EAAWvF,gBAAX,EAA6BsF,WAA7B,CARuB,EASjC3E,UAAU,CAAC4E,QAAD,EAAW/G,eAAX,EAA4B8G,WAA5B,CATuB,EAUjC3E,UAAU,CAAC4E,QAAD,EAAW3G,gBAAX,EAA6B0G,WAA7B,CAVuB,EAWjC3E,UAAU,CAAC4E,QAAD,EAAWnG,eAAX,EAA4BkG,WAA5B,CAXuB,EAajC;AACA3E,MAAAA,UAAU,CAAC4E,QAAD,EAAWzF,2BAAX,EAAwCwF,WAAxC,CAduB,EAejC3E,UAAU,CAAC4E,QAAD,EAAWxF,2BAAX,EAAwCuF,WAAxC,CAfuB,EAiBjC;AACA3E,MAAAA,UAAU,CAAC4E,QAAD,EAAW1F,qBAAX,EAAkCyF,WAAlC,CAlBuB,EAmBjClF,2BAA2B,CAACmF,QAAD,EAAWD,WAAX,CAnBM,EAqBjC;AACA3E,MAAAA,UAAU,CAAC4E,QAAD,EAAWrG,cAAX,EAA2BoG,WAA3B,CAtBuB,EAuBjCjF,uBAAuB,CAACkF,QAAD,EAAWD,WAAX,CAvBU,EAyBjC;AACA3E,MAAAA,UAAU,CAAC4E,QAAD,EAAWpG,wBAAX,EAAqCmG,WAArC,CA1BuB,EA2BjChF,oBAAoB,CAACiF,QAAD,EAAWD,WAAX,CA3Ba,CAAZ,CAAvB,CADqD,CA8BrD;;AACA,YAAMM,SAAS,GAAG,MAAMF,OAAO,CAACC,GAAR,CAAY,CAClC/E,gBAAgB,CAAC2E,QAAD,EAAW7F,wBAAX,EAAqC4F,WAArC,CADkB,EAElC/E,oBAAoB,CAACgF,QAAD,EAAWD,WAAX,CAFc,CAAZ,CAAxB,CA/BqD,CAoCrD;;AACApE,MAAAA,aAAa,CAAC,IAAIV,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAb;AACArE,MAAAA,eAAe,CAAC,IAAIZ,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAf;AACAnE,MAAAA,aAAa,CAAC,IAAId,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAb;AACAjE,MAAAA,gBAAgB,CAAC,IAAIhB,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAhB;AACA/D,MAAAA,gBAAgB,CAAC,IAAIlB,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAhB;AACA7D,MAAAA,aAAa,CAAC,IAAIpB,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAb;AACA3D,MAAAA,aAAa,CAAC,IAAItB,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAb;AACAzD,MAAAA,cAAc,CAAC,IAAIxB,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAd;AACAvD,MAAAA,aAAa,CAAC,IAAI1B,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAb;AACArD,MAAAA,cAAc,CAAC,IAAI5B,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAd;AACAnD,MAAAA,aAAa,CAAC,IAAI9B,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAAb;AACA3B,MAAAA,yBAAyB,CAAC,IAAItD,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAAzB;AACAzB,MAAAA,yBAAyB,CAAC,IAAIxD,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAAzB;AACAvB,MAAAA,+BAA+B,CAAC,IAAI1D,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAA/B;AACArB,MAAAA,0BAA0B,CAAC,IAAI5D,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAA1B;AACAnB,MAAAA,uBAAuB,CAAC,IAAI9D,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAAvB;AACAjB,MAAAA,4BAA4B,CAAC,IAAIhE,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAA5B;AAEAX,MAAAA,mBAAmB,CAAC,IAAItE,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAAnB;AACAT,MAAAA,iCAAiC,CAAC,IAAIxE,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAAjC,CAxDqD,CA0DrD;;AACAf,MAAAA,+BAA+B,CAACkB,SAAS,CAAC,CAAD,CAAV,CAA/B;AACAhB,MAAAA,+BAA+B,CAACgB,SAAS,CAAC,CAAD,CAAV,CAA/B;AACD,KA7DD,MA6DO,IAAIR,OAAO,IAAIA,OAAO,KAAK1E,kBAAkB,CAAC0E,OAA9C,EAAuD;AAC5D,YAAMK,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CACjC;AACAhF,MAAAA,UAAU,CAAC4E,QAAD,EAAWrF,uBAAX,EAAoCoF,WAApC,CAFuB,EAGjC3E,UAAU,CAAC4E,QAAD,EAAWxG,sBAAX,EAAmCuG,WAAnC,CAHuB,EAIjC3E,UAAU,CAAC4E,QAAD,EAAWvG,qBAAX,EAAkCsG,WAAlC,CAJuB,EAKjC3E,UAAU,CAAC4E,QAAD,EAAW3F,sBAAX,EAAmC0F,WAAnC,CALuB,EAMjC3E,UAAU,CAAC4E,QAAD,EAAW5G,sBAAX,EAAmC2G,WAAnC,CANuB,EAOjC3E,UAAU,CAAC4E,QAAD,EAAWtF,uBAAX,EAAoCqF,WAApC,CAPuB,EAQjC3E,UAAU,CAAC4E,QAAD,EAAW1G,uBAAX,EAAoCyG,WAApC,CARuB,EASjC3E,UAAU,CAAC4E,QAAD,EAAWlG,sBAAX,EAAmCiG,WAAnC,CATuB,EAUjC3E,UAAU,CAAC4E,QAAD,EAAWjG,oBAAX,EAAiCgG,WAAjC,CAVuB,EAWjC3E,UAAU,CAAC4E,QAAD,EAAWhG,sBAAX,EAAmC+F,WAAnC,CAXuB,EAYjC3E,UAAU,CAAC4E,QAAD,EAAW9F,uBAAX,EAAoC6F,WAApC,CAZuB,CAAZ,CAAvB,CAD4D,CAgB5D;;AACA9C,MAAAA,qBAAqB,CAAC,IAAIhC,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAArB;AACA/C,MAAAA,oBAAoB,CAAC,IAAIlC,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAApB;AACA7C,MAAAA,iBAAiB,CAAC,IAAIpC,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAjB;AACA3C,MAAAA,oBAAoB,CAAC,IAAItC,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAApB;AACAzC,MAAAA,oBAAoB,CAAC,IAAIxC,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAApB;AACAvC,MAAAA,qBAAqB,CAAC,IAAI1C,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAArB;AACArC,MAAAA,qBAAqB,CAAC,IAAI5C,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAArB;AACAnC,MAAAA,oBAAoB,CAAC,IAAI9C,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAApB;AACAjC,MAAAA,kBAAkB,CAAC,IAAIhD,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAAlB;AACA7B,MAAAA,oBAAoB,CAAC,IAAIpD,SAAJ,CAAciF,QAAQ,CAAC,CAAD,CAAtB,CAAD,CAApB;AACA/B,MAAAA,mBAAmB,CAAC,IAAIlD,SAAJ,CAAciF,QAAQ,CAAC,EAAD,CAAtB,CAAD,CAAnB;AACD;AACF,GA7H8B,EA8H/B,CACEL,OADF,EAEElE,aAFF,EAGEsB,qBAHF,EAIEpB,eAJF,EAKEE,aALF,EAMEE,gBANF,EAOEoB,iBAPF,EAQElB,gBARF,EASEE,aATF,EAUEM,aAVF,EAWEI,aAXF,EAYEF,cAZF,EAaEgB,qBAbF,EAcEE,oBAdF,EAeEQ,yBAfF,EAgBEE,yBAhBF,EAiBEE,+BAjBF,EAkBEE,0BAlBF,EAmBEE,uBAnBF,EAoBEE,4BApBF,EAqBEE,+BArBF,EAsBEE,+BAtBF,EAuBEE,mBAvBF,EAwBEE,iCAxBF,EAyBEtB,mBAzBF,EA0BEE,oBA1BF,EA2BEJ,kBA3BF,CA9H+B,CAAjC;AA6JAlF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6G,MAAM,KAAK,WAAf,EAA4B;AAC1BjE,MAAAA,aAAa,CAAC,IAAIV,SAAJ,CAAc,CAAd,CAAD,CAAb;AACAgC,MAAAA,qBAAqB,CAAC,IAAIhC,SAAJ,CAAc,CAAd,CAAD,CAArB;AACAY,MAAAA,eAAe,CAAC,IAAIZ,SAAJ,CAAc,CAAd,CAAD,CAAf;AACAc,MAAAA,aAAa,CAAC,IAAId,SAAJ,CAAc,CAAd,CAAD,CAAb;AACAkC,MAAAA,oBAAoB,CAAC,IAAIlC,SAAJ,CAAc,CAAd,CAAD,CAApB;AACAgB,MAAAA,gBAAgB,CAAC,IAAIhB,SAAJ,CAAc,CAAd,CAAD,CAAhB;AACAoC,MAAAA,iBAAiB,CAAC,IAAIpC,SAAJ,CAAc,CAAd,CAAD,CAAjB;AACAkB,MAAAA,gBAAgB,CAAC,IAAIlB,SAAJ,CAAc,CAAd,CAAD,CAAhB;AACAoB,MAAAA,aAAa,CAAC,IAAIpB,SAAJ,CAAc,CAAd,CAAD,CAAb;AACAsC,MAAAA,oBAAoB,CAAC,IAAItC,SAAJ,CAAc,CAAd,CAAD,CAApB;AACA0B,MAAAA,aAAa,CAAC,IAAI1B,SAAJ,CAAc,CAAd,CAAD,CAAb;AACA8B,MAAAA,aAAa,CAAC,IAAI9B,SAAJ,CAAc,CAAd,CAAD,CAAb;AACAsB,MAAAA,aAAa,CAAC,IAAItB,SAAJ,CAAc,CAAd,CAAD,CAAb;AACAwC,MAAAA,oBAAoB,CAAC,IAAIxC,SAAJ,CAAc,CAAd,CAAD,CAApB;AACAwB,MAAAA,cAAc,CAAC,IAAIxB,SAAJ,CAAc,CAAd,CAAD,CAAd;AACA0C,MAAAA,qBAAqB,CAAC,IAAI1C,SAAJ,CAAc,CAAd,CAAD,CAArB;AACAsD,MAAAA,yBAAyB,CAAC,IAAItD,SAAJ,CAAc,CAAd,CAAD,CAAzB;AACAwD,MAAAA,yBAAyB,CAAC,IAAIxD,SAAJ,CAAc,CAAd,CAAD,CAAzB;AACA0D,MAAAA,+BAA+B,CAAC,IAAI1D,SAAJ,CAAc,CAAd,CAAD,CAA/B;AACA4D,MAAAA,0BAA0B,CAAC,IAAI5D,SAAJ,CAAc,CAAd,CAAD,CAA1B;AACA8D,MAAAA,uBAAuB,CAAC,IAAI9D,SAAJ,CAAc,CAAd,CAAD,CAAvB;AACAgE,MAAAA,4BAA4B,CAAC,IAAIhE,SAAJ,CAAc,CAAd,CAAD,CAA5B;AACAkE,MAAAA,+BAA+B,CAAC,IAAIlE,SAAJ,CAAc,CAAd,CAAD,CAA/B;AACAoE,MAAAA,+BAA+B,CAAC,IAAIpE,SAAJ,CAAc,CAAd,CAAD,CAA/B;AACA4B,MAAAA,cAAc,CAAC,IAAI5B,SAAJ,CAAc,CAAd,CAAD,CAAd;AACA4C,MAAAA,qBAAqB,CAAC,IAAI5C,SAAJ,CAAc,CAAd,CAAD,CAArB;AACAsE,MAAAA,mBAAmB,CAAC,IAAItE,SAAJ,CAAc,CAAd,CAAD,CAAnB;AACAwE,MAAAA,iCAAiC,CAAC,IAAIxE,SAAJ,CAAc,CAAd,CAAD,CAAjC;AACA8C,MAAAA,oBAAoB,CAAC,IAAI9C,SAAJ,CAAc,CAAd,CAAD,CAApB;AACAkD,MAAAA,mBAAmB,CAAC,IAAIlD,SAAJ,CAAc,CAAd,CAAD,CAAnB;AACAoD,MAAAA,oBAAoB,CAAC,IAAIpD,SAAJ,CAAc,CAAd,CAAD,CAApB;AACAgD,MAAAA,kBAAkB,CAAC,IAAIhD,SAAJ,CAAc,CAAd,CAAD,CAAlB;AACD;AACF,GAnCQ,EAmCN,CAAC2E,MAAD,CAnCM,CAAT;AAqCA7G,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2G,OAAO,IAAIC,QAAf,EAAyB;AACvBG,MAAAA,aAAa,CAACJ,OAAD,EAAUC,QAAV,CAAb;AACA,UAAIW,eAAe,GAAGC,WAAW,CAC/B,MAAMT,aAAa,CAACJ,OAAD,EAAUC,QAAV,CADY,EAE/B,KAF+B,CAAjC;AAIA,aAAO,MAAMa,aAAa,CAACF,eAAD,CAA1B;AACD;AACF,GATQ,EASN,CAACZ,OAAD,EAAUC,QAAV,EAAoBG,aAApB,CATM,CAAT;AAWA,sBACE,QAAC,OAAD,CAAS,QAAT;AACE,IAAA,KAAK,EAAE;AACLpE,MAAAA,UADK;AAELsB,MAAAA,kBAFK;AAGLpB,MAAAA,YAHK;AAILE,MAAAA,UAJK;AAKLoB,MAAAA,iBALK;AAMLlB,MAAAA,aANK;AAOLoB,MAAAA,cAPK;AAQLlB,MAAAA,aARK;AASLE,MAAAA,UATK;AAULkB,MAAAA,iBAVK;AAWLhB,MAAAA,UAXK;AAYLkB,MAAAA,iBAZK;AAaLhB,MAAAA,WAbK;AAcLkB,MAAAA,kBAdK;AAeLhB,MAAAA,UAfK;AAgBLI,MAAAA,UAhBK;AAiBLF,MAAAA,WAjBK;AAkBLgB,MAAAA,kBAlBK;AAmBLU,MAAAA,sBAnBK;AAoBLE,MAAAA,sBApBK;AAqBLE,MAAAA,4BArBK;AAsBLE,MAAAA,uBAtBK;AAuBLE,MAAAA,oBAvBK;AAwBLE,MAAAA,yBAxBK;AAyBLE,MAAAA,4BAzBK;AA0BLE,MAAAA,4BA1BK;AA2BLE,MAAAA,gBA3BK;AA4BLE,MAAAA,8BA5BK;AA6BL1B,MAAAA,iBA7BK;AA8BLI,MAAAA,uBA9BK;AA+BLE,MAAAA,wBA/BK;AAgCLJ,MAAAA;AAhCK,KADT;AAAA,cAoCGvC;AApCH;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CA7SD;;GAAMD,Q;UAsD2CZ,S;;;KAtD3CY,Q;AA+SN,eAAeA,QAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport { provider } from 'web3-core'\n\nimport {\n  bedTokenAddress,\n  btc2xfliTokenAddress,\n  daiTokenAddress,\n  daiTokenPolygonAddress,\n  dataTokenAddress,\n  dataTokenPolygonAddress,\n  dpiTokenAddress,\n  dpiTokenPolygonAddress,\n  wlkrTokenAddress,\n  wlkrTokenPolygonAddress,\n  eth2xflipTokenAddress,\n  eth2xfliTokenAddress,\n  farmTwoAddress,\n  gmiStakingRewardsAddress,\n  gmiTokenAddress,\n  gmiTokenPolygonAddress,\n  iethflipTokenAddress,\n  imaticflipTokenAddress,\n  indexTokenAddress,\n  matic2xflipTokenAddress,\n  mviStakingRewardsAddress,\n  mviTokenAddress,\n  mviTokenPolygonAddress,\n  stakingRewardsAddress,\n  uniswapEthDpiLpTokenAddress,\n  uniswapEthMviLpTokenAddress,\n  usdcTokenAddress,\n  usdcTokenPolygonAddress,\n  wethTokenPolygonAddress,\n} from 'constants/ethContractAddresses'\nimport useWallet from 'hooks/useWallet'\nimport { getEarnedIndexTokenQuantity as getEarnedFarmTwoBalance } from 'index-sdk/farmTwo'\nimport { getEarnedIndexTokenQuantity as getGmiRewardsBalance } from 'index-sdk/gmiStaking'\nimport { getEarnedIndexTokenQuantity as getMviRewardsBalance } from 'index-sdk/mviStaking'\nimport { getEarnedIndexTokenQuantity } from 'index-sdk/stake'\nimport BigNumber from 'utils/bignumber'\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors'\nimport { getBalance, getBigNumBalance, getEthBalance } from 'utils/index'\n\nimport Context from './Context'\n\nconst Provider: React.FC = ({ children }) => {\n  const [ethBalance, setEthBalance] = useState<BigNumber>()\n  const [indexBalance, setIndexBalance] = useState<BigNumber>()\n  const [dpiBalance, setDpiBalance] = useState<BigNumber>()\n  const [ethfliBalance, setEthFliBalance] = useState<BigNumber>()\n  const [btcfliBalance, setBtcFliBalance] = useState<BigNumber>()\n  const [mviBalance, setMviBalance] = useState<BigNumber>()\n  const [daiBalance, setDaiBalance] = useState<BigNumber>()\n  const [usdcBalance, setUsdcBalance] = useState<BigNumber>()\n  const [bedBalance, setBedBalance] = useState<BigNumber>()\n  const [dataBalance, setDataBalance] = useState<BigNumber>()\n  const [gmiBalance, setGmiBalance] = useState<BigNumber>()\n\n  // polygon balances\n  const [wethBalancePolygon, setWethBalancePolygon] = useState<BigNumber>()\n  const [dpiBalancePolygon, setDpiBalancePolygon] = useState<BigNumber>()\n  const [ethflipBalance, setEthFlipBalance] = useState<BigNumber>()\n  const [mviBalancePolygon, setMviBalancePolygon] = useState<BigNumber>()\n  const [daiBalancePolygon, setDaiBalancePolygon] = useState<BigNumber>()\n  const [usdcBalancePolygon, setUsdcBalancePolygon] = useState<BigNumber>()\n  const [dataBalancePolygon, setDataBalancePolygon] = useState<BigNumber>()\n  const [gmiBalancePolygon, setGmiBalancePolygon] = useState<BigNumber>()\n  const [iethFlipBalance, setIEthFlipBalance] = useState<BigNumber>()\n  const [maticFlipBalancePolygon, setMaticFlipBalance] = useState<BigNumber>()\n  const [imaticFlipBalancePolygon, setIMaticFlipBalance] = useState<BigNumber>()\n\n  // LP Tokens Balances\n  const [uniswapEthDpiLpBalance, setUniswapEthDpiLpBalance] =\n    useState<BigNumber>()\n  const [uniswapEthMviLpBalance, setUniswapEthMviLpBalance] =\n    useState<BigNumber>()\n\n  // Legacy DPI LM Program\n  const [stakedUniswapEthDpiLpBalance, setStakedUniswapEthDpiLpBalance] =\n    useState<BigNumber>()\n  const [unharvestedIndexBalance, setUnharvestedIndexBalance] =\n    useState<BigNumber>()\n\n  // Current DPI LM Program\n  const [stakedFarmTwoBalance, setStakedFarmTwoBalance] = useState<BigNumber>()\n  const [unharvestedFarmTwoBalance, setUnharvestedFarmTwoBalance] =\n    useState<BigNumber>()\n\n  // Current MVI LM Program\n  const [stakedUniswapEthMviLpBalance, setStakedUniswapEthMviLpBalance] =\n    useState<BigNumber>()\n  const [unharvestedMviRewardsBalance, setUnharvestedMviRewardsBalance] =\n    useState<BigNumber>()\n\n  // GMI Staking Program\n  const [stakedGmiBalance, setStakedGmiBalance] = useState<BigNumber>()\n  const [unharvestedIndexFromGmiBalance, setUnharvestedIndexFromGmiBalance] =\n    useState<BigNumber>()\n\n  const { account, ethereum, status, chainId } = useWallet()\n\n  const fetchBalances = useCallback(\n    async (userAddress: string, provider: provider) => {\n      if (\n        !indexTokenAddress ||\n        !dpiTokenAddress ||\n        !dpiTokenPolygonAddress ||\n        !eth2xfliTokenAddress ||\n        !eth2xflipTokenAddress ||\n        !btc2xfliTokenAddress ||\n        !mviTokenAddress ||\n        !mviTokenPolygonAddress ||\n        !daiTokenAddress ||\n        !daiTokenPolygonAddress ||\n        !usdcTokenAddress ||\n        !usdcTokenPolygonAddress ||\n        !bedTokenAddress ||\n        !gmiTokenAddress ||\n        !dataTokenAddress ||\n        !dataTokenPolygonAddress ||\n        !gmiTokenPolygonAddress ||\n        !uniswapEthDpiLpTokenAddress ||\n        !uniswapEthMviLpTokenAddress ||\n        !stakingRewardsAddress ||\n        !gmiStakingRewardsAddress ||\n        !farmTwoAddress ||\n        !mviStakingRewardsAddress ||\n        !wethTokenPolygonAddress ||\n        !iethflipTokenAddress ||\n        !matic2xflipTokenAddress ||\n        !imaticflipTokenAddress\n      ) {\n        throw new Error(\n          'A token address is not defined. Please check your .env to confirm all token addresses are defined.'\n        )\n      }\n      if (chainId && chainId === MAINNET_CHAIN_DATA.chainId) {\n        const balances = await Promise.all([\n          getEthBalance(provider, userAddress),\n          getBalance(provider, indexTokenAddress, userAddress),\n          getBalance(provider, dpiTokenAddress, userAddress),\n          getBalance(provider, eth2xfliTokenAddress, userAddress),\n          getBalance(provider, btc2xfliTokenAddress, userAddress),\n          getBalance(provider, mviTokenAddress, userAddress),\n          getBalance(provider, daiTokenAddress, userAddress),\n          getBalance(provider, usdcTokenAddress, userAddress),\n          getBalance(provider, bedTokenAddress, userAddress),\n          getBalance(provider, dataTokenAddress, userAddress),\n          getBalance(provider, gmiTokenAddress, userAddress),\n\n          // LP Token Balances\n          getBalance(provider, uniswapEthDpiLpTokenAddress, userAddress),\n          getBalance(provider, uniswapEthMviLpTokenAddress, userAddress),\n\n          // Legacy DPI LM Program Balances\n          getBalance(provider, stakingRewardsAddress, userAddress),\n          getEarnedIndexTokenQuantity(provider, userAddress),\n\n          // Current DPI LM Program Balances\n          getBalance(provider, farmTwoAddress, userAddress),\n          getEarnedFarmTwoBalance(provider, userAddress),\n\n          // GMI staking Balances\n          getBalance(provider, gmiStakingRewardsAddress, userAddress),\n          getGmiRewardsBalance(provider, userAddress),\n        ])\n        // Current MVI LM Program Balances\n        const balances2 = await Promise.all([\n          getBigNumBalance(provider, mviStakingRewardsAddress, userAddress),\n          getMviRewardsBalance(provider, userAddress),\n        ])\n\n        // mainnet\n        setEthBalance(new BigNumber(balances[0]))\n        setIndexBalance(new BigNumber(balances[1]))\n        setDpiBalance(new BigNumber(balances[2]))\n        setEthFliBalance(new BigNumber(balances[3]))\n        setBtcFliBalance(new BigNumber(balances[4]))\n        setMviBalance(new BigNumber(balances[5]))\n        setDaiBalance(new BigNumber(balances[6]))\n        setUsdcBalance(new BigNumber(balances[7]))\n        setBedBalance(new BigNumber(balances[8]))\n        setDataBalance(new BigNumber(balances[9]))\n        setGmiBalance(new BigNumber(balances[10]))\n        setUniswapEthDpiLpBalance(new BigNumber(balances[11]))\n        setUniswapEthMviLpBalance(new BigNumber(balances[12]))\n        setStakedUniswapEthDpiLpBalance(new BigNumber(balances[13]))\n        setUnharvestedIndexBalance(new BigNumber(balances[14]))\n        setStakedFarmTwoBalance(new BigNumber(balances[15]))\n        setUnharvestedFarmTwoBalance(new BigNumber(balances[16]))\n\n        setStakedGmiBalance(new BigNumber(balances[17]))\n        setUnharvestedIndexFromGmiBalance(new BigNumber(balances[18]))\n\n        // BN Balances\n        setStakedUniswapEthMviLpBalance(balances2[0])\n        setUnharvestedMviRewardsBalance(balances2[1])\n      } else if (chainId && chainId === POLYGON_CHAIN_DATA.chainId) {\n        const balances = await Promise.all([\n          //polygon\n          getBalance(provider, wethTokenPolygonAddress, userAddress),\n          getBalance(provider, dpiTokenPolygonAddress, userAddress),\n          getBalance(provider, eth2xflipTokenAddress, userAddress),\n          getBalance(provider, mviTokenPolygonAddress, userAddress),\n          getBalance(provider, daiTokenPolygonAddress, userAddress),\n          getBalance(provider, usdcTokenPolygonAddress, userAddress),\n          getBalance(provider, dataTokenPolygonAddress, userAddress),\n          getBalance(provider, gmiTokenPolygonAddress, userAddress),\n          getBalance(provider, iethflipTokenAddress, userAddress),\n          getBalance(provider, imaticflipTokenAddress, userAddress),\n          getBalance(provider, matic2xflipTokenAddress, userAddress),\n        ])\n\n        // polygon\n        setWethBalancePolygon(new BigNumber(balances[0]))\n        setDpiBalancePolygon(new BigNumber(balances[1]))\n        setEthFlipBalance(new BigNumber(balances[2]))\n        setMviBalancePolygon(new BigNumber(balances[3]))\n        setDaiBalancePolygon(new BigNumber(balances[4]))\n        setUsdcBalancePolygon(new BigNumber(balances[5]))\n        setDataBalancePolygon(new BigNumber(balances[6]))\n        setGmiBalancePolygon(new BigNumber(balances[7]))\n        setIEthFlipBalance(new BigNumber(balances[8]))\n        setIMaticFlipBalance(new BigNumber(balances[9]))\n        setMaticFlipBalance(new BigNumber(balances[10]))\n      }\n    },\n    [\n      chainId,\n      setEthBalance,\n      setWethBalancePolygon,\n      setIndexBalance,\n      setDpiBalance,\n      setEthFliBalance,\n      setEthFlipBalance,\n      setBtcFliBalance,\n      setMviBalance,\n      setBedBalance,\n      setGmiBalance,\n      setDataBalance,\n      setDataBalancePolygon,\n      setGmiBalancePolygon,\n      setUniswapEthDpiLpBalance,\n      setUniswapEthMviLpBalance,\n      setStakedUniswapEthDpiLpBalance,\n      setUnharvestedIndexBalance,\n      setStakedFarmTwoBalance,\n      setUnharvestedFarmTwoBalance,\n      setStakedUniswapEthMviLpBalance,\n      setUnharvestedMviRewardsBalance,\n      setStakedGmiBalance,\n      setUnharvestedIndexFromGmiBalance,\n      setMaticFlipBalance,\n      setIMaticFlipBalance,\n      setIEthFlipBalance,\n    ]\n  )\n\n  useEffect(() => {\n    if (status !== 'connected') {\n      setEthBalance(new BigNumber(0))\n      setWethBalancePolygon(new BigNumber(0))\n      setIndexBalance(new BigNumber(0))\n      setDpiBalance(new BigNumber(0))\n      setDpiBalancePolygon(new BigNumber(0))\n      setEthFliBalance(new BigNumber(0))\n      setEthFlipBalance(new BigNumber(0))\n      setBtcFliBalance(new BigNumber(0))\n      setMviBalance(new BigNumber(0))\n      setMviBalancePolygon(new BigNumber(0))\n      setBedBalance(new BigNumber(0))\n      setGmiBalance(new BigNumber(0))\n      setDaiBalance(new BigNumber(0))\n      setDaiBalancePolygon(new BigNumber(0))\n      setUsdcBalance(new BigNumber(0))\n      setUsdcBalancePolygon(new BigNumber(0))\n      setUniswapEthDpiLpBalance(new BigNumber(0))\n      setUniswapEthMviLpBalance(new BigNumber(0))\n      setStakedUniswapEthDpiLpBalance(new BigNumber(0))\n      setUnharvestedIndexBalance(new BigNumber(0))\n      setStakedFarmTwoBalance(new BigNumber(0))\n      setUnharvestedFarmTwoBalance(new BigNumber(0))\n      setStakedUniswapEthMviLpBalance(new BigNumber(0))\n      setUnharvestedMviRewardsBalance(new BigNumber(0))\n      setDataBalance(new BigNumber(0))\n      setDataBalancePolygon(new BigNumber(0))\n      setStakedGmiBalance(new BigNumber(0))\n      setUnharvestedIndexFromGmiBalance(new BigNumber(0))\n      setGmiBalancePolygon(new BigNumber(0))\n      setMaticFlipBalance(new BigNumber(0))\n      setIMaticFlipBalance(new BigNumber(0))\n      setIEthFlipBalance(new BigNumber(0))\n    }\n  }, [status])\n\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum)\n      let refreshInterval = setInterval(\n        () => fetchBalances(account, ethereum),\n        10000\n      )\n      return () => clearInterval(refreshInterval)\n    }\n  }, [account, ethereum, fetchBalances])\n\n  return (\n    <Context.Provider\n      value={{\n        ethBalance,\n        wethBalancePolygon,\n        indexBalance,\n        dpiBalance,\n        dpiBalancePolygon,\n        ethfliBalance,\n        ethflipBalance,\n        btcfliBalance,\n        mviBalance,\n        mviBalancePolygon,\n        daiBalance,\n        daiBalancePolygon,\n        usdcBalance,\n        usdcBalancePolygon,\n        bedBalance,\n        gmiBalance,\n        dataBalance,\n        dataBalancePolygon,\n        uniswapEthDpiLpBalance,\n        uniswapEthMviLpBalance,\n        stakedUniswapEthDpiLpBalance,\n        unharvestedIndexBalance,\n        stakedFarmTwoBalance,\n        unharvestedFarmTwoBalance,\n        stakedUniswapEthMviLpBalance,\n        unharvestedMviRewardsBalance,\n        stakedGmiBalance,\n        unharvestedIndexFromGmiBalance,\n        gmiBalancePolygon,\n        maticFlipBalancePolygon,\n        imaticFlipBalancePolygon,\n        iethFlipBalance,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default Provider\n"]},"metadata":{},"sourceType":"module"}