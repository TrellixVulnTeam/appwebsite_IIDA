{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/index-ui-master/src/components/BuySell/components/BuySellButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { RoundedButton } from 'components/RoundedButton';\nimport { zeroExRouterAddress } from 'constants/ethContractAddresses';\nimport useApproval from 'hooks/useApproval';\nimport useBuySell from 'hooks/useBuySell';\nimport useWallet from 'hooks/useWallet';\nimport { getTokenAddress } from 'utils';\nimport { MAINNET_CHAIN_DATA } from 'utils/connectors';\n/**\n * BuySellButton - Displays a button used in the buy sell flow.\n * The button can be used to:\n * 1. Prompt user login to complete a transaction\n * 2. Prompt the user to approve input currency to Uniswap Router\n * 3. Execute the trade transaction\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BuySellButton = () => {\n  _s();\n\n  const {\n    buySellToken,\n    isFetchingOrderData,\n    isUserBuying,\n    onExecuteBuySell,\n    zeroExTradeData\n  } = useBuySell();\n  const {\n    account,\n    onOpenWalletModal\n  } = useWallet();\n  const loginRequired = !account;\n  const tokenApproval = useApproval(zeroExTradeData === null || zeroExTradeData === void 0 ? void 0 : zeroExTradeData.sellTokenAddress, zeroExRouterAddress);\n  const tokenApprovalRequired = !tokenApproval.isApproved;\n  const tokenApproving = tokenApproval.isApproving;\n  const ignoreApproval = (zeroExTradeData === null || zeroExTradeData === void 0 ? void 0 : zeroExTradeData.sellTokenAddress) === getTokenAddress(MAINNET_CHAIN_DATA.chainId) || (zeroExTradeData === null || zeroExTradeData === void 0 ? void 0 : zeroExTradeData.sellTokenAddress) === undefined;\n  let buttonText;\n  let buttonAction;\n\n  if (tokenApproving && !ignoreApproval) {\n    buttonText = 'Approving';\n\n    buttonAction = () => {};\n  } else if (tokenApprovalRequired && !ignoreApproval) {\n    buttonText = 'Approve Tokens';\n    buttonAction = tokenApproval.onApprove;\n  } else if (isUserBuying) {\n    buttonText = 'Buy';\n    buttonAction = onExecuteBuySell;\n  } else {\n    buttonText = 'Sell';\n    buttonAction = onExecuteBuySell;\n  }\n\n  if (loginRequired) {\n    buttonText = 'Login';\n    buttonAction = onOpenWalletModal;\n  }\n\n  return /*#__PURE__*/_jsxDEV(RoundedButton, {\n    buttonClassName: buySellToken,\n    isDisabled: !zeroExTradeData && !loginRequired,\n    isPending: isFetchingOrderData,\n    text: buttonText,\n    onClick: buttonAction\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuySellButton, \"d5EzUCt9jUewhJAV8qZD6J233Q4=\", false, function () {\n  return [useBuySell, useWallet, useApproval];\n});\n\n_c = BuySellButton;\nexport default BuySellButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuySellButton\");","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/components/BuySell/components/BuySellButton.tsx"],"names":["React","RoundedButton","zeroExRouterAddress","useApproval","useBuySell","useWallet","getTokenAddress","MAINNET_CHAIN_DATA","BuySellButton","buySellToken","isFetchingOrderData","isUserBuying","onExecuteBuySell","zeroExTradeData","account","onOpenWalletModal","loginRequired","tokenApproval","sellTokenAddress","tokenApprovalRequired","isApproved","tokenApproving","isApproving","ignoreApproval","chainId","undefined","buttonText","buttonAction","onApprove"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,aAAuB,GAAG,MAAM;AAAA;;AACpC,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,mBAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,gBAJI;AAKJC,IAAAA;AALI,MAMFT,UAAU,EANd;AAQA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAiCV,SAAS,EAAhD;AAEA,QAAMW,aAAa,GAAG,CAACF,OAAvB;AAEA,QAAMG,aAAa,GAAGd,WAAW,CAC/BU,eAD+B,aAC/BA,eAD+B,uBAC/BA,eAAe,CAAEK,gBADc,EAE/BhB,mBAF+B,CAAjC;AAKA,QAAMiB,qBAAqB,GAAG,CAACF,aAAa,CAACG,UAA7C;AACA,QAAMC,cAAc,GAAGJ,aAAa,CAACK,WAArC;AACA,QAAMC,cAAc,GAClB,CAAAV,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEK,gBAAjB,MACEZ,eAAe,CAACC,kBAAkB,CAACiB,OAApB,CADjB,IAEA,CAAAX,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEK,gBAAjB,MAAsCO,SAHxC;AAKA,MAAIC,UAAJ;AACA,MAAIC,YAAJ;;AACA,MAAIN,cAAc,IAAI,CAACE,cAAvB,EAAuC;AACrCG,IAAAA,UAAU,GAAG,WAAb;;AACAC,IAAAA,YAAY,GAAG,MAAM,CAAE,CAAvB;AACD,GAHD,MAGO,IAAIR,qBAAqB,IAAI,CAACI,cAA9B,EAA8C;AACnDG,IAAAA,UAAU,GAAG,gBAAb;AACAC,IAAAA,YAAY,GAAGV,aAAa,CAACW,SAA7B;AACD,GAHM,MAGA,IAAIjB,YAAJ,EAAkB;AACvBe,IAAAA,UAAU,GAAG,KAAb;AACAC,IAAAA,YAAY,GAAGf,gBAAf;AACD,GAHM,MAGA;AACLc,IAAAA,UAAU,GAAG,MAAb;AACAC,IAAAA,YAAY,GAAGf,gBAAf;AACD;;AAED,MAAII,aAAJ,EAAmB;AACjBU,IAAAA,UAAU,GAAG,OAAb;AACAC,IAAAA,YAAY,GAAGZ,iBAAf;AACD;;AAED,sBACE,QAAC,aAAD;AACE,IAAA,eAAe,EAAEN,YADnB;AAEE,IAAA,UAAU,EAAE,CAACI,eAAD,IAAoB,CAACG,aAFnC;AAGE,IAAA,SAAS,EAAEN,mBAHb;AAIE,IAAA,IAAI,EAAEgB,UAJR;AAKE,IAAA,OAAO,EAAEC;AALX;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAvDD;;GAAMnB,a;UAOAJ,U,EAEmCC,S,EAIjBF,W;;;KAblBK,a;AAyDN,eAAeA,aAAf","sourcesContent":["import React from 'react'\n\nimport { RoundedButton } from 'components/RoundedButton'\nimport { zeroExRouterAddress } from 'constants/ethContractAddresses'\nimport useApproval from 'hooks/useApproval'\nimport useBuySell from 'hooks/useBuySell'\nimport useWallet from 'hooks/useWallet'\nimport { getTokenAddress } from 'utils'\nimport { MAINNET_CHAIN_DATA } from 'utils/connectors'\n\n/**\n * BuySellButton - Displays a button used in the buy sell flow.\n * The button can be used to:\n * 1. Prompt user login to complete a transaction\n * 2. Prompt the user to approve input currency to Uniswap Router\n * 3. Execute the trade transaction\n */\nconst BuySellButton: React.FC = () => {\n  const {\n    buySellToken,\n    isFetchingOrderData,\n    isUserBuying,\n    onExecuteBuySell,\n    zeroExTradeData,\n  } = useBuySell()\n\n  const { account, onOpenWalletModal } = useWallet()\n\n  const loginRequired = !account\n\n  const tokenApproval = useApproval(\n    zeroExTradeData?.sellTokenAddress,\n    zeroExRouterAddress\n  )\n\n  const tokenApprovalRequired = !tokenApproval.isApproved\n  const tokenApproving = tokenApproval.isApproving\n  const ignoreApproval =\n    zeroExTradeData?.sellTokenAddress ===\n      getTokenAddress(MAINNET_CHAIN_DATA.chainId) ||\n    zeroExTradeData?.sellTokenAddress === undefined\n\n  let buttonText: string\n  let buttonAction: (...args: any[]) => any\n  if (tokenApproving && !ignoreApproval) {\n    buttonText = 'Approving'\n    buttonAction = () => {}\n  } else if (tokenApprovalRequired && !ignoreApproval) {\n    buttonText = 'Approve Tokens'\n    buttonAction = tokenApproval.onApprove\n  } else if (isUserBuying) {\n    buttonText = 'Buy'\n    buttonAction = onExecuteBuySell\n  } else {\n    buttonText = 'Sell'\n    buttonAction = onExecuteBuySell\n  }\n\n  if (loginRequired) {\n    buttonText = 'Login'\n    buttonAction = onOpenWalletModal\n  }\n\n  return (\n    <RoundedButton\n      buttonClassName={buySellToken}\n      isDisabled={!zeroExTradeData && !loginRequired}\n      isPending={isFetchingOrderData}\n      text={buttonText}\n      onClick={buttonAction}\n    />\n  )\n}\n\nexport default BuySellButton\n"]},"metadata":{},"sourceType":"module"}