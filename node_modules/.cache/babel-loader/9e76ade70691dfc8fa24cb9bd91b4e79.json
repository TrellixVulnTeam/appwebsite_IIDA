{"ast":null,"code":"const {\n  EthereumRpcError,\n  EthereumProviderError\n} = require('./classes');\n\nconst {\n  getMessageFromCode\n} = require('./utils');\n\nconst ERROR_CODES = require('./errorCodes.json');\n\nmodule.exports = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    parse: opts => getEthJsonRpcError(ERROR_CODES.rpc.parse, opts),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidRequest: opts => getEthJsonRpcError(ERROR_CODES.rpc.invalidRequest, opts),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidParams: opts => getEthJsonRpcError(ERROR_CODES.rpc.invalidParams, opts),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotFound: opts => getEthJsonRpcError(ERROR_CODES.rpc.methodNotFound, opts),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    internal: opts => getEthJsonRpcError(ERROR_CODES.rpc.internal, opts),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP 1474.\n     *\n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    server: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n\n      const {\n        code\n      } = opts;\n\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n\n      return getEthJsonRpcError(code, opts);\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidInput: opts => getEthJsonRpcError(ERROR_CODES.rpc.invalidInput, opts),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceNotFound: opts => getEthJsonRpcError(ERROR_CODES.rpc.resourceNotFound, opts),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceUnavailable: opts => getEthJsonRpcError(ERROR_CODES.rpc.resourceUnavailable, opts),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    transactionRejected: opts => getEthJsonRpcError(ERROR_CODES.rpc.transactionRejected, opts),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotSupported: opts => getEthJsonRpcError(ERROR_CODES.rpc.methodNotSupported, opts),\n\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    limitExceeded: opts => getEthJsonRpcError(ERROR_CODES.rpc.limitExceeded, opts)\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    userRejectedRequest: opts => {\n      return getEthProviderError(ERROR_CODES.provider.userRejectedRequest, opts);\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unauthorized: opts => {\n      return getEthProviderError(ERROR_CODES.provider.unauthorized, opts);\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unsupportedMethod: opts => {\n      return getEthProviderError(ERROR_CODES.provider.unsupportedMethod, opts);\n    },\n\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    disconnected: opts => {\n      return getEthProviderError(ERROR_CODES.provider.disconnected, opts);\n    },\n\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    chainDisconnected: opts => {\n      return getEthProviderError(ERROR_CODES.provider.chainDisconnected, opts);\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     *\n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} opts.message - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    custom: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n\n      const {\n        code,\n        message,\n        data\n      } = opts;\n\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n\n      return new EthereumProviderError(code, message, data);\n    }\n  }\n}; // Internal\n\nfunction getEthJsonRpcError(code, opts) {\n  const [message, data] = validateOpts(opts);\n  return new EthereumRpcError(code, message || getMessageFromCode(code), data);\n}\n\nfunction getEthProviderError(code, opts) {\n  const [message, data] = validateOpts(opts);\n  return new EthereumProviderError(code, message || getMessageFromCode(code), data);\n}\n\nfunction validateOpts(opts) {\n  if (opts) {\n    if (typeof opts === 'string') {\n      return [opts];\n    } else if (typeof opts === 'object' && !Array.isArray(opts)) {\n      const {\n        message,\n        data\n      } = opts;\n      return [message, data];\n    }\n  }\n\n  return [];\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/node_modules/eth-rpc-errors/src/errors.js"],"names":["EthereumRpcError","EthereumProviderError","require","getMessageFromCode","ERROR_CODES","module","exports","rpc","parse","opts","getEthJsonRpcError","invalidRequest","invalidParams","methodNotFound","internal","server","Array","isArray","Error","code","Number","isInteger","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","provider","userRejectedRequest","getEthProviderError","unauthorized","unsupportedMethod","disconnected","chainDisconnected","custom","message","data","validateOpts"],"mappings":"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","sourcesContent":["\nconst { EthereumRpcError, EthereumProviderError } = require('./classes')\nconst { getMessageFromCode } = require('./utils')\nconst ERROR_CODES = require('./errorCodes.json')\n\nmodule.exports = {\n  rpc: {\n\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    parse: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.parse, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidRequest: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidRequest, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidParams: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidParams, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotFound, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    internal: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.internal, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP 1474.\n     *\n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    server: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.')\n      }\n      const { code } = opts\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error(\n          '\"code\" must be an integer such that: -32099 <= code <= -32005',\n        )\n      }\n      return getEthJsonRpcError(code, opts)\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidInput: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidInput, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceNotFound, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceUnavailable: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceUnavailable, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    transactionRejected: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.transactionRejected, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotSupported: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotSupported, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    limitExceeded: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.limitExceeded, opts,\n    ),\n  },\n\n  provider: {\n\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    userRejectedRequest: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.userRejectedRequest, opts,\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unauthorized: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unauthorized, opts,\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unsupportedMethod: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unsupportedMethod, opts,\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    disconnected: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.disconnected, opts,\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    chainDisconnected: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.chainDisconnected, opts,\n      )\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     *\n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} opts.message - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    custom: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.')\n      }\n      const { code, message, data } = opts\n      if (!message || typeof message !== 'string') {\n        throw new Error(\n          '\"message\" must be a nonempty string',\n        )\n      }\n      return new EthereumProviderError(code, message, data)\n    },\n  },\n}\n\n// Internal\n\nfunction getEthJsonRpcError (code, opts) {\n  const [message, data] = validateOpts(opts)\n  return new EthereumRpcError(\n    code,\n    message || getMessageFromCode(code),\n    data,\n  )\n}\n\nfunction getEthProviderError (code, opts) {\n  const [message, data] = validateOpts(opts)\n  return new EthereumProviderError(\n    code,\n    message || getMessageFromCode(code),\n    data,\n  )\n}\n\nfunction validateOpts (opts) {\n  if (opts) {\n    if (typeof opts === 'string') {\n      return [opts]\n    } else if (typeof opts === 'object' && !Array.isArray(opts)) {\n      const { message, data } = opts\n      return [message, data]\n    }\n  }\n  return []\n}\n"]},"metadata":{},"sourceType":"script"}