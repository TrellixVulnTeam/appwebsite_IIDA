{"ast":null,"code":"import { camelCase } from 'lodash';\nconst tokensetsUrl = process.env.REACT_APP_TOKENSETS_URL;\nexport const fetchSetComponents = set => {\n  const requestUrl = `${tokensetsUrl}/public/v2/portfolios/${set}`;\n  return fetch(requestUrl).then(response => response.json()).then(response => {\n    var _response$portfolio;\n\n    if (!(response === null || response === void 0 ? void 0 : (_response$portfolio = response.portfolio) === null || _response$portfolio === void 0 ? void 0 : _response$portfolio.components)) {\n      // undocumented API endpoint. Throw error if not expected response format\n      throw new Error('Invalid API response from Set Protocol service');\n    }\n\n    const {\n      portfolio: {\n        components\n      }\n    } = response;\n    return formatComponents(components);\n  }).catch(error => console.log(error));\n};\nexport const fetchHistoricalTokenMarketData = (id, baseCurrency = 'usd') => {\n  const requestUrl = `${tokensetsUrl}/v2/fund_historicals/${id}?currency=${baseCurrency}&beta=true&interval=month`;\n  return fetch(requestUrl).then(response => response.json()).then(response => {\n    const {\n      prices,\n      dates\n    } = response;\n    return {\n      prices: prices.map((item, index) => [dates[index], item])\n    };\n  }).catch(error => console.log(error));\n};\nexport const fetchSetComponentsBeta = set => {\n  const requestUrl = `${tokensetsUrl}/v2/funds/${set}?beta=true`;\n  return fetch(requestUrl).then(response => response.json()).then(response => {\n    var _response$fund;\n\n    if (!(response === null || response === void 0 ? void 0 : (_response$fund = response.fund) === null || _response$fund === void 0 ? void 0 : _response$fund.components)) {\n      // undocumented API endpoint. Throw error if not expected response format\n      throw new Error('Invalid API response from Set Protocol service');\n    }\n\n    const {\n      fund: {\n        components,\n        market_cap: marketCap,\n        id,\n        name,\n        symbol,\n        address,\n        image\n      }\n    } = response;\n    return {\n      components: formatComponents(components),\n      marketCap,\n      id,\n      name,\n      symbol,\n      address,\n      image\n    };\n  }).catch(error => console.log(error));\n};\n\nfunction formatComponents(components) {\n  return components.map(component => {\n    const camelCasedComponent = Object.keys(component).reduce((comp, k) => ({ ...comp,\n      [camelCase(k)]: component[k]\n    }), {});\n    return camelCasedComponent;\n  });\n}","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/utils/tokensetsApi.ts"],"names":["camelCase","tokensetsUrl","process","env","REACT_APP_TOKENSETS_URL","fetchSetComponents","set","requestUrl","fetch","then","response","json","portfolio","components","Error","formatComponents","catch","error","console","log","fetchHistoricalTokenMarketData","id","baseCurrency","prices","dates","map","item","index","fetchSetComponentsBeta","fund","market_cap","marketCap","name","symbol","address","image","component","camelCasedComponent","Object","keys","reduce","comp","k"],"mappings":"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","sourcesContent":["import { camelCase } from 'lodash'\n\nconst tokensetsUrl = process.env.REACT_APP_TOKENSETS_URL\n\nexport const fetchSetComponents = (set: string) => {\n  const requestUrl = `${tokensetsUrl}/public/v2/portfolios/${set}`\n\n  return fetch(requestUrl)\n    .then((response) => response.json())\n    .then((response) => {\n      if (!response?.portfolio?.components) {\n        // undocumented API endpoint. Throw error if not expected response format\n        throw new Error('Invalid API response from Set Protocol service')\n      }\n      const {\n        portfolio: { components },\n      } = response\n\n      return formatComponents(components)\n    })\n    .catch((error) => console.log(error))\n}\n\nexport const fetchHistoricalTokenMarketData = (\n  id: string,\n  baseCurrency = 'usd'\n) => {\n  const requestUrl = `${tokensetsUrl}/v2/fund_historicals/${id}?currency=${baseCurrency}&beta=true&interval=month`\n\n  return fetch(requestUrl)\n    .then((response) => response.json())\n    .then((response) => {\n      const { prices, dates } = response\n      return {\n        prices: prices.map((item: any, index: number) => [dates[index], item]),\n      }\n    })\n    .catch((error) => console.log(error))\n}\n\nexport const fetchSetComponentsBeta = (set: string) => {\n  const requestUrl = `${tokensetsUrl}/v2/funds/${set}?beta=true`\n\n  return fetch(requestUrl)\n    .then((response) => response.json())\n    .then((response) => {\n      if (!response?.fund?.components) {\n        // undocumented API endpoint. Throw error if not expected response format\n        throw new Error('Invalid API response from Set Protocol service')\n      }\n      const {\n        fund: {\n          components,\n          market_cap: marketCap,\n          id,\n          name,\n          symbol,\n          address,\n          image,\n        },\n      } = response\n      return {\n        components: formatComponents(components),\n        marketCap,\n        id,\n        name,\n        symbol,\n        address,\n        image,\n      }\n    })\n    .catch((error) => console.log(error))\n}\n\nfunction formatComponents(components: any) {\n  return components.map((component: any) => {\n    const camelCasedComponent = Object.keys(component).reduce(\n      (comp: any, k: string) => ({\n        ...comp,\n        [camelCase(k)]: component[k],\n      }),\n      {}\n    )\n    return camelCasedComponent\n  })\n}\n"]},"metadata":{},"sourceType":"module"}