{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/views/ETH2XFLIP/ETH2XFLIP.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport ProductDataUI from 'components/ProductPage/ProductDataUI';\nimport { Ethereum2xFLIP } from 'constants/productTokens';\nimport useBalances from 'hooks/useBalances';\nimport useEth2xFLIPTokenMarketData from 'hooks/useEth2xFLIPTokenMarketData';\nimport useEth2xFLIPTokenSupplyCap from 'hooks/useEth2xFLIPTokenSupplyCap';\nimport useSetComponents from 'hooks/useSetComponents';\nimport useStreamingFee from 'hooks/useStreamingFee';\nimport useTokenSupply from 'hooks/useTokenSupply';\nimport useWallet from 'hooks/useWallet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Eth2xFLIPProductPage = props => {\n  _s();\n\n  useEffect(() => {\n    document.title = props.title;\n  }, [props.title]);\n  const {\n    prices,\n    hourlyPrices,\n    latestPrice,\n    latestMarketCap,\n    latestVolume\n  } = useEth2xFLIPTokenMarketData();\n  const {\n    eth2xflipComponents: components\n  } = useSetComponents();\n  const {\n    ethflipBalance\n  } = useBalances();\n  const {\n    ethflipSupplyCap\n  } = useEth2xFLIPTokenSupplyCap();\n  const {\n    eth2xFLIPStreamingFee\n  } = useStreamingFee();\n  const {\n    eth2xflipTotalSupply\n  } = useTokenSupply();\n  const token = { ...Ethereum2xFLIP,\n    fees: eth2xFLIPStreamingFee ? {\n      streamingFee: eth2xFLIPStreamingFee\n    } : undefined\n  };\n  const tokenDataProps = {\n    prices: prices,\n    hourlyPrices: hourlyPrices,\n    latestPrice: latestPrice,\n    latestMarketCap: latestMarketCap,\n    latestVolume: latestVolume,\n    token: token,\n    components: components,\n    balance: ethflipBalance,\n    supplyCap: ethflipSupplyCap,\n    currentSupply: eth2xflipTotalSupply\n  };\n  const {\n    account\n  } = useWallet();\n  const isApproachingSupplyCap = eth2xflipTotalSupply === null || eth2xflipTotalSupply === void 0 ? void 0 : eth2xflipTotalSupply.div(ethflipSupplyCap).isGreaterThan(0.95);\n  useEffect(() => {\n    if (account && isApproachingSupplyCap) {\n      toast.error(\"ETH2x-FLI-P has reached it's supply cap. Beware this product may be trading at a significant premium to it's Net Asset Value.\", {\n        toastId: 'ethfli-p-supply-cap-warning',\n        position: 'top-right',\n        autoClose: false,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n\n    return () => {\n      toast.dismiss('ethfli-p-supply-cap-warning');\n    };\n  }, [account, isApproachingSupplyCap]);\n  return /*#__PURE__*/_jsxDEV(ProductDataUI, {\n    tokenDataProps: tokenDataProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Eth2xFLIPProductPage, \"K+/siaG3aJeZp3ej5RCEBbyglgY=\", false, function () {\n  return [useEth2xFLIPTokenMarketData, useSetComponents, useBalances, useEth2xFLIPTokenSupplyCap, useStreamingFee, useTokenSupply, useWallet];\n});\n\n_c = Eth2xFLIPProductPage;\nexport default Eth2xFLIPProductPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Eth2xFLIPProductPage\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/views/ETH2XFLIP/ETH2XFLIP.tsx"],"names":["React","useEffect","toast","ProductDataUI","Ethereum2xFLIP","useBalances","useEth2xFLIPTokenMarketData","useEth2xFLIPTokenSupplyCap","useSetComponents","useStreamingFee","useTokenSupply","useWallet","Eth2xFLIPProductPage","props","document","title","prices","hourlyPrices","latestPrice","latestMarketCap","latestVolume","eth2xflipComponents","components","ethflipBalance","ethflipSupplyCap","eth2xFLIPStreamingFee","eth2xflipTotalSupply","token","fees","streamingFee","undefined","tokenDataProps","balance","supplyCap","currentSupply","account","isApproachingSupplyCap","div","isGreaterThan","error","toastId","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","dismiss"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,aAAP,MAEO,sCAFP;AAGA,SAASC,cAAT,QAA6C,yBAA7C;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,2BAAP,MAAwC,mCAAxC;AACA,OAAOC,0BAAP,MAAuC,kCAAvC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;;AAGA,MAAMC,oBAAoB,GAAIC,KAAD,IAA8B;AAAA;;AACzDZ,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ,CAACC,KAAT,GAAiBF,KAAK,CAACE,KAAvB;AACD,GAFQ,EAEN,CAACF,KAAK,CAACE,KAAP,CAFM,CAAT;AAIA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA,WAAxB;AAAqCC,IAAAA,eAArC;AAAsDC,IAAAA;AAAtD,MACJd,2BAA2B,EAD7B;AAEA,QAAM;AAAEe,IAAAA,mBAAmB,EAAEC;AAAvB,MAAsCd,gBAAgB,EAA5D;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAqBlB,WAAW,EAAtC;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAuBjB,0BAA0B,EAAvD;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAA4BhB,eAAe,EAAjD;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAA2BhB,cAAc,EAA/C;AAEA,QAAMiB,KAAmB,GAAG,EAC1B,GAAGvB,cADuB;AAE1BwB,IAAAA,IAAI,EAAEH,qBAAqB,GACvB;AAAEI,MAAAA,YAAY,EAAEJ;AAAhB,KADuB,GAEvBK;AAJsB,GAA5B;AAMA,QAAMC,cAA8B,GAAG;AACrCf,IAAAA,MAAM,EAAEA,MAD6B;AAErCC,IAAAA,YAAY,EAAEA,YAFuB;AAGrCC,IAAAA,WAAW,EAAEA,WAHwB;AAIrCC,IAAAA,eAAe,EAAEA,eAJoB;AAKrCC,IAAAA,YAAY,EAAEA,YALuB;AAMrCO,IAAAA,KAAK,EAAEA,KAN8B;AAOrCL,IAAAA,UAAU,EAAEA,UAPyB;AAQrCU,IAAAA,OAAO,EAAET,cAR4B;AASrCU,IAAAA,SAAS,EAAET,gBAT0B;AAUrCU,IAAAA,aAAa,EAAER;AAVsB,GAAvC;AAYA,QAAM;AAAES,IAAAA;AAAF,MAAcxB,SAAS,EAA7B;AAEA,QAAMyB,sBAAsB,GAAGV,oBAAH,aAAGA,oBAAH,uBAAGA,oBAAoB,CAC/CW,GAD2B,CACvBb,gBADuB,EAE5Bc,aAF4B,CAEd,IAFc,CAA/B;AAIArC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkC,OAAO,IAAIC,sBAAf,EAAuC;AACrClC,MAAAA,KAAK,CAACqC,KAAN,CACE,+HADF,EAEE;AACEC,QAAAA,OAAO,EAAE,6BADX;AAEEC,QAAAA,QAAQ,EAAE,WAFZ;AAGEC,QAAAA,SAAS,EAAE,KAHb;AAIEC,QAAAA,eAAe,EAAE,IAJnB;AAKEC,QAAAA,YAAY,EAAE,IALhB;AAMEC,QAAAA,YAAY,EAAE,IANhB;AAOEC,QAAAA,SAAS,EAAE,IAPb;AAQEC,QAAAA,QAAQ,EAAEjB;AARZ,OAFF;AAaD;;AAED,WAAO,MAAM;AACX5B,MAAAA,KAAK,CAAC8C,OAAN,CAAc,6BAAd;AACD,KAFD;AAGD,GApBQ,EAoBN,CAACb,OAAD,EAAUC,sBAAV,CApBM,CAAT;AAsBA,sBAAO,QAAC,aAAD;AAAe,IAAA,cAAc,EAAEL;AAA/B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA5DD;;GAAMnB,oB;UAMFN,2B,EAC0CE,gB,EACjBH,W,EACEE,0B,EACKE,e,EACDC,c,EAoBbC,S;;;KA/BhBC,oB;AA8DN,eAAeA,oBAAf","sourcesContent":["import React, { useEffect } from 'react'\n\nimport { toast } from 'react-toastify'\n\nimport ProductDataUI, {\n  TokenDataProps,\n} from 'components/ProductPage/ProductDataUI'\nimport { Ethereum2xFLIP, ProductToken } from 'constants/productTokens'\nimport useBalances from 'hooks/useBalances'\nimport useEth2xFLIPTokenMarketData from 'hooks/useEth2xFLIPTokenMarketData'\nimport useEth2xFLIPTokenSupplyCap from 'hooks/useEth2xFLIPTokenSupplyCap'\nimport useSetComponents from 'hooks/useSetComponents'\nimport useStreamingFee from 'hooks/useStreamingFee'\nimport useTokenSupply from 'hooks/useTokenSupply'\nimport useWallet from 'hooks/useWallet'\nimport BigNumber from 'utils/bignumber'\n\nconst Eth2xFLIPProductPage = (props: { title: string }) => {\n  useEffect(() => {\n    document.title = props.title\n  }, [props.title])\n\n  const { prices, hourlyPrices, latestPrice, latestMarketCap, latestVolume } =\n    useEth2xFLIPTokenMarketData()\n  const { eth2xflipComponents: components } = useSetComponents()\n  const { ethflipBalance } = useBalances()\n  const { ethflipSupplyCap } = useEth2xFLIPTokenSupplyCap()\n  const { eth2xFLIPStreamingFee } = useStreamingFee()\n  const { eth2xflipTotalSupply } = useTokenSupply()\n\n  const token: ProductToken = {\n    ...Ethereum2xFLIP,\n    fees: eth2xFLIPStreamingFee\n      ? { streamingFee: eth2xFLIPStreamingFee }\n      : undefined,\n  }\n  const tokenDataProps: TokenDataProps = {\n    prices: prices,\n    hourlyPrices: hourlyPrices,\n    latestPrice: latestPrice,\n    latestMarketCap: latestMarketCap,\n    latestVolume: latestVolume,\n    token: token,\n    components: components,\n    balance: ethflipBalance,\n    supplyCap: ethflipSupplyCap,\n    currentSupply: eth2xflipTotalSupply,\n  }\n  const { account } = useWallet()\n\n  const isApproachingSupplyCap = eth2xflipTotalSupply\n    ?.div(ethflipSupplyCap as BigNumber)\n    .isGreaterThan(0.95)\n\n  useEffect(() => {\n    if (account && isApproachingSupplyCap) {\n      toast.error(\n        \"ETH2x-FLI-P has reached it's supply cap. Beware this product may be trading at a significant premium to it's Net Asset Value.\",\n        {\n          toastId: 'ethfli-p-supply-cap-warning',\n          position: 'top-right',\n          autoClose: false,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        }\n      )\n    }\n\n    return () => {\n      toast.dismiss('ethfli-p-supply-cap-warning')\n    }\n  }, [account, isApproachingSupplyCap])\n\n  return <ProductDataUI tokenDataProps={tokenDataProps} />\n}\n\nexport default Eth2xFLIPProductPage\n"]},"metadata":{},"sourceType":"module"}