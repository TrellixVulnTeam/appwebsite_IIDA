{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport useWallet from 'hooks/useWallet';\nimport { getAllowance } from 'utils';\nimport BigNumber from 'utils/bignumber';\n\nconst useAllowance = (tokenAddress, spenderAddress) => {\n  _s();\n\n  const [allowance, setAllowance] = useState();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const fetchAllowance = useCallback(async (userAddress, provider) => {\n    if (!spenderAddress || !tokenAddress) {\n      return;\n    }\n\n    const allowance = await getAllowance(userAddress, spenderAddress, tokenAddress, provider);\n    setAllowance(new BigNumber(allowance));\n  }, [setAllowance, spenderAddress, tokenAddress]);\n  useEffect(() => {\n    if (!account || !ethereum || !spenderAddress || !tokenAddress) {\n      return;\n    }\n\n    fetchAllowance(account, ethereum);\n    let refreshInterval = setInterval(() => fetchAllowance(account, ethereum), 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, ethereum, spenderAddress, tokenAddress, fetchAllowance]);\n  return allowance;\n};\n\n_s(useAllowance, \"OwyDDWP/gZzoOoSRA7toW1aFnLQ=\", false, function () {\n  return [useWallet];\n});\n\nexport default useAllowance;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/hooks/useAllowance.ts"],"names":["useCallback","useEffect","useState","useWallet","getAllowance","BigNumber","useAllowance","tokenAddress","spenderAddress","allowance","setAllowance","account","ethereum","fetchAllowance","userAddress","provider","refreshInterval","setInterval","clearInterval"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAIA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,YAAT,QAA6B,OAA7B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAEA,MAAMC,YAAY,GAAG,CAACC,YAAD,EAAwBC,cAAxB,KAAoD;AAAA;;AACvE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,EAA1C;AACA,QAAM;AACJS,IAAAA,OADI;AAEJC,IAAAA;AAFI,MAG2DT,SAAS,EAH1E;AAKA,QAAMU,cAAc,GAAGb,WAAW,CAChC,OAAOc,WAAP,EAA4BC,QAA5B,KAAmD;AACjD,QAAI,CAACP,cAAD,IAAmB,CAACD,YAAxB,EAAsC;AACpC;AACD;;AAED,UAAME,SAAS,GAAG,MAAML,YAAY,CAClCU,WADkC,EAElCN,cAFkC,EAGlCD,YAHkC,EAIlCQ,QAJkC,CAApC;AAOAL,IAAAA,YAAY,CAAC,IAAIL,SAAJ,CAAcI,SAAd,CAAD,CAAZ;AACD,GAd+B,EAehC,CAACC,YAAD,EAAeF,cAAf,EAA+BD,YAA/B,CAfgC,CAAlC;AAkBAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,OAAD,IAAY,CAACC,QAAb,IAAyB,CAACJ,cAA1B,IAA4C,CAACD,YAAjD,EAA+D;AAC7D;AACD;;AAEDM,IAAAA,cAAc,CAACF,OAAD,EAAUC,QAAV,CAAd;AAEA,QAAII,eAAe,GAAGC,WAAW,CAC/B,MAAMJ,cAAc,CAACF,OAAD,EAAUC,QAAV,CADW,EAE/B,KAF+B,CAAjC;AAKA,WAAO,MAAMM,aAAa,CAACF,eAAD,CAA1B;AACD,GAbQ,EAaN,CAACL,OAAD,EAAUC,QAAV,EAAoBJ,cAApB,EAAoCD,YAApC,EAAkDM,cAAlD,CAbM,CAAT;AAeA,SAAOJ,SAAP;AACD,CAzCD;;GAAMH,Y;UAK6DH,S;;;AAsCnE,eAAeG,YAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nimport { provider } from 'web3-core'\n\nimport useWallet from 'hooks/useWallet'\nimport { getAllowance } from 'utils'\nimport BigNumber from 'utils/bignumber'\n\nconst useAllowance = (tokenAddress?: string, spenderAddress?: string) => {\n  const [allowance, setAllowance] = useState<BigNumber>()\n  const {\n    account,\n    ethereum,\n  }: { account: string | null | undefined; ethereum?: provider } = useWallet()\n\n  const fetchAllowance = useCallback(\n    async (userAddress: string, provider: provider) => {\n      if (!spenderAddress || !tokenAddress) {\n        return\n      }\n\n      const allowance = await getAllowance(\n        userAddress,\n        spenderAddress,\n        tokenAddress,\n        provider\n      )\n\n      setAllowance(new BigNumber(allowance))\n    },\n    [setAllowance, spenderAddress, tokenAddress]\n  )\n\n  useEffect(() => {\n    if (!account || !ethereum || !spenderAddress || !tokenAddress) {\n      return\n    }\n\n    fetchAllowance(account, ethereum)\n\n    let refreshInterval = setInterval(\n      () => fetchAllowance(account, ethereum),\n      10000\n    )\n\n    return () => clearInterval(refreshInterval)\n  }, [account, ethereum, spenderAddress, tokenAddress, fetchAllowance])\n\n  return allowance\n}\n\nexport default useAllowance\n"]},"metadata":{},"sourceType":"module"}