{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.SchemaAssertions = void 0;\n\nvar errors_1 = require('../errors');\n\nvar schemas_1 = require('../schemas');\n\nvar SchemaAssertions = function () {\n  function SchemaAssertions() {\n    this.validator = new schemas_1.SchemaValidator();\n  }\n\n  SchemaAssertions.prototype.isValidAddress = function (variableName, value) {\n    this.assertConformsToSchema(variableName, value, schemas_1.schemas.addressSchema);\n  };\n\n  SchemaAssertions.prototype.isValidAddressList = function (variableName, values) {\n    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n      var value = values_1[_i];\n      this.isValidAddress(variableName, value);\n    }\n  };\n\n  SchemaAssertions.prototype.isValidBytes32 = function (variableName, value) {\n    this.assertConformsToSchema(variableName, value, schemas_1.schemas.bytes32Schema);\n  };\n\n  SchemaAssertions.prototype.isValidBytes = function (variableName, value) {\n    this.assertConformsToSchema(variableName, value, schemas_1.schemas.bytesSchema);\n  };\n\n  SchemaAssertions.prototype.isValidNumber = function (variableName, value) {\n    this.assertConformsToSchema(variableName, value, schemas_1.schemas.numberSchema);\n  };\n\n  SchemaAssertions.prototype.IsValidWholeNumber = function (variableName, value) {\n    this.assertConformsToSchema(variableName, value, schemas_1.schemas.wholeNumberSchema);\n  };\n\n  SchemaAssertions.prototype.isValidJsNumber = function (variableName, value) {\n    this.assertConformsToSchema(variableName, value, schemas_1.schemas.jsNumberSchema);\n  };\n\n  SchemaAssertions.prototype.isValidString = function (variableName, value) {\n    this.assertConformsToSchema(variableName, value, schemas_1.schemas.stringSchema);\n  };\n\n  SchemaAssertions.prototype.assertConformsToSchema = function (variableName, value, schema) {\n    var validationResult = this.validator.validate(value, schema);\n    var hasValidationErrors = validationResult.errors.length > 0;\n\n    if (hasValidationErrors) {\n      throw new Error(errors_1.schemaAssertionsError.DOES_NOT_CONFORM_TO_SCHEMA(variableName, schema.id, value, validationResult));\n    }\n  };\n\n  return SchemaAssertions;\n}();\n\nexports.SchemaAssertions = SchemaAssertions;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/node_modules/set.js/dist/src/assertions/SchemaAssertions.js"],"names":["Object","defineProperty","exports","value","SchemaAssertions","errors_1","require","schemas_1","validator","SchemaValidator","prototype","isValidAddress","variableName","assertConformsToSchema","schemas","addressSchema","isValidAddressList","values","_i","values_1","length","isValidBytes32","bytes32Schema","isValidBytes","bytesSchema","isValidNumber","numberSchema","IsValidWholeNumber","wholeNumberSchema","isValidJsNumber","jsNumberSchema","isValidString","stringSchema","schema","validationResult","validate","hasValidationErrors","errors","Error","schemaAssertionsError","DOES_NOT_CONFORM_TO_SCHEMA","id"],"mappings":"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","sourcesContent":["'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.SchemaAssertions=void 0;var errors_1=require('../errors');var schemas_1=require('../schemas');var SchemaAssertions=function(){function SchemaAssertions(){this.validator=new schemas_1.SchemaValidator();}SchemaAssertions.prototype.isValidAddress=function(variableName,value){this.assertConformsToSchema(variableName,value,schemas_1.schemas.addressSchema);};SchemaAssertions.prototype.isValidAddressList=function(variableName,values){for(var _i=0,values_1=values;_i<values_1.length;_i++){var value=values_1[_i];this.isValidAddress(variableName,value);}};SchemaAssertions.prototype.isValidBytes32=function(variableName,value){this.assertConformsToSchema(variableName,value,schemas_1.schemas.bytes32Schema);};SchemaAssertions.prototype.isValidBytes=function(variableName,value){this.assertConformsToSchema(variableName,value,schemas_1.schemas.bytesSchema);};SchemaAssertions.prototype.isValidNumber=function(variableName,value){this.assertConformsToSchema(variableName,value,schemas_1.schemas.numberSchema);};SchemaAssertions.prototype.IsValidWholeNumber=function(variableName,value){this.assertConformsToSchema(variableName,value,schemas_1.schemas.wholeNumberSchema);};SchemaAssertions.prototype.isValidJsNumber=function(variableName,value){this.assertConformsToSchema(variableName,value,schemas_1.schemas.jsNumberSchema);};SchemaAssertions.prototype.isValidString=function(variableName,value){this.assertConformsToSchema(variableName,value,schemas_1.schemas.stringSchema);};SchemaAssertions.prototype.assertConformsToSchema=function(variableName,value,schema){var validationResult=this.validator.validate(value,schema);var hasValidationErrors=validationResult.errors.length>0;if(hasValidationErrors){throw new Error(errors_1.schemaAssertionsError.DOES_NOT_CONFORM_TO_SCHEMA(variableName,schema.id,value,validationResult));}};return SchemaAssertions;}();exports.SchemaAssertions=SchemaAssertions;"]},"metadata":{},"sourceType":"script"}