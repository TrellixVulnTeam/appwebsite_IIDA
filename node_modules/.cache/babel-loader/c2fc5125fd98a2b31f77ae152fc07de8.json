{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nexport default function useEagerConnect(connect) {\n  _s();\n\n  const {\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false); // Connect to existing injected provider if app was opened from ONTO mobile wallet\n\n  useEffect(() => {\n    var _ethereum;\n\n    if (!active && !tried && ((_ethereum = window.ethereum) === null || _ethereum === void 0 ? void 0 : _ethereum.isONTO)) {\n      connect('injected').catch(() => {\n        setTried(true);\n      });\n    }\n  }, [connect, active, tried]); // wait until we get confirmation of a connection to flip the flag\n\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n\n_s(useEagerConnect, \"oD6M9Rd+1E/mdXs3ksAnxMPa200=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/hooks/useEagerConnect.ts"],"names":["useEffect","useState","useWeb3React","useEagerConnect","connect","active","tried","setTried","window","ethereum","isONTO","catch"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,eAAe,SAASC,eAAT,CACbC,OADa,EAEb;AAAA;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaH,YAAY,EAA/B;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC,CAFA,CAIA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAI,CAACK,MAAD,IAAW,CAACC,KAAZ,kBAAsBE,MAAD,CAAgBC,QAArC,8CAAqB,UAA0BC,MAA/C,CAAJ,EAA2D;AACzDN,MAAAA,OAAO,CAAC,UAAD,CAAP,CAAoBO,KAApB,CAA0B,MAAM;AAC9BJ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAFD;AAGD;AACF,GANQ,EAMN,CAACH,OAAD,EAAUC,MAAV,EAAkBC,KAAlB,CANM,CAAT,CALA,CAaA;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,MAAJ,EAAY;AACVE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACF,MAAD,CAJM,CAAT;AAMA,SAAOC,KAAP;AACD;;GAvBuBH,e;UAGHD,Y","sourcesContent":["import { useEffect, useState } from 'react'\n\nimport { useWeb3React } from '@web3-react/core'\n\nexport default function useEagerConnect(\n  connect: (walletType: string) => Promise<void>\n) {\n  const { active } = useWeb3React()\n  const [tried, setTried] = useState(false)\n\n  // Connect to existing injected provider if app was opened from ONTO mobile wallet\n  useEffect(() => {\n    if (!active && !tried && (window as any).ethereum?.isONTO) {\n      connect('injected').catch(() => {\n        setTried(true)\n      })\n    }\n  }, [connect, active, tried])\n\n  // wait until we get confirmation of a connection to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}\n"]},"metadata":{},"sourceType":"module"}