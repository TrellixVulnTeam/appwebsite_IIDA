{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useWallet from 'hooks/useWallet';\nimport { MAINNET_CHAIN_DATA } from 'utils/connectors';\nexport const useAddToMetamask = () => {\n  _s();\n\n  const wallet = useWallet();\n\n  const addToken = async token => {\n    const tokenAddress = wallet.chainId === MAINNET_CHAIN_DATA.chainId ? token.address : token.polygonAddress;\n    await wallet.ethereum.request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'ERC20',\n        options: {\n          address: tokenAddress,\n          symbol: token.symbol.slice(0, 11),\n          decimals: 18,\n          image: token.image\n        }\n      }\n    });\n  };\n\n  return addToken;\n};\n\n_s(useAddToMetamask, \"i+/qxb0flJRE8MgvazOGMkNRtsk=\", false, function () {\n  return [useWallet];\n});","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/hooks/useAddToMetamask.ts"],"names":["useWallet","MAINNET_CHAIN_DATA","useAddToMetamask","wallet","addToken","token","tokenAddress","chainId","address","polygonAddress","ethereum","request","method","params","type","options","symbol","slice","decimals","image"],"mappings":";;AACA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AACpC,QAAMC,MAAM,GAAGH,SAAS,EAAxB;;AAEA,QAAMI,QAAQ,GAAG,MAAOC,KAAP,IAA+B;AAC9C,UAAMC,YAAY,GAChBH,MAAM,CAACI,OAAP,KAAmBN,kBAAkB,CAACM,OAAtC,GACIF,KAAK,CAACG,OADV,GAEIH,KAAK,CAACI,cAHZ;AAIA,UAAMN,MAAM,CAACO,QAAP,CAAgBC,OAAhB,CAAwB;AAC5BC,MAAAA,MAAM,EAAE,mBADoB;AAE5BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,OADA;AAENC,QAAAA,OAAO,EAAE;AACPP,UAAAA,OAAO,EAAEF,YADF;AAEPU,UAAAA,MAAM,EAAEX,KAAK,CAACW,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsB,EAAtB,CAFD;AAGPC,UAAAA,QAAQ,EAAE,EAHH;AAIPC,UAAAA,KAAK,EAAEd,KAAK,CAACc;AAJN;AAFH;AAFoB,KAAxB,CAAN;AAYD,GAjBD;;AAmBA,SAAOf,QAAP;AACD,CAvBM;;GAAMF,gB;UACIF,S","sourcesContent":["import { ProductToken } from 'constants/productTokens'\nimport useWallet from 'hooks/useWallet'\nimport { MAINNET_CHAIN_DATA } from 'utils/connectors'\n\nexport const useAddToMetamask = () => {\n  const wallet = useWallet()\n\n  const addToken = async (token: ProductToken) => {\n    const tokenAddress =\n      wallet.chainId === MAINNET_CHAIN_DATA.chainId\n        ? token.address\n        : token.polygonAddress\n    await wallet.ethereum.request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'ERC20',\n        options: {\n          address: tokenAddress,\n          symbol: token.symbol.slice(0, 11),\n          decimals: 18,\n          image: token.image,\n        },\n      },\n    })\n  }\n\n  return addToken\n}\n"]},"metadata":{},"sourceType":"module"}