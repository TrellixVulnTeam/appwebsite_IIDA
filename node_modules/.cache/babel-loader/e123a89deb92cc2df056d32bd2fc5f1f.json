{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/index-ui-master/src/contexts/Prices/PricesProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { bedTokenAddress, btc2xfliTokenAddress, dataTokenAddress, dpiTokenAddress, eth2xfliTokenAddress, farmTwoAddress, gmiTokenAddress, indexTokenAddress, mviStakingRewardsAddress, mviTokenAddress } from 'constants/ethContractAddresses';\nimport useWallet from 'hooks/useWallet';\nimport { getRewardsForDuration, getTotalSupply } from 'index-sdk/gmiStaking';\nimport { getAmountOfStakedTokens } from 'index-sdk/stake';\nimport BigNumber from 'utils/bignumber';\nimport { DPI_ETH_UNISWAP_QUERY, ETH_MVI_UNISWAP_QUERY } from 'utils/graphql';\nimport PricesContext from './PricesContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PricesProvider = ({\n  children\n}) => {\n  _s();\n\n  const [indexPrice, setIndexPrice] = useState('0');\n  const [ethereumPrice, setEthereumPrice] = useState('0');\n  const [dpiPrice, setDpiPrice] = useState(0);\n  const [mviPrice, setMviPrice] = useState(0);\n  const [bedPrice, setBedPrice] = useState(0);\n  const [gmiPrice, setGmiPrice] = useState(0);\n  const [eth2xfliPrice, setEth2xfliPrice] = useState(0);\n  const [eth2xflipPrice, setEth2xflipPrice] = useState(0);\n  const [btc2xfliPrice, setBtc2xfliPrice] = useState(0);\n  const [dataPrice, setDataPrice] = useState(0);\n  const [iethflipPrice, setIEthflipPrice] = useState(0);\n  const [matic2xflipPrice, setMatic2xfliPrice] = useState(0);\n  const [imaticflipPrice, setIMaticflipPrice] = useState(0);\n  const [usdInEthDpiPool, setUsdInEthDpiPool] = useState();\n  const [totalSupplyInEthDpiPool, setTotalSupplyInEthDpiPool] = useState();\n  const [usdInEthMviPool, setUsdInEthMviPool] = useState();\n  const [totalSupplyInEthMviPool, setTotalSupplyInEthMviPool] = useState();\n  const [apy] = useState('0.00');\n  const [farmTwoApy, setFarmTwoApy] = useState('0.00');\n  const [mviRewardsApy, setMviRewardsApy] = useState('0.00');\n  const [gmiRewardsApy, setGmiRewardsApy] = useState(new BigNumber(0));\n  const [gmiRewardsForDuration, setGmiRewardsForDuration] = useState(new BigNumber(0));\n  const [gmiTotalSupply, setGmiTotalSupply] = useState(new BigNumber(0));\n  const {\n    loading: ethDpiDataIsLoading,\n    error: ethDpiDataError,\n    data: ethDpiUniswapData\n  } = useQuery(DPI_ETH_UNISWAP_QUERY);\n  const {\n    loading: ethMviDataIsLoading,\n    error: ethMviDataError,\n    data: ethMviUniswapData\n  } = useQuery(ETH_MVI_UNISWAP_QUERY);\n  const {\n    ethereum\n  } = useWallet();\n  useEffect(() => {\n    if (!ethDpiDataIsLoading && !ethDpiDataError) {\n      var _ethDpiUniswapData$pa, _ethDpiUniswapData$pa2;\n\n      setUsdInEthDpiPool(ethDpiUniswapData === null || ethDpiUniswapData === void 0 ? void 0 : (_ethDpiUniswapData$pa = ethDpiUniswapData.pairs[0]) === null || _ethDpiUniswapData$pa === void 0 ? void 0 : _ethDpiUniswapData$pa.reserveUSD);\n      setTotalSupplyInEthDpiPool(ethDpiUniswapData === null || ethDpiUniswapData === void 0 ? void 0 : (_ethDpiUniswapData$pa2 = ethDpiUniswapData.pairs[0]) === null || _ethDpiUniswapData$pa2 === void 0 ? void 0 : _ethDpiUniswapData$pa2.totalSupply);\n    }\n  }, [ethDpiDataIsLoading, ethDpiDataError, ethDpiUniswapData]);\n  useEffect(() => {\n    if (!ethMviDataIsLoading && !ethMviDataError) {\n      var _ethMviUniswapData$pa, _ethMviUniswapData$pa2;\n\n      setUsdInEthMviPool(ethMviUniswapData === null || ethMviUniswapData === void 0 ? void 0 : (_ethMviUniswapData$pa = ethMviUniswapData.pairs[0]) === null || _ethMviUniswapData$pa === void 0 ? void 0 : _ethMviUniswapData$pa.reserveUSD);\n      setTotalSupplyInEthMviPool(ethMviUniswapData === null || ethMviUniswapData === void 0 ? void 0 : (_ethMviUniswapData$pa2 = ethMviUniswapData.pairs[0]) === null || _ethMviUniswapData$pa2 === void 0 ? void 0 : _ethMviUniswapData$pa2.totalSupply);\n    }\n  }, [ethMviDataIsLoading, ethMviDataError, ethMviUniswapData]);\n  useEffect(() => {\n    const coingeckoEthereumPriceUrl = `https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd`;\n    fetch(coingeckoEthereumPriceUrl).then(response => response.json()).then(response => {\n      var _response$ethereum;\n\n      const price = response === null || response === void 0 ? void 0 : (_response$ethereum = response.ethereum) === null || _response$ethereum === void 0 ? void 0 : _response$ethereum.usd;\n      setEthereumPrice(price || '0');\n    }).catch(error => console.log(error));\n  }, []); // TODO: Remove this logic. Replace it with coingecko sourced data once available.\n\n  useEffect(() => {\n    fetch('https://api.tokensets.com/public/v2/portfolios/eth2x-fli-p').then(response => response.json()).then(response => {\n      setEth2xflipPrice((response === null || response === void 0 ? void 0 : response.portfolio.price_usd) || 0);\n    }).catch(error => console.log(error));\n    fetch('https://api.tokensets.com/public/v2/portfolios/ieth-fli-p').then(response => response.json()).then(response => {\n      setIEthflipPrice((response === null || response === void 0 ? void 0 : response.portfolio.price_usd) || 0);\n    }).catch(error => console.log(error));\n    fetch('https://api.tokensets.com/public/v2/portfolios/matic2x-fli-p').then(response => response.json()).then(response => {\n      setMatic2xfliPrice((response === null || response === void 0 ? void 0 : response.portfolio.price_usd) || 0);\n    }).catch(error => console.log(error));\n    fetch('https://api.tokensets.com/public/v2/portfolios/imatic-fli-p').then(response => response.json()).then(response => {\n      setIMaticflipPrice((response === null || response === void 0 ? void 0 : response.portfolio.price_usd) || 0);\n    }).catch(error => console.log(error));\n  }, []);\n  useEffect(() => {\n    const productAddresses = [dpiTokenAddress, mviTokenAddress, bedTokenAddress, gmiTokenAddress, eth2xfliTokenAddress, btc2xfliTokenAddress, dataTokenAddress, indexTokenAddress];\n    const coinGeckoPriceUrl = `https://api.coingecko.com/api/v3/simple/token_price/ethereum?contract_addresses=${productAddresses}&vs_currencies=usd`;\n    fetch(coinGeckoPriceUrl).then(response => response.json()).then(response => {\n      setDpiPrice(response[dpiTokenAddress === null || dpiTokenAddress === void 0 ? void 0 : dpiTokenAddress.toLowerCase()].usd);\n      setMviPrice(response[mviTokenAddress === null || mviTokenAddress === void 0 ? void 0 : mviTokenAddress.toLowerCase()].usd);\n      setBedPrice(response[bedTokenAddress === null || bedTokenAddress === void 0 ? void 0 : bedTokenAddress.toLowerCase()].usd);\n      setGmiPrice(response[gmiTokenAddress === null || gmiTokenAddress === void 0 ? void 0 : gmiTokenAddress.toLowerCase()].usd);\n      setEth2xfliPrice(response[eth2xfliTokenAddress === null || eth2xfliTokenAddress === void 0 ? void 0 : eth2xfliTokenAddress.toLowerCase()].usd);\n      setBtc2xfliPrice(response[btc2xfliTokenAddress === null || btc2xfliTokenAddress === void 0 ? void 0 : btc2xfliTokenAddress.toLowerCase()].usd);\n      setDataPrice(response[dataTokenAddress === null || dataTokenAddress === void 0 ? void 0 : dataTokenAddress.toLowerCase()].usd);\n      setIndexPrice(response[indexTokenAddress === null || indexTokenAddress === void 0 ? void 0 : indexTokenAddress.toLowerCase()].usd);\n    }).catch(error => console.error(error));\n  }, []); // DPI LM Emissions\n\n  useEffect(() => {\n    if (!indexPrice || !usdInEthDpiPool || !totalSupplyInEthDpiPool || !ethereum || !farmTwoAddress) return;\n    const totalTokenEmissionsPerDay = 0;\n    const totalUSDEmissionPerDay = totalTokenEmissionsPerDay * Number(indexPrice); //get usd price per lp token\n\n    const pricePerLPToken = new BigNumber(usdInEthDpiPool).dividedBy(new BigNumber(totalSupplyInEthDpiPool)); //multiply by totalSupply\n\n    getAmountOfStakedTokens(ethereum, farmTwoAddress).then(tokensInStakingContract => {\n      const usdInStakingContract = new BigNumber(tokensInStakingContract).dividedBy(new BigNumber(10).pow(18)).multipliedBy(pricePerLPToken);\n      const dailyYield = new BigNumber(totalUSDEmissionPerDay).dividedBy(usdInStakingContract).multipliedBy(100);\n      const calculatedApy = dailyYield.multipliedBy(365);\n      setFarmTwoApy(calculatedApy.toFixed(2));\n    }).catch(error => {\n      console.log(error);\n      setFarmTwoApy('0.00');\n    });\n  }, [usdInEthDpiPool, indexPrice, ethereum, totalSupplyInEthDpiPool]); // MVI LM Emissions\n\n  useEffect(() => {\n    if (!indexPrice || !usdInEthMviPool || !totalSupplyInEthMviPool || !ethereum || !mviStakingRewardsAddress) return;\n    const totalTokenEmissionsPerDay = 109;\n    const totalUSDEmissionPerDay = totalTokenEmissionsPerDay * Number(indexPrice); //get usd price per lp token\n\n    const pricePerLPToken = new BigNumber(usdInEthMviPool).dividedBy(new BigNumber(totalSupplyInEthMviPool)); //multiply by totalSupply\n\n    getAmountOfStakedTokens(ethereum, mviStakingRewardsAddress).then(tokensInStakingContract => {\n      const usdInStakingContract = new BigNumber(tokensInStakingContract).dividedBy(new BigNumber(10).pow(18)).multipliedBy(pricePerLPToken);\n      const dailyYield = new BigNumber(totalUSDEmissionPerDay).dividedBy(usdInStakingContract).multipliedBy(100);\n      const calculatedApy = dailyYield.multipliedBy(365);\n      setMviRewardsApy(calculatedApy.toFixed(2));\n    }).catch(error => {\n      console.log(error);\n      setFarmTwoApy('0.00');\n    });\n  }, [usdInEthMviPool, indexPrice, ethereum, totalSupplyInEthMviPool]); // GMI staking Emissions\n\n  useMemo(() => {\n    if (!indexPrice || !gmiPrice || !ethereum || !gmiRewardsForDuration || !gmiTotalSupply || !gmiRewardsApy.eq(new BigNumber(0)) && !gmiRewardsApy.eq(new BigNumber(Infinity)) && !gmiRewardsApy.eq(new BigNumber(NaN))) return;\n    getRewardsForDuration(ethereum).then(res => setGmiRewardsForDuration(res.multipliedBy(new BigNumber(indexPrice))));\n    getTotalSupply(ethereum).then(res => setGmiTotalSupply(res.multipliedBy(new BigNumber(gmiPrice))));\n    const apr = gmiRewardsForDuration.dividedBy(gmiTotalSupply).multipliedBy(new BigNumber(1200));\n    if (!Number.isNaN(apr) && apr.gt(new BigNumber(0))) setGmiRewardsApy(apr);\n  }, [gmiTotalSupply, gmiRewardsApy, ethereum, gmiPrice, indexPrice]);\n  const totalUSDInFarms = Number(usdInEthMviPool || '0') + Number(usdInEthDpiPool || '0');\n  return /*#__PURE__*/_jsxDEV(PricesContext.Provider, {\n    value: {\n      indexPrice,\n      ethereumPrice,\n      dpiPrice,\n      mviPrice,\n      bedPrice,\n      gmiPrice,\n      eth2xfliPrice,\n      eth2xflipPrice,\n      btc2xfliPrice,\n      dataPrice,\n      totalUSDInFarms,\n      apy,\n      farmTwoApy,\n      mviRewardsApy,\n      gmiRewardsApy: gmiRewardsApy.toFixed(2),\n      iethflipPrice,\n      imaticflipPrice,\n      matic2xflipPrice\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PricesProvider, \"tnx+GwhQ8VP9MLFOvJWPWS06geo=\", false, function () {\n  return [useQuery, useQuery, useWallet];\n});\n\n_c = PricesProvider;\nexport default PricesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PricesProvider\");","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/contexts/Prices/PricesProvider.tsx"],"names":["React","useEffect","useMemo","useState","useQuery","bedTokenAddress","btc2xfliTokenAddress","dataTokenAddress","dpiTokenAddress","eth2xfliTokenAddress","farmTwoAddress","gmiTokenAddress","indexTokenAddress","mviStakingRewardsAddress","mviTokenAddress","useWallet","getRewardsForDuration","getTotalSupply","getAmountOfStakedTokens","BigNumber","DPI_ETH_UNISWAP_QUERY","ETH_MVI_UNISWAP_QUERY","PricesContext","PricesProvider","children","indexPrice","setIndexPrice","ethereumPrice","setEthereumPrice","dpiPrice","setDpiPrice","mviPrice","setMviPrice","bedPrice","setBedPrice","gmiPrice","setGmiPrice","eth2xfliPrice","setEth2xfliPrice","eth2xflipPrice","setEth2xflipPrice","btc2xfliPrice","setBtc2xfliPrice","dataPrice","setDataPrice","iethflipPrice","setIEthflipPrice","matic2xflipPrice","setMatic2xfliPrice","imaticflipPrice","setIMaticflipPrice","usdInEthDpiPool","setUsdInEthDpiPool","totalSupplyInEthDpiPool","setTotalSupplyInEthDpiPool","usdInEthMviPool","setUsdInEthMviPool","totalSupplyInEthMviPool","setTotalSupplyInEthMviPool","apy","farmTwoApy","setFarmTwoApy","mviRewardsApy","setMviRewardsApy","gmiRewardsApy","setGmiRewardsApy","gmiRewardsForDuration","setGmiRewardsForDuration","gmiTotalSupply","setGmiTotalSupply","loading","ethDpiDataIsLoading","error","ethDpiDataError","data","ethDpiUniswapData","ethMviDataIsLoading","ethMviDataError","ethMviUniswapData","ethereum","pairs","reserveUSD","totalSupply","coingeckoEthereumPriceUrl","fetch","then","response","json","price","usd","catch","console","log","portfolio","price_usd","productAddresses","coinGeckoPriceUrl","toLowerCase","totalTokenEmissionsPerDay","totalUSDEmissionPerDay","Number","pricePerLPToken","dividedBy","tokensInStakingContract","usdInStakingContract","pow","multipliedBy","dailyYield","calculatedApy","toFixed","eq","Infinity","NaN","res","apr","isNaN","gt","totalUSDInFarms"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\n\nimport { useQuery } from '@apollo/react-hooks'\n\nimport {\n  bedTokenAddress,\n  btc2xfliTokenAddress,\n  dataTokenAddress,\n  dpiTokenAddress,\n  eth2xfliTokenAddress,\n  farmTwoAddress,\n  gmiStakingRewardsAddress,\n  gmiTokenAddress,\n  indexTokenAddress,\n  mviStakingRewardsAddress,\n  mviTokenAddress,\n} from 'constants/ethContractAddresses'\nimport useWallet from 'hooks/useWallet'\nimport { getRewardsForDuration, getTotalSupply } from 'index-sdk/gmiStaking'\nimport { getAmountOfStakedTokens } from 'index-sdk/stake'\nimport BigNumber from 'utils/bignumber'\nimport { DPI_ETH_UNISWAP_QUERY, ETH_MVI_UNISWAP_QUERY } from 'utils/graphql'\n\nimport PricesContext from './PricesContext'\n\nconst PricesProvider: React.FC = ({ children }) => {\n  const [indexPrice, setIndexPrice] = useState<string>('0')\n  const [ethereumPrice, setEthereumPrice] = useState<string>('0')\n  const [dpiPrice, setDpiPrice] = useState<number>(0)\n  const [mviPrice, setMviPrice] = useState<number>(0)\n  const [bedPrice, setBedPrice] = useState<number>(0)\n  const [gmiPrice, setGmiPrice] = useState<number>(0)\n  const [eth2xfliPrice, setEth2xfliPrice] = useState<number>(0)\n  const [eth2xflipPrice, setEth2xflipPrice] = useState<number>(0)\n  const [btc2xfliPrice, setBtc2xfliPrice] = useState<number>(0)\n  const [dataPrice, setDataPrice] = useState<number>(0)\n  const [iethflipPrice, setIEthflipPrice] = useState<number>(0)\n  const [matic2xflipPrice, setMatic2xfliPrice] = useState<number>(0)\n  const [imaticflipPrice, setIMaticflipPrice] = useState<number>(0)\n\n  const [usdInEthDpiPool, setUsdInEthDpiPool] = useState<number>()\n  const [totalSupplyInEthDpiPool, setTotalSupplyInEthDpiPool] =\n    useState<number>()\n  const [usdInEthMviPool, setUsdInEthMviPool] = useState<number>()\n  const [totalSupplyInEthMviPool, setTotalSupplyInEthMviPool] =\n    useState<number>()\n\n  const [apy] = useState<string>('0.00')\n  const [farmTwoApy, setFarmTwoApy] = useState<string>('0.00')\n  const [mviRewardsApy, setMviRewardsApy] = useState<string>('0.00')\n  const [gmiRewardsApy, setGmiRewardsApy] = useState<BigNumber>(\n    new BigNumber(0)\n  )\n\n  const [gmiRewardsForDuration, setGmiRewardsForDuration] = useState<BigNumber>(\n    new BigNumber(0)\n  )\n  const [gmiTotalSupply, setGmiTotalSupply] = useState<BigNumber>(\n    new BigNumber(0)\n  )\n\n  const {\n    loading: ethDpiDataIsLoading,\n    error: ethDpiDataError,\n    data: ethDpiUniswapData,\n  } = useQuery(DPI_ETH_UNISWAP_QUERY)\n  const {\n    loading: ethMviDataIsLoading,\n    error: ethMviDataError,\n    data: ethMviUniswapData,\n  } = useQuery(ETH_MVI_UNISWAP_QUERY)\n\n  const { ethereum } = useWallet()\n\n  useEffect(() => {\n    if (!ethDpiDataIsLoading && !ethDpiDataError) {\n      setUsdInEthDpiPool(ethDpiUniswapData?.pairs[0]?.reserveUSD)\n      setTotalSupplyInEthDpiPool(ethDpiUniswapData?.pairs[0]?.totalSupply)\n    }\n  }, [ethDpiDataIsLoading, ethDpiDataError, ethDpiUniswapData])\n\n  useEffect(() => {\n    if (!ethMviDataIsLoading && !ethMviDataError) {\n      setUsdInEthMviPool(ethMviUniswapData?.pairs[0]?.reserveUSD)\n      setTotalSupplyInEthMviPool(ethMviUniswapData?.pairs[0]?.totalSupply)\n    }\n  }, [ethMviDataIsLoading, ethMviDataError, ethMviUniswapData])\n\n  useEffect(() => {\n    const coingeckoEthereumPriceUrl = `https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd`\n\n    fetch(coingeckoEthereumPriceUrl)\n      .then((response) => response.json())\n      .then((response) => {\n        const price = response?.ethereum?.usd\n        setEthereumPrice(price || '0')\n      })\n      .catch((error) => console.log(error))\n  }, [])\n\n  // TODO: Remove this logic. Replace it with coingecko sourced data once available.\n  useEffect(() => {\n    fetch('https://api.tokensets.com/public/v2/portfolios/eth2x-fli-p')\n      .then((response) => response.json())\n      .then((response) => {\n        setEth2xflipPrice(response?.portfolio.price_usd || 0)\n      })\n      .catch((error) => console.log(error))\n    fetch('https://api.tokensets.com/public/v2/portfolios/ieth-fli-p')\n      .then((response) => response.json())\n      .then((response) => {\n        setIEthflipPrice(response?.portfolio.price_usd || 0)\n      })\n      .catch((error) => console.log(error))\n    fetch('https://api.tokensets.com/public/v2/portfolios/matic2x-fli-p')\n      .then((response) => response.json())\n      .then((response) => {\n        setMatic2xfliPrice(response?.portfolio.price_usd || 0)\n      })\n      .catch((error) => console.log(error))\n    fetch('https://api.tokensets.com/public/v2/portfolios/imatic-fli-p')\n      .then((response) => response.json())\n      .then((response) => {\n        setIMaticflipPrice(response?.portfolio.price_usd || 0)\n      })\n      .catch((error) => console.log(error))\n  }, [])\n\n  useEffect(() => {\n    const productAddresses = [\n      dpiTokenAddress,\n      mviTokenAddress,\n      bedTokenAddress,\n      gmiTokenAddress,\n      eth2xfliTokenAddress,\n      btc2xfliTokenAddress,\n      dataTokenAddress,\n      indexTokenAddress,\n    ]\n    const coinGeckoPriceUrl = `https://api.coingecko.com/api/v3/simple/token_price/ethereum?contract_addresses=${productAddresses}&vs_currencies=usd`\n\n    fetch(coinGeckoPriceUrl)\n      .then((response) => response.json())\n      .then((response) => {\n        setDpiPrice(response[dpiTokenAddress?.toLowerCase() as string].usd)\n        setMviPrice(response[mviTokenAddress?.toLowerCase() as string].usd)\n        setBedPrice(response[bedTokenAddress?.toLowerCase() as string].usd)\n        setGmiPrice(response[gmiTokenAddress?.toLowerCase() as string].usd)\n        setEth2xfliPrice(\n          response[eth2xfliTokenAddress?.toLowerCase() as string].usd\n        )\n        setBtc2xfliPrice(\n          response[btc2xfliTokenAddress?.toLowerCase() as string].usd\n        )\n        setDataPrice(response[dataTokenAddress?.toLowerCase() as string].usd)\n        setIndexPrice(response[indexTokenAddress?.toLowerCase() as string].usd)\n      })\n      .catch((error) => console.error(error))\n  }, [])\n\n  // DPI LM Emissions\n  useEffect(() => {\n    if (\n      !indexPrice ||\n      !usdInEthDpiPool ||\n      !totalSupplyInEthDpiPool ||\n      !ethereum ||\n      !farmTwoAddress\n    )\n      return\n\n    const totalTokenEmissionsPerDay = 0\n    const totalUSDEmissionPerDay =\n      totalTokenEmissionsPerDay * Number(indexPrice)\n\n    //get usd price per lp token\n    const pricePerLPToken = new BigNumber(usdInEthDpiPool).dividedBy(\n      new BigNumber(totalSupplyInEthDpiPool)\n    )\n\n    //multiply by totalSupply\n    getAmountOfStakedTokens(ethereum, farmTwoAddress)\n      .then((tokensInStakingContract) => {\n        const usdInStakingContract = new BigNumber(tokensInStakingContract)\n          .dividedBy(new BigNumber(10).pow(18))\n          .multipliedBy(pricePerLPToken)\n        const dailyYield = new BigNumber(totalUSDEmissionPerDay)\n          .dividedBy(usdInStakingContract)\n          .multipliedBy(100)\n        const calculatedApy = dailyYield.multipliedBy(365)\n\n        setFarmTwoApy(calculatedApy.toFixed(2))\n      })\n      .catch((error) => {\n        console.log(error)\n        setFarmTwoApy('0.00')\n      })\n  }, [usdInEthDpiPool, indexPrice, ethereum, totalSupplyInEthDpiPool])\n\n  // MVI LM Emissions\n  useEffect(() => {\n    if (\n      !indexPrice ||\n      !usdInEthMviPool ||\n      !totalSupplyInEthMviPool ||\n      !ethereum ||\n      !mviStakingRewardsAddress\n    )\n      return\n\n    const totalTokenEmissionsPerDay = 109\n    const totalUSDEmissionPerDay =\n      totalTokenEmissionsPerDay * Number(indexPrice)\n\n    //get usd price per lp token\n    const pricePerLPToken = new BigNumber(usdInEthMviPool).dividedBy(\n      new BigNumber(totalSupplyInEthMviPool)\n    )\n\n    //multiply by totalSupply\n    getAmountOfStakedTokens(ethereum, mviStakingRewardsAddress)\n      .then((tokensInStakingContract) => {\n        const usdInStakingContract = new BigNumber(tokensInStakingContract)\n          .dividedBy(new BigNumber(10).pow(18))\n          .multipliedBy(pricePerLPToken)\n        const dailyYield = new BigNumber(totalUSDEmissionPerDay)\n          .dividedBy(usdInStakingContract)\n          .multipliedBy(100)\n        const calculatedApy = dailyYield.multipliedBy(365)\n\n        setMviRewardsApy(calculatedApy.toFixed(2))\n      })\n      .catch((error) => {\n        console.log(error)\n        setFarmTwoApy('0.00')\n      })\n  }, [usdInEthMviPool, indexPrice, ethereum, totalSupplyInEthMviPool])\n\n  // GMI staking Emissions\n  useMemo(() => {\n    if (\n      !indexPrice ||\n      !gmiPrice ||\n      !ethereum ||\n      !gmiRewardsForDuration ||\n      !gmiTotalSupply ||\n      (!gmiRewardsApy.eq(new BigNumber(0)) &&\n        !gmiRewardsApy.eq(new BigNumber(Infinity)) &&\n        !gmiRewardsApy.eq(new BigNumber(NaN)))\n    )\n      return\n\n    getRewardsForDuration(ethereum).then((res) =>\n      setGmiRewardsForDuration(res.multipliedBy(new BigNumber(indexPrice)))\n    )\n    getTotalSupply(ethereum).then((res) =>\n      setGmiTotalSupply(res.multipliedBy(new BigNumber(gmiPrice)))\n    )\n    const apr = gmiRewardsForDuration\n      .dividedBy(gmiTotalSupply)\n      .multipliedBy(new BigNumber(1200))\n    if (!Number.isNaN(apr) && apr.gt(new BigNumber(0))) setGmiRewardsApy(apr)\n  }, [gmiTotalSupply, gmiRewardsApy, ethereum, gmiPrice, indexPrice])\n\n  const totalUSDInFarms =\n    Number(usdInEthMviPool || '0') + Number(usdInEthDpiPool || '0')\n\n  return (\n    <PricesContext.Provider\n      value={{\n        indexPrice,\n        ethereumPrice,\n        dpiPrice,\n        mviPrice,\n        bedPrice,\n        gmiPrice,\n        eth2xfliPrice,\n        eth2xflipPrice,\n        btc2xfliPrice,\n        dataPrice,\n        totalUSDInFarms,\n        apy,\n        farmTwoApy,\n        mviRewardsApy,\n        gmiRewardsApy: gmiRewardsApy.toFixed(2),\n        iethflipPrice,\n        imaticflipPrice,\n        matic2xflipPrice,\n      }}\n    >\n      {children}\n    </PricesContext.Provider>\n  )\n}\n\nexport default PricesProvider\n"]},"metadata":{},"sourceType":"module"}