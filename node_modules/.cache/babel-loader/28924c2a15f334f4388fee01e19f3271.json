{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/components/TopBar/components/ChainSelector.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport { useTheme } from 'react-neu';\nimport Select from 'react-select';\nimport useChainData from 'hooks/useChainData';\nimport useWallet from 'hooks/useWallet';\nimport { POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChainSelector = () => {\n  _s();\n\n  const {\n    chain,\n    setMainnet,\n    setPolygon\n  } = useChainData();\n  const theme = useTheme();\n  const {\n    chainId\n  } = useWallet();\n  useEffect(() => {\n    if (chainId) {\n      if (chainId === POLYGON_CHAIN_DATA.chainId) setPolygon();else setMainnet();\n    }\n  }, [chainId, setMainnet, setPolygon]);\n  const styles = useMemo(() => ({\n    control: styles => ({ ...styles,\n      width: 135,\n      background: `rgba(0, 0, 0, 0.4)`,\n      padding: 7,\n      border: 'none',\n      borderRadius: 14\n    }),\n    singleValue: styles => ({ ...styles,\n      color: theme.textColor,\n      fontWeight: 600,\n      fontSize: 16,\n      width: 130,\n      textAlign: 'left'\n    }),\n    menu: styles => ({ ...styles,\n      color: 'black'\n    }),\n    dropdownIndicator: styles => ({ ...styles,\n      'color': theme.textColor,\n      'cursor': 'pointer',\n      '&:hover': {\n        color: theme.textColor\n      }\n    }),\n    indicatorSeparator: () => ({}),\n    indicatorContainer: styles => ({ ...styles,\n      marginLeft: 0,\n      padding: 0\n    })\n  }), [theme]);\n  return /*#__PURE__*/_jsxDEV(Select, {\n    isSearchable: false,\n    value: {\n      label: chain.name\n    },\n    onChange: chain => {\n      if (chain.value === 'polygon') setPolygon();else setMainnet();\n    },\n    options: [{\n      value: 'ethereum',\n      label: 'Ethereum'\n    }, {\n      value: 'polygon',\n      label: 'Polygon'\n    }],\n    styles: styles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChainSelector, \"vAJTi3QlYc/oP3+SUWaHCSdmUd8=\", false, function () {\n  return [useChainData, useTheme, useWallet];\n});\n\n_c = ChainSelector;\nexport default ChainSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChainSelector\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/components/TopBar/components/ChainSelector.tsx"],"names":["useEffect","useMemo","useTheme","Select","useChainData","useWallet","POLYGON_CHAIN_DATA","ChainSelector","chain","setMainnet","setPolygon","theme","chainId","styles","control","width","background","padding","border","borderRadius","singleValue","color","textColor","fontWeight","fontSize","textAlign","menu","dropdownIndicator","indicatorSeparator","indicatorContainer","marginLeft","label","name","value"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\n\nimport { useTheme } from 'react-neu'\nimport Select from 'react-select'\n\nimport useChainData from 'hooks/useChainData'\nimport useWallet from 'hooks/useWallet'\nimport { POLYGON_CHAIN_DATA } from 'utils/connectors'\n\nexport const ChainSelector = () => {\n  const { chain, setMainnet, setPolygon } = useChainData()\n  const theme = useTheme()\n  const { chainId } = useWallet()\n\n  useEffect(() => {\n    if (chainId) {\n      if (chainId === POLYGON_CHAIN_DATA.chainId) setPolygon()\n      else setMainnet()\n    }\n  }, [chainId, setMainnet, setPolygon])\n\n  const styles = useMemo(\n    () => ({\n      control: (styles: any) => ({\n        ...styles,\n        width: 135,\n        background: `rgba(0, 0, 0, 0.4)`,\n        padding: 7,\n        border: 'none',\n        borderRadius: 14,\n      }),\n      singleValue: (styles: any) => ({\n        ...styles,\n        color: theme.textColor,\n        fontWeight: 600,\n        fontSize: 16,\n        width: 130,\n        textAlign: 'left',\n      }),\n      menu: (styles: any) => ({\n        ...styles,\n        color: 'black',\n      }),\n      dropdownIndicator: (styles: any) => ({\n        ...styles,\n        'color': theme.textColor,\n        'cursor': 'pointer',\n        '&:hover': {\n          color: theme.textColor,\n        },\n      }),\n      indicatorSeparator: () => ({}),\n      indicatorContainer: (styles: any) => ({\n        ...styles,\n        marginLeft: 0,\n        padding: 0,\n      }),\n    }),\n    [theme]\n  )\n\n  return (\n    <Select\n      isSearchable={false}\n      value={{ label: chain.name } as any}\n      onChange={(chain) => {\n        if (chain.value === 'polygon') setPolygon()\n        else setMainnet()\n      }}\n      options={[\n        {\n          value: 'ethereum',\n          label: 'Ethereum',\n        },\n        {\n          value: 'polygon',\n          label: 'Polygon',\n        },\n      ]}\n      styles={styles}\n    />\n  )\n}\n\nexport default ChainSelector\n"]},"metadata":{},"sourceType":"module"}