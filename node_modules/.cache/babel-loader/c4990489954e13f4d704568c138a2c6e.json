{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/index-ui-master/src/contexts/FarmingTwo/Provider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport ConfirmTransactionModal, { TransactionStatusType } from 'components/ConfirmTransactionModal';\nimport { farmTwoAddress, uniswapEthDpiLpTokenAddress } from 'constants/ethContractAddresses';\nimport useApproval from 'hooks/useApproval';\nimport useTransactionWatcher from 'hooks/useTransactionWatcher';\nimport useWallet from 'hooks/useWallet';\nimport { claimEarnedIndexLpReward, farmTwoStartTime, stakeUniswapEthDpiLpTokens, unstakeAndClaimEarnedIndexLpReward, unstakeUniswapEthDpiLpTokens } from 'index-sdk/farmTwo';\nimport BigNumber from 'utils/bignumber';\nimport { waitTransaction } from 'utils/index';\nimport Context from './Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Provider = ({\n  children\n}) => {\n  _s();\n\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false);\n  const {\n    transactionId,\n    transactionStatus,\n    onSetTransactionStatus,\n    onSetTransactionId\n  } = useTransactionWatcher();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    isApproved,\n    isApproving,\n    onApprove\n  } = useApproval(uniswapEthDpiLpTokenAddress, farmTwoAddress, () => setConfirmTxModalIsOpen(false));\n  const handleApprove = useCallback(() => {\n    setConfirmTxModalIsOpen(true);\n    onApprove();\n  }, [onApprove, setConfirmTxModalIsOpen]);\n  const handleStake = useCallback(async amount => {\n    if (!ethereum || !account || !amount || new BigNumber(amount).lte(0)) return;\n    setConfirmTxModalIsOpen(true);\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING);\n    const bigStakeQuantity = new BigNumber(amount).multipliedBy(new BigNumber(10).pow(18));\n    const transactionId = await stakeUniswapEthDpiLpTokens(ethereum, account, bigStakeQuantity);\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n      return;\n    }\n\n    onSetTransactionId(transactionId);\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING);\n    const success = await waitTransaction(ethereum, transactionId);\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED);\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n    }\n  }, [ethereum, account, setConfirmTxModalIsOpen, onSetTransactionId, onSetTransactionStatus]);\n  const handleUnstake = useCallback(async amount => {\n    if (!ethereum || !account || !amount || new BigNumber(amount).lte(0)) return;\n    setConfirmTxModalIsOpen(true);\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING);\n    const bigStakeQuantity = new BigNumber(amount).multipliedBy(new BigNumber(10).pow(18));\n    const transactionId = await unstakeUniswapEthDpiLpTokens(ethereum, account, bigStakeQuantity);\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n      return;\n    }\n\n    onSetTransactionId(transactionId);\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING);\n    const success = await waitTransaction(ethereum, transactionId);\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED);\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n    }\n  }, [ethereum, account, setConfirmTxModalIsOpen, onSetTransactionId, onSetTransactionStatus]);\n  const handleHarvest = useCallback(async () => {\n    if (!ethereum || !account) return;\n    setConfirmTxModalIsOpen(true);\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING);\n    const transactionId = await claimEarnedIndexLpReward(ethereum, account);\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n      return;\n    }\n\n    onSetTransactionId(transactionId);\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING);\n    const success = await waitTransaction(ethereum, transactionId);\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED);\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n    }\n  }, [ethereum, account, setConfirmTxModalIsOpen, onSetTransactionId, onSetTransactionStatus]);\n  const handleUnstakeAndHarvest = useCallback(async () => {\n    if (!ethereum || !account) return;\n    setConfirmTxModalIsOpen(true);\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING);\n    const transactionId = await unstakeAndClaimEarnedIndexLpReward(ethereum, account);\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n      return;\n    }\n\n    onSetTransactionId(transactionId);\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING);\n    const success = await waitTransaction(ethereum, transactionId);\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED);\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n    }\n  }, [ethereum, account, setConfirmTxModalIsOpen, onSetTransactionId, onSetTransactionStatus]);\n  const currentTime = Date.now();\n  const isPoolActive = new BigNumber(farmTwoStartTime).isLessThan(new BigNumber(currentTime));\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      isPoolActive,\n      isApproved,\n      isApproving,\n      onApprove: handleApprove,\n      onHarvest: handleHarvest,\n      onUnstakeAndHarvest: handleUnstakeAndHarvest,\n      onStake: handleStake,\n      onUnstake: handleUnstake\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(ConfirmTransactionModal, {\n      isOpen: confirmTxModalIsOpen,\n      transactionId: transactionId,\n      transactionMiningStatus: transactionStatus,\n      onDismiss: () => {\n        setConfirmTxModalIsOpen(false);\n        onSetTransactionStatus(undefined);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Provider, \"dC3XZ6yiJtpIqD+0suqskgK3Mho=\", false, function () {\n  return [useTransactionWatcher, useWallet, useApproval];\n});\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/contexts/FarmingTwo/Provider.tsx"],"names":["React","useCallback","useState","ConfirmTransactionModal","TransactionStatusType","farmTwoAddress","uniswapEthDpiLpTokenAddress","useApproval","useTransactionWatcher","useWallet","claimEarnedIndexLpReward","farmTwoStartTime","stakeUniswapEthDpiLpTokens","unstakeAndClaimEarnedIndexLpReward","unstakeUniswapEthDpiLpTokens","BigNumber","waitTransaction","Context","Provider","children","confirmTxModalIsOpen","setConfirmTxModalIsOpen","transactionId","transactionStatus","onSetTransactionStatus","onSetTransactionId","account","ethereum","isApproved","isApproving","onApprove","handleApprove","handleStake","amount","lte","IS_APPROVING","bigStakeQuantity","multipliedBy","pow","IS_FAILED","IS_PENDING","success","IS_COMPLETED","handleUnstake","handleHarvest","handleUnstakeAndHarvest","currentTime","Date","now","isPoolActive","isLessThan","onHarvest","onUnstakeAndHarvest","onStake","onUnstake","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\n\nimport { provider } from 'web3-core'\n\nimport ConfirmTransactionModal, {\n  TransactionStatusType,\n} from 'components/ConfirmTransactionModal'\nimport {\n  farmTwoAddress,\n  uniswapEthDpiLpTokenAddress,\n} from 'constants/ethContractAddresses'\nimport useApproval from 'hooks/useApproval'\nimport useTransactionWatcher from 'hooks/useTransactionWatcher'\nimport useWallet from 'hooks/useWallet'\nimport {\n  claimEarnedIndexLpReward,\n  farmTwoStartTime,\n  stakeUniswapEthDpiLpTokens,\n  unstakeAndClaimEarnedIndexLpReward,\n  unstakeUniswapEthDpiLpTokens,\n} from 'index-sdk/farmTwo'\nimport BigNumber from 'utils/bignumber'\nimport { waitTransaction } from 'utils/index'\n\nimport Context from './Context'\n\nconst Provider: React.FC = ({ children }) => {\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false)\n\n  const {\n    transactionId,\n    transactionStatus,\n    onSetTransactionStatus,\n    onSetTransactionId,\n  } = useTransactionWatcher()\n  const { account, ethereum } = useWallet()\n\n  const { isApproved, isApproving, onApprove } = useApproval(\n    uniswapEthDpiLpTokenAddress,\n    farmTwoAddress,\n    () => setConfirmTxModalIsOpen(false)\n  )\n\n  const handleApprove = useCallback(() => {\n    setConfirmTxModalIsOpen(true)\n    onApprove()\n  }, [onApprove, setConfirmTxModalIsOpen])\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (!ethereum || !account || !amount || new BigNumber(amount).lte(0))\n        return\n\n      setConfirmTxModalIsOpen(true)\n      onSetTransactionStatus(TransactionStatusType.IS_APPROVING)\n\n      const bigStakeQuantity = new BigNumber(amount).multipliedBy(\n        new BigNumber(10).pow(18)\n      )\n      const transactionId = await stakeUniswapEthDpiLpTokens(\n        ethereum as provider,\n        account,\n        bigStakeQuantity\n      )\n\n      if (!transactionId) {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n        return\n      }\n\n      onSetTransactionId(transactionId)\n      onSetTransactionStatus(TransactionStatusType.IS_PENDING)\n\n      const success = await waitTransaction(ethereum as provider, transactionId)\n\n      if (success) {\n        onSetTransactionStatus(TransactionStatusType.IS_COMPLETED)\n      } else {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n      }\n    },\n    [\n      ethereum,\n      account,\n      setConfirmTxModalIsOpen,\n      onSetTransactionId,\n      onSetTransactionStatus,\n    ]\n  )\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (!ethereum || !account || !amount || new BigNumber(amount).lte(0))\n        return\n\n      setConfirmTxModalIsOpen(true)\n      onSetTransactionStatus(TransactionStatusType.IS_APPROVING)\n\n      const bigStakeQuantity = new BigNumber(amount).multipliedBy(\n        new BigNumber(10).pow(18)\n      )\n      const transactionId = await unstakeUniswapEthDpiLpTokens(\n        ethereum as provider,\n        account,\n        bigStakeQuantity\n      )\n\n      if (!transactionId) {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n        return\n      }\n\n      onSetTransactionId(transactionId)\n      onSetTransactionStatus(TransactionStatusType.IS_PENDING)\n\n      const success = await waitTransaction(ethereum as provider, transactionId)\n\n      if (success) {\n        onSetTransactionStatus(TransactionStatusType.IS_COMPLETED)\n      } else {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n      }\n    },\n    [\n      ethereum,\n      account,\n      setConfirmTxModalIsOpen,\n      onSetTransactionId,\n      onSetTransactionStatus,\n    ]\n  )\n\n  const handleHarvest = useCallback(async () => {\n    if (!ethereum || !account) return\n\n    setConfirmTxModalIsOpen(true)\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING)\n\n    const transactionId = await claimEarnedIndexLpReward(\n      ethereum as provider,\n      account\n    )\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n      return\n    }\n\n    onSetTransactionId(transactionId)\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING)\n\n    const success = await waitTransaction(ethereum as provider, transactionId)\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED)\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n    }\n  }, [\n    ethereum,\n    account,\n    setConfirmTxModalIsOpen,\n    onSetTransactionId,\n    onSetTransactionStatus,\n  ])\n\n  const handleUnstakeAndHarvest = useCallback(async () => {\n    if (!ethereum || !account) return\n\n    setConfirmTxModalIsOpen(true)\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING)\n\n    const transactionId = await unstakeAndClaimEarnedIndexLpReward(\n      ethereum as provider,\n      account\n    )\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n      return\n    }\n\n    onSetTransactionId(transactionId)\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING)\n\n    const success = await waitTransaction(ethereum as provider, transactionId)\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED)\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n    }\n  }, [\n    ethereum,\n    account,\n    setConfirmTxModalIsOpen,\n    onSetTransactionId,\n    onSetTransactionStatus,\n  ])\n\n  const currentTime = Date.now()\n  const isPoolActive = new BigNumber(farmTwoStartTime).isLessThan(\n    new BigNumber(currentTime)\n  )\n\n  return (\n    <Context.Provider\n      value={{\n        isPoolActive,\n        isApproved,\n        isApproving,\n        onApprove: handleApprove,\n        onHarvest: handleHarvest,\n        onUnstakeAndHarvest: handleUnstakeAndHarvest,\n        onStake: handleStake,\n        onUnstake: handleUnstake,\n      }}\n    >\n      {children}\n      <ConfirmTransactionModal\n        isOpen={confirmTxModalIsOpen}\n        transactionId={transactionId}\n        transactionMiningStatus={transactionStatus}\n        onDismiss={() => {\n          setConfirmTxModalIsOpen(false)\n          onSetTransactionStatus(undefined)\n        }}\n      />\n    </Context.Provider>\n  )\n}\n\nexport default Provider\n"]},"metadata":{},"sourceType":"module"}