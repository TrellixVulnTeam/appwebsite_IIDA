{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/index-ui-master/src/views/Farm/components/Stake/components/V3StakeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button, ModalActions, ModalContent, Spacer } from 'react-neu';\nimport styled from 'styled-components';\nimport Web3 from 'web3';\nimport Modal from 'components/CustomModal';\nimport useV3Farming from 'hooks/useV3Farming';\nimport { deriveRGBColorFromString } from 'utils/colorUtils';\nimport V3StakeDetail from './V3StakeDetail';\nimport V3UnstakeDetail from './V3UnstakeDetail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StakeModal = ({\n  isOpen,\n  availableNftIds,\n  depositedNftIds,\n  farm,\n  onDismiss,\n  onStake,\n  onUnstake\n}) => {\n  _s();\n\n  const [selectedNftId, setSelectedNftId] = useState(undefined);\n  const [pendingRewardsForSelectedNft, setPendingRewardsForSelectedNft] = useState(0);\n  const [isShowingStakingDetailScreen, setIsShowingStakingDetailScreen] = useState(false);\n  const [isShowingUnstakingDetailScreen, setIsShowingUnstakingDetailScreen] = useState(false);\n  const {\n    getIndividualPendingRewardsAmount\n  } = useV3Farming();\n  const fetchPendingRewardsForSelectedNft = useCallback(async () => {\n    if (!selectedNftId) {\n      setPendingRewardsForSelectedNft(0);\n      return;\n    }\n\n    const pendingRewards = await getIndividualPendingRewardsAmount(farm, selectedNftId);\n    const normalizedRewards = Web3.utils.fromWei(pendingRewards.toString());\n    setPendingRewardsForSelectedNft(Number(normalizedRewards));\n  }, [selectedNftId, getIndividualPendingRewardsAmount, farm]);\n  useEffect(() => {\n    fetchPendingRewardsForSelectedNft();\n  }, [selectedNftId, fetchPendingRewardsForSelectedNft, getIndividualPendingRewardsAmount]);\n  const handleStakeClick = useCallback(() => {\n    if (!selectedNftId) return;\n    onStake(selectedNftId, farm);\n    closeStakingDetail();\n  }, [onStake, selectedNftId, farm]);\n  const handleUnstakeClick = useCallback(() => {\n    if (!selectedNftId) return;\n    onUnstake(selectedNftId);\n    closeUnstakingDetail();\n  }, [onUnstake, selectedNftId]);\n\n  const openStakingDetail = async nftId => {\n    setSelectedNftId(nftId);\n    setIsShowingStakingDetailScreen(true);\n  };\n\n  const closeStakingDetail = () => {\n    setSelectedNftId(undefined);\n    setIsShowingStakingDetailScreen(false);\n  };\n\n  const openUnstakingDetail = async nftId => {\n    setSelectedNftId(nftId);\n    setIsShowingUnstakingDetailScreen(true);\n  };\n\n  const closeUnstakingDetail = () => {\n    setSelectedNftId(undefined);\n    setIsShowingUnstakingDetailScreen(false);\n  };\n\n  const lpTokenIcons = /*#__PURE__*/_jsxDEV(StyledLpTokenWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(StyledLpTokenImage, {\n      alt: \"ETH Icon\",\n      src: \"https://s3.amazonaws.com/set-core/img/coin-icons/eth.svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledLpTokenImage, {\n      alt: farm.img.alt,\n      src: farm.img.src\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n\n  if (isShowingStakingDetailScreen) {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onDismiss: onDismiss,\n      children: /*#__PURE__*/_jsxDEV(V3StakeDetail, {\n        farm: farm,\n        selectedNftId: selectedNftId,\n        onStake: handleStakeClick,\n        onClose: closeStakingDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (isShowingUnstakingDetailScreen) {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onDismiss: onDismiss,\n      children: /*#__PURE__*/_jsxDEV(V3UnstakeDetail, {\n        farm: farm,\n        selectedNftId: selectedNftId,\n        pendingRewardsForSelectedNft: pendingRewardsForSelectedNft,\n        onUnstake: handleUnstakeClick,\n        onClose: closeUnstakingDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n  const stakedTokens = availableNftIds.length === 0 && depositedNftIds.length === 0 ? /*#__PURE__*/_jsxDEV(StyledList, {\n    children: \"You do not have any Uniswap V3 tokens eligible for INDEX rewards.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Your Unstaked \", farm.tokenPair, \" LP NFTs\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), availableNftIds.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(StyledList, {\n        children: availableNftIds.map(nft => /*#__PURE__*/_jsxDEV(StyledNftItem, {\n          onClick: () => openStakingDetail(nft),\n          children: [/*#__PURE__*/_jsxDEV(StyledNftColor, {\n            nftColor: deriveRGBColorFromString(nft === null || nft === void 0 ? void 0 : nft.toString())\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 19\n          }, this), nft === null || nft === void 0 ? void 0 : nft.toString()]\n        }, nft.toString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(StyledList, {\n      children: [\"You do not have any unstaked \", farm.poolLabel, \" Uniswap V3 tokens.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Your Staked \", farm.tokenPair, \" LP NFTs\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this), depositedNftIds.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(StyledList, {\n        children: depositedNftIds.map(nft => /*#__PURE__*/_jsxDEV(StyledNftItem, {\n          onClick: () => openUnstakingDetail(nft),\n          children: [/*#__PURE__*/_jsxDEV(StyledNftColor, {\n            nftColor: deriveRGBColorFromString(nft === null || nft === void 0 ? void 0 : nft.toString())\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 19\n          }, this), nft === null || nft === void 0 ? void 0 : nft.toString()]\n        }, nft.toString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(StyledList, {\n      children: [\"You do not have any staked \", farm.poolLabel, \" Uniswap V3 tokens.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(StyledNftCardTitle, {\n          children: [lpTokenIcons, \"Uniswap V3 Staking\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Uniswap V3 uses NFT tokens to represent LP positions. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 67\n          }, this), \" Your Uniswap V3 LP tokens eligible for Index Coop rewards are listed below.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), stakedTokens]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onDismiss,\n        variant: \"secondary\",\n        text: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeModal, \"rw1tiIasl8FoF59Osh3UYs96l60=\", false, function () {\n  return [useV3Farming];\n});\n\n_c = StakeModal;\nconst StyledNftColor = styled.div`\n  height: 20px;\n  width: 20px;\n  margin-right: 10px;\n  border-radius: 20px;\n  ${props => `\n      background-color: #${props.nftColor};\n    `}\n`;\n_c2 = StyledNftColor;\nconst StyledNftCardTitle = styled.h2`\n  display: flex;\n  align-items: center;\n`;\n_c3 = StyledNftCardTitle;\nconst StyledList = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  border-radius: 5px;\n  background-color: ${props => props.theme.colors.transparentColors.grey};\n  padding: 15px;\n`;\n_c4 = StyledList;\nconst StyledNftItem = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 5px 2px;\n  cursor: pointer;\n  color: ${props => props.theme.colors.grey[400]};\n  &:hover {\n    color: white;\n`;\n_c5 = StyledNftItem;\nconst StyledLpTokenWrapper = styled.div`\n  margin-left: 10px;\n  margin-right: 10px;\n`;\n_c6 = StyledLpTokenWrapper;\nconst StyledLpTokenImage = styled.img`\n  height: 35px;\n  margin-left: -10px;\n`;\n_c7 = StyledLpTokenImage;\nexport default StakeModal;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"StakeModal\");\n$RefreshReg$(_c2, \"StyledNftColor\");\n$RefreshReg$(_c3, \"StyledNftCardTitle\");\n$RefreshReg$(_c4, \"StyledList\");\n$RefreshReg$(_c5, \"StyledNftItem\");\n$RefreshReg$(_c6, \"StyledLpTokenWrapper\");\n$RefreshReg$(_c7, \"StyledLpTokenImage\");","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/views/Farm/components/Stake/components/V3StakeModal.tsx"],"names":["React","useCallback","useEffect","useState","Button","ModalActions","ModalContent","Spacer","styled","Web3","Modal","useV3Farming","deriveRGBColorFromString","V3StakeDetail","V3UnstakeDetail","StakeModal","isOpen","availableNftIds","depositedNftIds","farm","onDismiss","onStake","onUnstake","selectedNftId","setSelectedNftId","undefined","pendingRewardsForSelectedNft","setPendingRewardsForSelectedNft","isShowingStakingDetailScreen","setIsShowingStakingDetailScreen","isShowingUnstakingDetailScreen","setIsShowingUnstakingDetailScreen","getIndividualPendingRewardsAmount","fetchPendingRewardsForSelectedNft","pendingRewards","normalizedRewards","utils","fromWei","toString","Number","handleStakeClick","closeStakingDetail","handleUnstakeClick","closeUnstakingDetail","openStakingDetail","nftId","openUnstakingDetail","lpTokenIcons","img","alt","src","stakedTokens","length","tokenPair","map","nft","poolLabel","StyledNftColor","div","props","nftColor","StyledNftCardTitle","h2","StyledList","theme","colors","transparentColors","grey","StyledNftItem","StyledLpTokenWrapper","StyledLpTokenImage"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport {\n  Button,\n  ModalActions,\n  ModalContent,\n  ModalProps,\n  Spacer,\n} from 'react-neu'\n\nimport styled from 'styled-components'\nimport Web3 from 'web3'\n\nimport Modal from 'components/CustomModal'\nimport { V3Farm } from 'constants/v3Farms'\nimport useV3Farming from 'hooks/useV3Farming'\nimport { deriveRGBColorFromString } from 'utils/colorUtils'\n\nimport V3StakeDetail from './V3StakeDetail'\nimport V3UnstakeDetail from './V3UnstakeDetail'\n\ninterface StakeModalProps extends ModalProps {\n  onStake: (nftId: number, farm: V3Farm) => void\n  onUnstake: (nftId: number) => void\n  availableNftIds: number[]\n  depositedNftIds: number[]\n  farm: V3Farm\n  accruedRewards: string\n  provider: any\n}\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isOpen,\n  availableNftIds,\n  depositedNftIds,\n  farm,\n  onDismiss,\n  onStake,\n  onUnstake,\n}) => {\n  const [selectedNftId, setSelectedNftId] = useState<number | undefined>(\n    undefined\n  )\n\n  const [pendingRewardsForSelectedNft, setPendingRewardsForSelectedNft] =\n    useState<number>(0)\n  const [isShowingStakingDetailScreen, setIsShowingStakingDetailScreen] =\n    useState(false)\n  const [isShowingUnstakingDetailScreen, setIsShowingUnstakingDetailScreen] =\n    useState(false)\n\n  const { getIndividualPendingRewardsAmount } = useV3Farming()\n\n  const fetchPendingRewardsForSelectedNft = useCallback(async () => {\n    if (!selectedNftId) {\n      setPendingRewardsForSelectedNft(0)\n      return\n    }\n\n    const pendingRewards = await getIndividualPendingRewardsAmount(\n      farm,\n      selectedNftId\n    )\n\n    const normalizedRewards = Web3.utils.fromWei(pendingRewards.toString())\n\n    setPendingRewardsForSelectedNft(Number(normalizedRewards))\n  }, [selectedNftId, getIndividualPendingRewardsAmount, farm])\n\n  useEffect(() => {\n    fetchPendingRewardsForSelectedNft()\n  }, [\n    selectedNftId,\n    fetchPendingRewardsForSelectedNft,\n    getIndividualPendingRewardsAmount,\n  ])\n\n  const handleStakeClick = useCallback(() => {\n    if (!selectedNftId) return\n\n    onStake(selectedNftId, farm)\n    closeStakingDetail()\n  }, [onStake, selectedNftId, farm])\n\n  const handleUnstakeClick = useCallback(() => {\n    if (!selectedNftId) return\n\n    onUnstake(selectedNftId)\n    closeUnstakingDetail()\n  }, [onUnstake, selectedNftId])\n\n  const openStakingDetail = async (nftId: number) => {\n    setSelectedNftId(nftId)\n    setIsShowingStakingDetailScreen(true)\n  }\n  const closeStakingDetail = () => {\n    setSelectedNftId(undefined)\n    setIsShowingStakingDetailScreen(false)\n  }\n\n  const openUnstakingDetail = async (nftId: number) => {\n    setSelectedNftId(nftId)\n    setIsShowingUnstakingDetailScreen(true)\n  }\n  const closeUnstakingDetail = () => {\n    setSelectedNftId(undefined)\n    setIsShowingUnstakingDetailScreen(false)\n  }\n\n  const lpTokenIcons = (\n    <StyledLpTokenWrapper>\n      <StyledLpTokenImage\n        alt='ETH Icon'\n        src='https://s3.amazonaws.com/set-core/img/coin-icons/eth.svg'\n      />\n      <StyledLpTokenImage alt={farm.img.alt} src={farm.img.src} />\n    </StyledLpTokenWrapper>\n  )\n\n  if (isShowingStakingDetailScreen) {\n    return (\n      <Modal isOpen={isOpen} onDismiss={onDismiss}>\n        <V3StakeDetail\n          farm={farm}\n          selectedNftId={selectedNftId}\n          onStake={handleStakeClick}\n          onClose={closeStakingDetail}\n        />\n      </Modal>\n    )\n  }\n\n  if (isShowingUnstakingDetailScreen) {\n    return (\n      <Modal isOpen={isOpen} onDismiss={onDismiss}>\n        <V3UnstakeDetail\n          farm={farm}\n          selectedNftId={selectedNftId}\n          pendingRewardsForSelectedNft={pendingRewardsForSelectedNft}\n          onUnstake={handleUnstakeClick}\n          onClose={closeUnstakingDetail}\n        />\n      </Modal>\n    )\n  }\n\n  const stakedTokens =\n    availableNftIds.length === 0 && depositedNftIds.length === 0 ? (\n      <StyledList>\n        You do not have any Uniswap V3 tokens eligible for INDEX rewards.\n      </StyledList>\n    ) : (\n      <>\n        <h3>Your Unstaked {farm.tokenPair} LP NFTs</h3>\n        {availableNftIds.length > 0 ? (\n          <div>\n            <StyledList>\n              {availableNftIds.map((nft) => (\n                <StyledNftItem\n                  key={nft.toString()}\n                  onClick={() => openStakingDetail(nft)}\n                >\n                  <StyledNftColor\n                    nftColor={deriveRGBColorFromString(nft?.toString())}\n                  />\n                  {nft?.toString()}\n                </StyledNftItem>\n              ))}\n            </StyledList>\n          </div>\n        ) : (\n          <StyledList>\n            You do not have any unstaked {farm.poolLabel} Uniswap V3 tokens.\n          </StyledList>\n        )}\n\n        <Spacer />\n\n        <h3>Your Staked {farm.tokenPair} LP NFTs</h3>\n        {depositedNftIds.length > 0 ? (\n          <div>\n            <StyledList>\n              {depositedNftIds.map((nft) => (\n                <StyledNftItem\n                  key={nft.toString()}\n                  onClick={() => openUnstakingDetail(nft)}\n                >\n                  <StyledNftColor\n                    nftColor={deriveRGBColorFromString(nft?.toString())}\n                  />\n                  {nft?.toString()}\n                </StyledNftItem>\n              ))}\n            </StyledList>\n          </div>\n        ) : (\n          <StyledList>\n            You do not have any staked {farm.poolLabel} Uniswap V3 tokens.\n          </StyledList>\n        )}\n      </>\n    )\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={onDismiss}>\n      <ModalContent>\n        <div>\n          <StyledNftCardTitle>\n            {lpTokenIcons}\n            Uniswap V3 Staking\n          </StyledNftCardTitle>\n          <p>\n            Uniswap V3 uses NFT tokens to represent LP positions. <br /> Your\n            Uniswap V3 LP tokens eligible for Index Coop rewards are listed\n            below.\n          </p>\n\n          {stakedTokens}\n        </div>\n      </ModalContent>\n      <ModalActions>\n        <Button onClick={onDismiss} variant='secondary' text='Close' />\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst StyledNftColor = styled.div`\n  height: 20px;\n  width: 20px;\n  margin-right: 10px;\n  border-radius: 20px;\n  ${(props: { nftColor: string }) =>\n    `\n      background-color: #${props.nftColor};\n    `}\n`\n\nconst StyledNftCardTitle = styled.h2`\n  display: flex;\n  align-items: center;\n`\n\nconst StyledList = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  border-radius: 5px;\n  background-color: ${(props) => props.theme.colors.transparentColors.grey};\n  padding: 15px;\n`\n\nconst StyledNftItem = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 5px 2px;\n  cursor: pointer;\n  color: ${(props) => props.theme.colors.grey[400]};\n  &:hover {\n    color: white;\n`\n\nconst StyledLpTokenWrapper = styled.div`\n  margin-left: 10px;\n  margin-right: 10px;\n`\n\nconst StyledLpTokenImage = styled.img`\n  height: 35px;\n  margin-left: -10px;\n`\n\nexport default StakeModal\n"]},"metadata":{},"sourceType":"module"}