{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/components/BuySell/components/MaxButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport useBuySell from 'hooks/useBuySell';\nimport useWallet from 'hooks/useWallet';\nimport BigNumber from 'utils/bignumber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MaxButton = () => {\n  _s();\n\n  const {\n    buySellToken,\n    isUserBuying,\n    selectedCurrency,\n    spendingTokenBalance,\n    zeroExTradeData,\n    onSetActiveField,\n    onSetBuySellQuantity\n  } = useBuySell();\n  const {\n    account\n  } = useWallet(); // Do not allow users to spend maximum ETH quantity due to gas cost complications\n\n  const isMaxSpendDisabled = isUserBuying && (selectedCurrency === null || selectedCurrency === void 0 ? void 0 : selectedCurrency.label) === 'ETH';\n  let spendingTokenSymbol = 'ETH';\n\n  let buttonAction = () => {};\n\n  let requiredQuantity = new BigNumber((zeroExTradeData === null || zeroExTradeData === void 0 ? void 0 : zeroExTradeData.maxInput) || 0);\n\n  if (!isUserBuying) {\n    spendingTokenSymbol = buySellToken.toUpperCase();\n\n    buttonAction = () => {\n      onSetActiveField('set');\n      onSetBuySellQuantity(spendingTokenBalance.toString());\n    };\n  } else if ((selectedCurrency === null || selectedCurrency === void 0 ? void 0 : selectedCurrency.label) === 'ETH') {\n    spendingTokenSymbol = selectedCurrency.label;\n\n    buttonAction = () => {\n      onSetActiveField('currency');\n      onSetBuySellQuantity(spendingTokenBalance.toString());\n    };\n  } else if ((selectedCurrency === null || selectedCurrency === void 0 ? void 0 : selectedCurrency.label) === 'DAI') {\n    spendingTokenSymbol = selectedCurrency.label;\n\n    buttonAction = () => {\n      onSetActiveField('currency');\n      onSetBuySellQuantity(spendingTokenBalance.toString());\n    };\n  } else if ((selectedCurrency === null || selectedCurrency === void 0 ? void 0 : selectedCurrency.label) === 'USDC') {\n    spendingTokenSymbol = selectedCurrency.label;\n\n    buttonAction = () => {\n      onSetActiveField('currency');\n      onSetBuySellQuantity(spendingTokenBalance.toString());\n    };\n  }\n\n  const userHasSufficientFunds = spendingTokenBalance.isGreaterThanOrEqualTo(requiredQuantity);\n  if (!account) return null;\n\n  if (spendingTokenBalance.isLessThanOrEqualTo(0)) {\n    return /*#__PURE__*/_jsxDEV(StyledInsufficientBalance, {\n      children: \"You do not have this token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (isMaxSpendDisabled) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(StyledMaxSpendableBalance, {\n        children: [spendingTokenBalance.toFixed(5), \" \", spendingTokenSymbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), !userHasSufficientFunds && /*#__PURE__*/_jsxDEV(StyledInsufficientBalance, {\n        children: \"Insufficient funds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledMaxButton, {\n      onClick: buttonAction,\n      children: [\"Max \", spendingTokenBalance.toFixed(5), \" \", spendingTokenSymbol]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), !userHasSufficientFunds && /*#__PURE__*/_jsxDEV(StyledInsufficientBalance, {\n      children: \"Insufficient funds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MaxButton, \"SclNvrRoS6rKjgMt2JlXar3bo1Y=\", false, function () {\n  return [useBuySell, useWallet];\n});\n\n_c = MaxButton;\nconst StyledInsufficientBalance = styled.span`\n  width: 100%;\n  margin-bottom: 20px;\n  margin-left: 10px;\n  color: ${props => props.theme.colors.red};\n  cursor: pointer;\n`;\n_c2 = StyledInsufficientBalance;\nconst StyledMaxButton = styled.span`\n  width: 100%;\n  margin-bottom: 20px;\n  margin-left: 10px;\n  color: ${props => props.theme.colors.primary.light};\n  cursor: pointer;\n`;\n_c3 = StyledMaxButton;\nconst StyledMaxSpendableBalance = styled.span`\n  width: 100%;\n  margin-bottom: 20px;\n  margin-left: 10px;\n`;\n_c4 = StyledMaxSpendableBalance;\nexport default MaxButton;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"MaxButton\");\n$RefreshReg$(_c2, \"StyledInsufficientBalance\");\n$RefreshReg$(_c3, \"StyledMaxButton\");\n$RefreshReg$(_c4, \"StyledMaxSpendableBalance\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/components/BuySell/components/MaxButton.tsx"],"names":["React","styled","useBuySell","useWallet","BigNumber","MaxButton","buySellToken","isUserBuying","selectedCurrency","spendingTokenBalance","zeroExTradeData","onSetActiveField","onSetBuySellQuantity","account","isMaxSpendDisabled","label","spendingTokenSymbol","buttonAction","requiredQuantity","maxInput","toUpperCase","toString","userHasSufficientFunds","isGreaterThanOrEqualTo","isLessThanOrEqualTo","toFixed","StyledInsufficientBalance","span","props","theme","colors","red","StyledMaxButton","primary","light","StyledMaxSpendableBalance"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport styled from 'styled-components'\n\nimport useBuySell from 'hooks/useBuySell'\nimport useWallet from 'hooks/useWallet'\nimport BigNumber from 'utils/bignumber'\n\nconst MaxButton: React.FC = () => {\n  const {\n    buySellToken,\n    isUserBuying,\n    selectedCurrency,\n    spendingTokenBalance,\n    zeroExTradeData,\n    onSetActiveField,\n    onSetBuySellQuantity,\n  } = useBuySell()\n\n  const { account } = useWallet()\n\n  // Do not allow users to spend maximum ETH quantity due to gas cost complications\n  const isMaxSpendDisabled = isUserBuying && selectedCurrency?.label === 'ETH'\n\n  let spendingTokenSymbol = 'ETH'\n  let buttonAction = () => {}\n  let requiredQuantity = new BigNumber(zeroExTradeData?.maxInput || 0)\n\n  if (!isUserBuying) {\n    spendingTokenSymbol = buySellToken.toUpperCase()\n    buttonAction = () => {\n      onSetActiveField('set')\n      onSetBuySellQuantity(spendingTokenBalance.toString())\n    }\n  } else if (selectedCurrency?.label === 'ETH') {\n    spendingTokenSymbol = selectedCurrency.label\n    buttonAction = () => {\n      onSetActiveField('currency')\n      onSetBuySellQuantity(spendingTokenBalance.toString())\n    }\n  } else if (selectedCurrency?.label === 'DAI') {\n    spendingTokenSymbol = selectedCurrency.label\n    buttonAction = () => {\n      onSetActiveField('currency')\n      onSetBuySellQuantity(spendingTokenBalance.toString())\n    }\n  } else if (selectedCurrency?.label === 'USDC') {\n    spendingTokenSymbol = selectedCurrency.label\n    buttonAction = () => {\n      onSetActiveField('currency')\n      onSetBuySellQuantity(spendingTokenBalance.toString())\n    }\n  }\n\n  const userHasSufficientFunds =\n    spendingTokenBalance.isGreaterThanOrEqualTo(requiredQuantity)\n\n  if (!account) return null\n\n  if (spendingTokenBalance.isLessThanOrEqualTo(0)) {\n    return (\n      <StyledInsufficientBalance>\n        You do not have this token\n      </StyledInsufficientBalance>\n    )\n  }\n\n  if (isMaxSpendDisabled) {\n    return (\n      <>\n        <StyledMaxSpendableBalance>\n          {spendingTokenBalance.toFixed(5)} {spendingTokenSymbol}\n        </StyledMaxSpendableBalance>\n        {!userHasSufficientFunds && (\n          <StyledInsufficientBalance>\n            Insufficient funds\n          </StyledInsufficientBalance>\n        )}\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledMaxButton onClick={buttonAction}>\n        Max {spendingTokenBalance.toFixed(5)} {spendingTokenSymbol}\n      </StyledMaxButton>\n      {!userHasSufficientFunds && (\n        <StyledInsufficientBalance>\n          Insufficient funds\n        </StyledInsufficientBalance>\n      )}\n    </>\n  )\n}\n\nconst StyledInsufficientBalance = styled.span`\n  width: 100%;\n  margin-bottom: 20px;\n  margin-left: 10px;\n  color: ${(props) => props.theme.colors.red};\n  cursor: pointer;\n`\n\nconst StyledMaxButton = styled.span`\n  width: 100%;\n  margin-bottom: 20px;\n  margin-left: 10px;\n  color: ${(props) => props.theme.colors.primary.light};\n  cursor: pointer;\n`\n\nconst StyledMaxSpendableBalance = styled.span`\n  width: 100%;\n  margin-bottom: 20px;\n  margin-left: 10px;\n`\n\nexport default MaxButton\n"]},"metadata":{},"sourceType":"module"}