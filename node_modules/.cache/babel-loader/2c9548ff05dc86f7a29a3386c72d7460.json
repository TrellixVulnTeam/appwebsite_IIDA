{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/V3Farming/Provider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport ConfirmTransactionModal, { TransactionStatusType } from 'components/ConfirmTransactionModal';\nimport useTransactionWatcher from 'hooks/useTransactionWatcher';\nimport useWallet from 'hooks/useWallet';\nimport { claimAccruedRewards, depositAndStake, getAccruedRewardsAmount, getAllDepositedTokens, getAllPendingRewardsAmount, getIndividualPendingRewardsAmount, getValidIds, withdraw } from 'index-sdk/uniV3Farm';\nimport BigNumber from 'utils/bignumber';\nimport { waitTransaction } from 'utils/index';\nimport Context from './Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Provider = ({\n  children\n}) => {\n  _s();\n\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false);\n  const {\n    transactionId,\n    transactionStatus,\n    onSetTransactionStatus,\n    onSetTransactionId\n  } = useTransactionWatcher();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const handleDeposit = useCallback(async (id, farm) => {\n    if (!ethereum || !account || !id) return;\n    setConfirmTxModalIsOpen(true);\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING);\n    const transactionId = await depositAndStake(id, farm, account, ethereum);\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n      return;\n    }\n\n    onSetTransactionId(transactionId);\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING);\n    const success = await waitTransaction(ethereum, transactionId);\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED);\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n    }\n  }, [ethereum, account, setConfirmTxModalIsOpen, onSetTransactionId, onSetTransactionStatus]);\n  const handleWithdraw = useCallback(async (id, farm) => {\n    if (!ethereum || !account || !id) return;\n    setConfirmTxModalIsOpen(true);\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING);\n    const transactionId = await withdraw(id, account, farm, ethereum);\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n      return;\n    }\n\n    onSetTransactionId(transactionId);\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING);\n    const success = await waitTransaction(ethereum, transactionId);\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED);\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n    }\n  }, [ethereum, account, setConfirmTxModalIsOpen, onSetTransactionId, onSetTransactionStatus]);\n  const handleClaimAccrued = useCallback(async rewardToken => {\n    if (!ethereum || !account) return;\n    setConfirmTxModalIsOpen(true);\n    onSetTransactionStatus(TransactionStatusType.IS_APPROVING);\n    const transactionId = await claimAccruedRewards(account, rewardToken, ethereum);\n\n    if (!transactionId) {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n      return;\n    }\n\n    onSetTransactionId(transactionId);\n    onSetTransactionStatus(TransactionStatusType.IS_PENDING);\n    const success = await waitTransaction(ethereum, transactionId);\n\n    if (success) {\n      onSetTransactionStatus(TransactionStatusType.IS_COMPLETED);\n    } else {\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n    }\n  }, [ethereum, account, setConfirmTxModalIsOpen, onSetTransactionId, onSetTransactionStatus]);\n  const handleGetAccruedRewardsAmount = useCallback(async rewardToken => {\n    if (!ethereum || !account || !rewardToken) return;\n    return await getAccruedRewardsAmount(account, rewardToken, ethereum);\n  }, [ethereum, account]);\n  const handleGetValidIds = useCallback(async farm => {\n    if (!ethereum || !account || !farm) return;\n    return await getValidIds(farm, account, ethereum);\n  }, [ethereum, account]);\n  const handleGetDepositedTokens = useCallback(async farm => {\n    if (!ethereum || !account || !farm) return;\n    return await getAllDepositedTokens(account, farm, ethereum);\n  }, [ethereum, account]);\n  const handleGetAllPendingRewardsAmount = useCallback(async farm => {\n    if (!ethereum || !account || !farm) return;\n    return await getAllPendingRewardsAmount(account, farm, ethereum);\n  }, [ethereum, account]);\n  const handleGetIndividualPendingRewardsAmount = useCallback(async (farm, nftId) => {\n    if (!ethereum || !account || !farm) return new BigNumber(0);\n    return await getIndividualPendingRewardsAmount(account, farm, nftId, ethereum);\n  }, [ethereum, account]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      onDeposit: handleDeposit,\n      onWithdraw: handleWithdraw,\n      onClaimAccrued: handleClaimAccrued,\n      getAccruedRewardsAmount: handleGetAccruedRewardsAmount,\n      getValidIds: handleGetValidIds,\n      getAllDepositedTokens: handleGetDepositedTokens,\n      getAllPendingRewardsAmount: handleGetAllPendingRewardsAmount,\n      getIndividualPendingRewardsAmount: handleGetIndividualPendingRewardsAmount\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(ConfirmTransactionModal, {\n      isOpen: confirmTxModalIsOpen,\n      transactionId: transactionId,\n      transactionMiningStatus: transactionStatus,\n      onDismiss: () => {\n        setConfirmTxModalIsOpen(false);\n        onSetTransactionStatus(undefined);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Provider, \"kamOpu/Uog0BcAVMQUETc5dw3Xs=\", false, function () {\n  return [useTransactionWatcher, useWallet];\n});\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/V3Farming/Provider.tsx"],"names":["React","useCallback","useState","ConfirmTransactionModal","TransactionStatusType","useTransactionWatcher","useWallet","claimAccruedRewards","depositAndStake","getAccruedRewardsAmount","getAllDepositedTokens","getAllPendingRewardsAmount","getIndividualPendingRewardsAmount","getValidIds","withdraw","BigNumber","waitTransaction","Context","Provider","children","confirmTxModalIsOpen","setConfirmTxModalIsOpen","transactionId","transactionStatus","onSetTransactionStatus","onSetTransactionId","account","ethereum","handleDeposit","id","farm","IS_APPROVING","IS_FAILED","IS_PENDING","success","IS_COMPLETED","handleWithdraw","handleClaimAccrued","rewardToken","handleGetAccruedRewardsAmount","handleGetValidIds","handleGetDepositedTokens","handleGetAllPendingRewardsAmount","handleGetIndividualPendingRewardsAmount","nftId","onDeposit","onWithdraw","onClaimAccrued","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\n\nimport ConfirmTransactionModal, {\n  TransactionStatusType,\n} from 'components/ConfirmTransactionModal'\nimport { V3Farm } from 'constants/v3Farms'\nimport useTransactionWatcher from 'hooks/useTransactionWatcher'\nimport useWallet from 'hooks/useWallet'\nimport {\n  claimAccruedRewards,\n  depositAndStake,\n  getAccruedRewardsAmount,\n  getAllDepositedTokens,\n  getAllPendingRewardsAmount,\n  getIndividualPendingRewardsAmount,\n  getValidIds,\n  withdraw,\n} from 'index-sdk/uniV3Farm'\nimport BigNumber from 'utils/bignumber'\nimport { waitTransaction } from 'utils/index'\n\nimport Context from './Context'\n\nconst Provider: React.FC = ({ children }) => {\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false)\n\n  const {\n    transactionId,\n    transactionStatus,\n    onSetTransactionStatus,\n    onSetTransactionId,\n  } = useTransactionWatcher()\n\n  const { account, ethereum } = useWallet()\n\n  const handleDeposit = useCallback(\n    async (id: number, farm: V3Farm) => {\n      if (!ethereum || !account || !id) return\n\n      setConfirmTxModalIsOpen(true)\n      onSetTransactionStatus(TransactionStatusType.IS_APPROVING)\n\n      const transactionId = await depositAndStake(id, farm, account, ethereum)\n\n      if (!transactionId) {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n        return\n      }\n\n      onSetTransactionId(transactionId)\n      onSetTransactionStatus(TransactionStatusType.IS_PENDING)\n\n      const success = await waitTransaction(ethereum, transactionId)\n\n      if (success) {\n        onSetTransactionStatus(TransactionStatusType.IS_COMPLETED)\n      } else {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n      }\n    },\n    [\n      ethereum,\n      account,\n      setConfirmTxModalIsOpen,\n      onSetTransactionId,\n      onSetTransactionStatus,\n    ]\n  )\n\n  const handleWithdraw = useCallback(\n    async (id: number, farm: V3Farm) => {\n      if (!ethereum || !account || !id) return\n\n      setConfirmTxModalIsOpen(true)\n      onSetTransactionStatus(TransactionStatusType.IS_APPROVING)\n\n      const transactionId = await withdraw(id, account, farm, ethereum)\n\n      if (!transactionId) {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n        return\n      }\n\n      onSetTransactionId(transactionId)\n      onSetTransactionStatus(TransactionStatusType.IS_PENDING)\n\n      const success = await waitTransaction(ethereum, transactionId)\n\n      if (success) {\n        onSetTransactionStatus(TransactionStatusType.IS_COMPLETED)\n      } else {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n      }\n    },\n    [\n      ethereum,\n      account,\n      setConfirmTxModalIsOpen,\n      onSetTransactionId,\n      onSetTransactionStatus,\n    ]\n  )\n\n  const handleClaimAccrued = useCallback(\n    async (rewardToken: string) => {\n      if (!ethereum || !account) return\n\n      setConfirmTxModalIsOpen(true)\n      onSetTransactionStatus(TransactionStatusType.IS_APPROVING)\n\n      const transactionId = await claimAccruedRewards(\n        account,\n        rewardToken,\n        ethereum\n      )\n\n      if (!transactionId) {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n        return\n      }\n\n      onSetTransactionId(transactionId)\n      onSetTransactionStatus(TransactionStatusType.IS_PENDING)\n\n      const success = await waitTransaction(ethereum, transactionId)\n\n      if (success) {\n        onSetTransactionStatus(TransactionStatusType.IS_COMPLETED)\n      } else {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n      }\n    },\n    [\n      ethereum,\n      account,\n      setConfirmTxModalIsOpen,\n      onSetTransactionId,\n      onSetTransactionStatus,\n    ]\n  )\n\n  const handleGetAccruedRewardsAmount = useCallback(\n    async (rewardToken: string) => {\n      if (!ethereum || !account || !rewardToken) return\n\n      return await getAccruedRewardsAmount(account, rewardToken, ethereum)\n    },\n    [ethereum, account]\n  )\n\n  const handleGetValidIds = useCallback(\n    async (farm: V3Farm) => {\n      if (!ethereum || !account || !farm) return\n\n      return await getValidIds(farm, account, ethereum)\n    },\n    [ethereum, account]\n  )\n\n  const handleGetDepositedTokens = useCallback(\n    async (farm: V3Farm) => {\n      if (!ethereum || !account || !farm) return\n\n      return await getAllDepositedTokens(account, farm, ethereum)\n    },\n    [ethereum, account]\n  )\n\n  const handleGetAllPendingRewardsAmount = useCallback(\n    async (farm: V3Farm) => {\n      if (!ethereum || !account || !farm) return\n\n      return await getAllPendingRewardsAmount(account, farm, ethereum)\n    },\n    [ethereum, account]\n  )\n\n  const handleGetIndividualPendingRewardsAmount = useCallback(\n    async (farm: V3Farm, nftId: number) => {\n      if (!ethereum || !account || !farm) return new BigNumber(0)\n\n      return await getIndividualPendingRewardsAmount(\n        account,\n        farm,\n        nftId,\n        ethereum\n      )\n    },\n    [ethereum, account]\n  )\n\n  return (\n    <Context.Provider\n      value={{\n        onDeposit: handleDeposit,\n        onWithdraw: handleWithdraw,\n        onClaimAccrued: handleClaimAccrued,\n        getAccruedRewardsAmount: handleGetAccruedRewardsAmount,\n        getValidIds: handleGetValidIds,\n        getAllDepositedTokens: handleGetDepositedTokens,\n        getAllPendingRewardsAmount: handleGetAllPendingRewardsAmount,\n        getIndividualPendingRewardsAmount:\n          handleGetIndividualPendingRewardsAmount,\n      }}\n    >\n      {children}\n      <ConfirmTransactionModal\n        isOpen={confirmTxModalIsOpen}\n        transactionId={transactionId}\n        transactionMiningStatus={transactionStatus}\n        onDismiss={() => {\n          setConfirmTxModalIsOpen(false)\n          onSetTransactionStatus(undefined)\n        }}\n      />\n    </Context.Provider>\n  )\n}\n\nexport default Provider\n"]},"metadata":{},"sourceType":"module"}