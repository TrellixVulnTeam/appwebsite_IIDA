{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.CommonAssertions = void 0;\n\nvar constants_1 = require('@setprotocol/set-protocol-v2/dist/utils/constants');\n\nvar CommonAssertions = function () {\n  function CommonAssertions() {}\n\n  CommonAssertions.prototype.greaterThanZero = function (quantity, errorMessage) {\n    if (quantity.lte(constants_1.ZERO)) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.includes = function (arr1, val, errorMessage) {\n    if (!arr1.includes(val)) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isEqualLength = function (arr1, arr2, errorMessage) {\n    if (arr1.length !== arr2.length) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isGreaterThan = function (quantity1, quantity2, errorMessage) {\n    if (quantity1.lte(quantity2)) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isGreaterOrEqualThan = function (quantity1, quantity2, errorMessage) {\n    if (quantity1.lt(quantity2)) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isLessOrEqualThan = function (quantity1, quantity2, errorMessage) {\n    if (quantity1.gt(quantity2)) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isMultipleOf = function (quantity, baseQuantity, errorMessage) {\n    if (!quantity.mod(baseQuantity).isZero()) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isValidString = function (value, errorMessage) {\n    if (!value) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isNotUndefined = function (value, errorMessage) {\n    if (!value) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isNotEmptyArray = function (array, errorMessage) {\n    if (array.length == 0) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isValidExpiration = function (expiration, errorMessage) {\n    if (Date.now() > expiration.mul(1000).toNumber()) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isValidLength = function (arr, len, errorMessage) {\n    if (arr.length !== len) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isEqualBigNumber = function (bigNumber1, bigNumber2, errorMessage) {\n    if (!bigNumber1.eq(bigNumber2)) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isValidAddress = function (address, errorMessage) {\n    if (!address || typeof address !== 'string' || address.length !== 42) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isEqualAddress = function (address1, address2, errorMessage) {\n    if (address1.toLowerCase() !== address2.toLowerCase()) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isDifferentAddress = function (address1, address2, errorMessage) {\n    if (address1.toLowerCase() == address2.toLowerCase()) {\n      throw new Error(errorMessage);\n    }\n  };\n\n  CommonAssertions.prototype.isSupportedChainId = function (chainId) {\n    var validChainIds = [1, 137];\n\n    if (!validChainIds.includes(chainId)) {\n      throw new Error('Unsupported chainId: ' + chainId + '. Must be one of ' + validChainIds);\n    }\n  };\n\n  return CommonAssertions;\n}();\n\nexports.CommonAssertions = CommonAssertions;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/node_modules/set.js/dist/src/assertions/CommonAssertions.js"],"names":["Object","defineProperty","exports","value","CommonAssertions","constants_1","require","prototype","greaterThanZero","quantity","errorMessage","lte","ZERO","Error","includes","arr1","val","isEqualLength","arr2","length","isGreaterThan","quantity1","quantity2","isGreaterOrEqualThan","lt","isLessOrEqualThan","gt","isMultipleOf","baseQuantity","mod","isZero","isValidString","isNotUndefined","isNotEmptyArray","array","isValidExpiration","expiration","Date","now","mul","toNumber","isValidLength","arr","len","isEqualBigNumber","bigNumber1","bigNumber2","eq","isValidAddress","address","isEqualAddress","address1","address2","toLowerCase","isDifferentAddress","isSupportedChainId","chainId","validChainIds"],"mappings":"AAAA;;AAAaA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA8B,YAA9B,EAA2C;AAACC,EAAAA,KAAK,EAAC;AAAP,CAA3C;AAAyDD,OAAO,CAACE,gBAAR,GAAyB,KAAK,CAA9B;;AAAgC,IAAIC,WAAW,GAACC,OAAO,CAAC,mDAAD,CAAvB;;AAA6E,IAAIF,gBAAgB,GAAC,YAAU;AAAC,WAASA,gBAAT,GAA2B,CAAE;;AAAAA,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BC,eAA3B,GAA2C,UAASC,QAAT,EAAkBC,YAAlB,EAA+B;AAAC,QAAGD,QAAQ,CAACE,GAAT,CAAaN,WAAW,CAACO,IAAzB,CAAH,EAAkC;AAAC,YAAM,IAAIC,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAA9I;;AAA+IN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BO,QAA3B,GAAoC,UAASC,IAAT,EAAcC,GAAd,EAAkBN,YAAlB,EAA+B;AAAC,QAAG,CAACK,IAAI,CAACD,QAAL,CAAcE,GAAd,CAAJ,EAAuB;AAAC,YAAM,IAAIH,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAA5H;;AAA6HN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BU,aAA3B,GAAyC,UAASF,IAAT,EAAcG,IAAd,EAAmBR,YAAnB,EAAgC;AAAC,QAAGK,IAAI,CAACI,MAAL,KAAcD,IAAI,CAACC,MAAtB,EAA6B;AAAC,YAAM,IAAIN,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAAxI;;AAAyIN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2Ba,aAA3B,GAAyC,UAASC,SAAT,EAAmBC,SAAnB,EAA6BZ,YAA7B,EAA0C;AAAC,QAAGW,SAAS,CAACV,GAAV,CAAcW,SAAd,CAAH,EAA4B;AAAC,YAAM,IAAIT,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAAjJ;;AAAkJN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BgB,oBAA3B,GAAgD,UAASF,SAAT,EAAmBC,SAAnB,EAA6BZ,YAA7B,EAA0C;AAAC,QAAGW,SAAS,CAACG,EAAV,CAAaF,SAAb,CAAH,EAA2B;AAAC,YAAM,IAAIT,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAAvJ;;AAAwJN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BkB,iBAA3B,GAA6C,UAASJ,SAAT,EAAmBC,SAAnB,EAA6BZ,YAA7B,EAA0C;AAAC,QAAGW,SAAS,CAACK,EAAV,CAAaJ,SAAb,CAAH,EAA2B;AAAC,YAAM,IAAIT,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAApJ;;AAAqJN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BoB,YAA3B,GAAwC,UAASlB,QAAT,EAAkBmB,YAAlB,EAA+BlB,YAA/B,EAA4C;AAAC,QAAG,CAACD,QAAQ,CAACoB,GAAT,CAAaD,YAAb,EAA2BE,MAA3B,EAAJ,EAAwC;AAAC,YAAM,IAAIjB,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAA9J;;AAA+JN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BwB,aAA3B,GAAyC,UAAS5B,KAAT,EAAeO,YAAf,EAA4B;AAAC,QAAG,CAACP,KAAJ,EAAU;AAAC,YAAM,IAAIU,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAAjH;;AAAkHN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2ByB,cAA3B,GAA0C,UAAS7B,KAAT,EAAeO,YAAf,EAA4B;AAAC,QAAG,CAACP,KAAJ,EAAU;AAAC,YAAM,IAAIU,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAAlH;;AAAmHN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2B0B,eAA3B,GAA2C,UAASC,KAAT,EAAexB,YAAf,EAA4B;AAAC,QAAGwB,KAAK,CAACf,MAAN,IAAc,CAAjB,EAAmB;AAAC,YAAM,IAAIN,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAA5H;;AAA6HN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2B4B,iBAA3B,GAA6C,UAASC,UAAT,EAAoB1B,YAApB,EAAiC;AAAC,QAAG2B,IAAI,CAACC,GAAL,KAAWF,UAAU,CAACG,GAAX,CAAe,IAAf,EAAqBC,QAArB,EAAd,EAA8C;AAAC,YAAM,IAAI3B,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAA9J;;AAA+JN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BkC,aAA3B,GAAyC,UAASC,GAAT,EAAaC,GAAb,EAAiBjC,YAAjB,EAA8B;AAAC,QAAGgC,GAAG,CAACvB,MAAJ,KAAawB,GAAhB,EAAoB;AAAC,YAAM,IAAI9B,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAA7H;;AAA8HN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BqC,gBAA3B,GAA4C,UAASC,UAAT,EAAoBC,UAApB,EAA+BpC,YAA/B,EAA4C;AAAC,QAAG,CAACmC,UAAU,CAACE,EAAX,CAAcD,UAAd,CAAJ,EAA8B;AAAC,YAAM,IAAIjC,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAAxJ;;AAAyJN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2ByC,cAA3B,GAA0C,UAASC,OAAT,EAAiBvC,YAAjB,EAA8B;AAAC,QAAG,CAACuC,OAAD,IAAU,OAAOA,OAAP,KAAiB,QAA3B,IAAqCA,OAAO,CAAC9B,MAAR,KAAiB,EAAzD,EAA4D;AAAC,YAAM,IAAIN,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAAtK;;AAAuKN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2B2C,cAA3B,GAA0C,UAASC,QAAT,EAAkBC,QAAlB,EAA2B1C,YAA3B,EAAwC;AAAC,QAAGyC,QAAQ,CAACE,WAAT,OAAyBD,QAAQ,CAACC,WAAT,EAA5B,EAAmD;AAAC,YAAM,IAAIxC,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAAvK;;AAAwKN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2B+C,kBAA3B,GAA8C,UAASH,QAAT,EAAkBC,QAAlB,EAA2B1C,YAA3B,EAAwC;AAAC,QAAGyC,QAAQ,CAACE,WAAT,MAAwBD,QAAQ,CAACC,WAAT,EAA3B,EAAkD;AAAC,YAAM,IAAIxC,KAAJ,CAAUH,YAAV,CAAN;AAA+B;AAAC,GAA1K;;AAA2KN,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BgD,kBAA3B,GAA8C,UAASC,OAAT,EAAiB;AAAC,QAAIC,aAAa,GAAC,CAAC,CAAD,EAAG,GAAH,CAAlB;;AAA0B,QAAG,CAACA,aAAa,CAAC3C,QAAd,CAAuB0C,OAAvB,CAAJ,EAAoC;AAAC,YAAM,IAAI3C,KAAJ,CAAU,0BAAwB2C,OAAxB,GAAgC,mBAAhC,GAAoDC,aAA9D,CAAN;AAAoF;AAAC,GAApN;;AAAqN,SAAOrD,gBAAP;AAAyB,CAA3hF,EAArB;;AAAmjFF,OAAO,CAACE,gBAAR,GAAyBA,gBAAzB","sourcesContent":["'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.CommonAssertions=void 0;var constants_1=require('@setprotocol/set-protocol-v2/dist/utils/constants');var CommonAssertions=function(){function CommonAssertions(){}CommonAssertions.prototype.greaterThanZero=function(quantity,errorMessage){if(quantity.lte(constants_1.ZERO)){throw new Error(errorMessage);}};CommonAssertions.prototype.includes=function(arr1,val,errorMessage){if(!arr1.includes(val)){throw new Error(errorMessage);}};CommonAssertions.prototype.isEqualLength=function(arr1,arr2,errorMessage){if(arr1.length!==arr2.length){throw new Error(errorMessage);}};CommonAssertions.prototype.isGreaterThan=function(quantity1,quantity2,errorMessage){if(quantity1.lte(quantity2)){throw new Error(errorMessage);}};CommonAssertions.prototype.isGreaterOrEqualThan=function(quantity1,quantity2,errorMessage){if(quantity1.lt(quantity2)){throw new Error(errorMessage);}};CommonAssertions.prototype.isLessOrEqualThan=function(quantity1,quantity2,errorMessage){if(quantity1.gt(quantity2)){throw new Error(errorMessage);}};CommonAssertions.prototype.isMultipleOf=function(quantity,baseQuantity,errorMessage){if(!quantity.mod(baseQuantity).isZero()){throw new Error(errorMessage);}};CommonAssertions.prototype.isValidString=function(value,errorMessage){if(!value){throw new Error(errorMessage);}};CommonAssertions.prototype.isNotUndefined=function(value,errorMessage){if(!value){throw new Error(errorMessage);}};CommonAssertions.prototype.isNotEmptyArray=function(array,errorMessage){if(array.length==0){throw new Error(errorMessage);}};CommonAssertions.prototype.isValidExpiration=function(expiration,errorMessage){if(Date.now()>expiration.mul(1000).toNumber()){throw new Error(errorMessage);}};CommonAssertions.prototype.isValidLength=function(arr,len,errorMessage){if(arr.length!==len){throw new Error(errorMessage);}};CommonAssertions.prototype.isEqualBigNumber=function(bigNumber1,bigNumber2,errorMessage){if(!bigNumber1.eq(bigNumber2)){throw new Error(errorMessage);}};CommonAssertions.prototype.isValidAddress=function(address,errorMessage){if(!address||typeof address!=='string'||address.length!==42){throw new Error(errorMessage);}};CommonAssertions.prototype.isEqualAddress=function(address1,address2,errorMessage){if(address1.toLowerCase()!==address2.toLowerCase()){throw new Error(errorMessage);}};CommonAssertions.prototype.isDifferentAddress=function(address1,address2,errorMessage){if(address1.toLowerCase()==address2.toLowerCase()){throw new Error(errorMessage);}};CommonAssertions.prototype.isSupportedChainId=function(chainId){var validChainIds=[1,137];if(!validChainIds.includes(chainId)){throw new Error('Unsupported chainId: '+chainId+'. Must be one of '+validChainIds);}};return CommonAssertions;}();exports.CommonAssertions=CommonAssertions;"]},"metadata":{},"sourceType":"script"}