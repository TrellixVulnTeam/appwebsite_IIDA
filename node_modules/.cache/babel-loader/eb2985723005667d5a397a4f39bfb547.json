{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/Balances/Provider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { bedTokenAddress, btc2xfliTokenAddress, daiTokenAddress, daiTokenPolygonAddress, dataTokenAddress, dataTokenPolygonAddress, dpiTokenAddress, dpiTokenPolygonAddress, wlkrTokenAddress, // added wlkr\nwlkrTokenPolygonAddress, // added wlkr\neth2xflipTokenAddress, eth2xfliTokenAddress, farmTwoAddress, gmiStakingRewardsAddress, gmiTokenAddress, gmiTokenPolygonAddress, iethflipTokenAddress, imaticflipTokenAddress, indexTokenAddress, matic2xflipTokenAddress, mviStakingRewardsAddress, mviTokenAddress, mviTokenPolygonAddress, stakingRewardsAddress, uniswapEthDpiLpTokenAddress, uniswapEthMviLpTokenAddress, usdcTokenAddress, usdcTokenPolygonAddress, wethTokenPolygonAddress } from 'constants/ethContractAddresses';\nimport useWallet from 'hooks/useWallet';\nimport { getEarnedIndexTokenQuantity as getEarnedFarmTwoBalance } from 'index-sdk/farmTwo';\nimport { getEarnedIndexTokenQuantity as getGmiRewardsBalance } from 'index-sdk/gmiStaking';\nimport { getEarnedIndexTokenQuantity as getMviRewardsBalance } from 'index-sdk/mviStaking';\nimport { getEarnedIndexTokenQuantity } from 'index-sdk/stake';\nimport BigNumber from 'utils/bignumber';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { getBalance, getBigNumBalance, getEthBalance } from 'utils/index';\nimport Context from './Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Provider = ({\n  children\n}) => {\n  _s();\n\n  const [ethBalance, setEthBalance] = useState();\n  const [indexBalance, setIndexBalance] = useState();\n  const [dpiBalance, setDpiBalance] = useState();\n  const [wlkrBalance, setWlkrBalance] = useState();\n  const [ethfliBalance, setEthFliBalance] = useState();\n  const [btcfliBalance, setBtcFliBalance] = useState();\n  const [mviBalance, setMviBalance] = useState();\n  const [daiBalance, setDaiBalance] = useState();\n  const [usdcBalance, setUsdcBalance] = useState();\n  const [bedBalance, setBedBalance] = useState();\n  const [dataBalance, setDataBalance] = useState();\n  const [gmiBalance, setGmiBalance] = useState(); // polygon balances\n\n  const [wethBalancePolygon, setWethBalancePolygon] = useState();\n  const [dpiBalancePolygon, setDpiBalancePolygon] = useState();\n  const [wlkrBalancePolygon, setWlkrBalancePolygon] = useState();\n  const [ethflipBalance, setEthFlipBalance] = useState();\n  const [mviBalancePolygon, setMviBalancePolygon] = useState();\n  const [daiBalancePolygon, setDaiBalancePolygon] = useState();\n  const [usdcBalancePolygon, setUsdcBalancePolygon] = useState();\n  const [dataBalancePolygon, setDataBalancePolygon] = useState();\n  const [gmiBalancePolygon, setGmiBalancePolygon] = useState();\n  const [iethFlipBalance, setIEthFlipBalance] = useState();\n  const [maticFlipBalancePolygon, setMaticFlipBalance] = useState();\n  const [imaticFlipBalancePolygon, setIMaticFlipBalance] = useState(); // LP Tokens Balances\n\n  const [uniswapEthDpiLpBalance, setUniswapEthDpiLpBalance] = useState();\n  const [uniswapEthMviLpBalance, setUniswapEthMviLpBalance] = useState(); // Legacy DPI LM Program\n\n  const [stakedUniswapEthDpiLpBalance, setStakedUniswapEthDpiLpBalance] = useState();\n  const [unharvestedIndexBalance, setUnharvestedIndexBalance] = useState(); // Current DPI LM Program\n\n  const [stakedFarmTwoBalance, setStakedFarmTwoBalance] = useState();\n  const [unharvestedFarmTwoBalance, setUnharvestedFarmTwoBalance] = useState(); // Current MVI LM Program\n\n  const [stakedUniswapEthMviLpBalance, setStakedUniswapEthMviLpBalance] = useState();\n  const [unharvestedMviRewardsBalance, setUnharvestedMviRewardsBalance] = useState(); // GMI Staking Program\n\n  const [stakedGmiBalance, setStakedGmiBalance] = useState();\n  const [unharvestedIndexFromGmiBalance, setUnharvestedIndexFromGmiBalance] = useState();\n  const {\n    account,\n    ethereum,\n    status,\n    chainId\n  } = useWallet();\n  const fetchBalances = useCallback(async (userAddress, provider) => {\n    if (!indexTokenAddress || !dpiTokenAddress || !dpiTokenPolygonAddress || !wlkrTokenAddress || !wlkrTokenPolygonAddress || !eth2xfliTokenAddress || !eth2xflipTokenAddress || !btc2xfliTokenAddress || !mviTokenAddress || !mviTokenPolygonAddress || !daiTokenAddress || !daiTokenPolygonAddress || !usdcTokenAddress || !usdcTokenPolygonAddress || !bedTokenAddress || !gmiTokenAddress || !dataTokenAddress || !dataTokenPolygonAddress || !gmiTokenPolygonAddress || !uniswapEthDpiLpTokenAddress || !uniswapEthMviLpTokenAddress || !stakingRewardsAddress || !gmiStakingRewardsAddress || !farmTwoAddress || !mviStakingRewardsAddress || !wethTokenPolygonAddress || !iethflipTokenAddress || !matic2xflipTokenAddress || !imaticflipTokenAddress) {\n      throw new Error('A token address is not defined. Please check your .env to confirm all token addresses are defined.');\n    }\n\n    if (chainId && chainId === MAINNET_CHAIN_DATA.chainId) {\n      const balances = await Promise.all([getEthBalance(provider, userAddress), getBalance(provider, indexTokenAddress, userAddress), getBalance(provider, dpiTokenAddress, userAddress), getBalance(provider, wlkrTokenAddress, userAddress), // Added WLKR\n      getBalance(provider, eth2xfliTokenAddress, userAddress), getBalance(provider, btc2xfliTokenAddress, userAddress), getBalance(provider, mviTokenAddress, userAddress), getBalance(provider, daiTokenAddress, userAddress), getBalance(provider, usdcTokenAddress, userAddress), getBalance(provider, bedTokenAddress, userAddress), getBalance(provider, dataTokenAddress, userAddress), getBalance(provider, gmiTokenAddress, userAddress), // LP Token Balances\n      getBalance(provider, uniswapEthDpiLpTokenAddress, userAddress), getBalance(provider, uniswapEthMviLpTokenAddress, userAddress), // Legacy DPI LM Program Balances\n      getBalance(provider, stakingRewardsAddress, userAddress), getEarnedIndexTokenQuantity(provider, userAddress), // Current DPI LM Program Balances\n      getBalance(provider, farmTwoAddress, userAddress), getEarnedFarmTwoBalance(provider, userAddress), // GMI staking Balances\n      getBalance(provider, gmiStakingRewardsAddress, userAddress), getGmiRewardsBalance(provider, userAddress)]); // Current MVI LM Program Balances\n\n      const balances2 = await Promise.all([getBigNumBalance(provider, mviStakingRewardsAddress, userAddress), getMviRewardsBalance(provider, userAddress)]); // mainnet\n\n      setEthBalance(new BigNumber(balances[0]));\n      setIndexBalance(new BigNumber(balances[1]));\n      setDpiBalance(new BigNumber(balances[2]));\n      setWlkrBalance(new BigNumber(balances[3])); // Added WLKR\n\n      setEthFliBalance(new BigNumber(balances[4]));\n      setBtcFliBalance(new BigNumber(balances[5]));\n      setMviBalance(new BigNumber(balances[6]));\n      setDaiBalance(new BigNumber(balances[7]));\n      setUsdcBalance(new BigNumber(balances[8]));\n      setBedBalance(new BigNumber(balances[9]));\n      setDataBalance(new BigNumber(balances[10]));\n      setGmiBalance(new BigNumber(balances[11]));\n      setUniswapEthDpiLpBalance(new BigNumber(balances[12]));\n      setUniswapEthMviLpBalance(new BigNumber(balances[13]));\n      setStakedUniswapEthDpiLpBalance(new BigNumber(balances[14]));\n      setUnharvestedIndexBalance(new BigNumber(balances[15]));\n      setStakedFarmTwoBalance(new BigNumber(balances[16]));\n      setUnharvestedFarmTwoBalance(new BigNumber(balances[17]));\n      setStakedGmiBalance(new BigNumber(balances[18]));\n      setUnharvestedIndexFromGmiBalance(new BigNumber(balances[19])); // BN Balances\n\n      setStakedUniswapEthMviLpBalance(balances2[0]);\n      setUnharvestedMviRewardsBalance(balances2[1]);\n    } else if (chainId && chainId === POLYGON_CHAIN_DATA.chainId) {\n      const balances = await Promise.all([//polygon\n      getBalance(provider, wethTokenPolygonAddress, userAddress), getBalance(provider, dpiTokenPolygonAddress, userAddress), getBalance(provider, wlkrTokenPolygonAddress, userAddress), // Added WLKR\n      getBalance(provider, eth2xflipTokenAddress, userAddress), getBalance(provider, mviTokenPolygonAddress, userAddress), getBalance(provider, daiTokenPolygonAddress, userAddress), getBalance(provider, usdcTokenPolygonAddress, userAddress), getBalance(provider, dataTokenPolygonAddress, userAddress), getBalance(provider, gmiTokenPolygonAddress, userAddress), getBalance(provider, iethflipTokenAddress, userAddress), getBalance(provider, imaticflipTokenAddress, userAddress), getBalance(provider, matic2xflipTokenAddress, userAddress)]); // polygon\n\n      setWethBalancePolygon(new BigNumber(balances[0]));\n      setDpiBalancePolygon(new BigNumber(balances[1]));\n      setWlkrBalancePolygon(new BigNumber(balances[2]));\n      setEthFlipBalance(new BigNumber(balances[3]));\n      setMviBalancePolygon(new BigNumber(balances[4]));\n      setDaiBalancePolygon(new BigNumber(balances[5]));\n      setUsdcBalancePolygon(new BigNumber(balances[6]));\n      setDataBalancePolygon(new BigNumber(balances[7]));\n      setGmiBalancePolygon(new BigNumber(balances[8]));\n      setIEthFlipBalance(new BigNumber(balances[9]));\n      setIMaticFlipBalance(new BigNumber(balances[10]));\n      setMaticFlipBalance(new BigNumber(balances[11]));\n    }\n  }, [chainId, setEthBalance, setWethBalancePolygon, setIndexBalance, setDpiBalance, setWlkrBalance, setEthFliBalance, setEthFlipBalance, setBtcFliBalance, setMviBalance, setBedBalance, setGmiBalance, setDataBalance, setDataBalancePolygon, setGmiBalancePolygon, setUniswapEthDpiLpBalance, setUniswapEthMviLpBalance, setStakedUniswapEthDpiLpBalance, setUnharvestedIndexBalance, setStakedFarmTwoBalance, setUnharvestedFarmTwoBalance, setStakedUniswapEthMviLpBalance, setUnharvestedMviRewardsBalance, setStakedGmiBalance, setUnharvestedIndexFromGmiBalance, setMaticFlipBalance, setIMaticFlipBalance, setIEthFlipBalance]);\n  useEffect(() => {\n    if (status !== 'connected') {\n      setEthBalance(new BigNumber(0));\n      setWethBalancePolygon(new BigNumber(0));\n      setIndexBalance(new BigNumber(0));\n      setDpiBalance(new BigNumber(0));\n      setDpiBalancePolygon(new BigNumber(0));\n      setWlkrBalance(new BigNumber(0));\n      setWlkrBalancePolygon(new BigNumber(0));\n      setEthFliBalance(new BigNumber(0));\n      setEthFlipBalance(new BigNumber(0));\n      setBtcFliBalance(new BigNumber(0));\n      setMviBalance(new BigNumber(0));\n      setMviBalancePolygon(new BigNumber(0));\n      setBedBalance(new BigNumber(0));\n      setGmiBalance(new BigNumber(0));\n      setDaiBalance(new BigNumber(0));\n      setDaiBalancePolygon(new BigNumber(0));\n      setUsdcBalance(new BigNumber(0));\n      setUsdcBalancePolygon(new BigNumber(0));\n      setUniswapEthDpiLpBalance(new BigNumber(0));\n      setUniswapEthMviLpBalance(new BigNumber(0));\n      setStakedUniswapEthDpiLpBalance(new BigNumber(0));\n      setUnharvestedIndexBalance(new BigNumber(0));\n      setStakedFarmTwoBalance(new BigNumber(0));\n      setUnharvestedFarmTwoBalance(new BigNumber(0));\n      setStakedUniswapEthMviLpBalance(new BigNumber(0));\n      setUnharvestedMviRewardsBalance(new BigNumber(0));\n      setDataBalance(new BigNumber(0));\n      setDataBalancePolygon(new BigNumber(0));\n      setStakedGmiBalance(new BigNumber(0));\n      setUnharvestedIndexFromGmiBalance(new BigNumber(0));\n      setGmiBalancePolygon(new BigNumber(0));\n      setMaticFlipBalance(new BigNumber(0));\n      setIMaticFlipBalance(new BigNumber(0));\n      setIEthFlipBalance(new BigNumber(0));\n    }\n  }, [status]);\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum);\n      let refreshInterval = setInterval(() => fetchBalances(account, ethereum), 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [account, ethereum, fetchBalances]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      ethBalance,\n      wethBalancePolygon,\n      indexBalance,\n      dpiBalance,\n      dpiBalancePolygon,\n      wlkrBalance,\n      wlkrBalancePolygon,\n      ethfliBalance,\n      ethflipBalance,\n      btcfliBalance,\n      mviBalance,\n      mviBalancePolygon,\n      daiBalance,\n      daiBalancePolygon,\n      usdcBalance,\n      usdcBalancePolygon,\n      bedBalance,\n      gmiBalance,\n      dataBalance,\n      dataBalancePolygon,\n      uniswapEthDpiLpBalance,\n      uniswapEthMviLpBalance,\n      stakedUniswapEthDpiLpBalance,\n      unharvestedIndexBalance,\n      stakedFarmTwoBalance,\n      unharvestedFarmTwoBalance,\n      stakedUniswapEthMviLpBalance,\n      unharvestedMviRewardsBalance,\n      stakedGmiBalance,\n      unharvestedIndexFromGmiBalance,\n      gmiBalancePolygon,\n      maticFlipBalancePolygon,\n      imaticFlipBalancePolygon,\n      iethFlipBalance\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Provider, \"rx85n6bGqbtJV/b+CpZsnii3AuA=\", false, function () {\n  return [useWallet];\n});\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/Balances/Provider.tsx"],"names":["React","useCallback","useEffect","useState","bedTokenAddress","btc2xfliTokenAddress","daiTokenAddress","daiTokenPolygonAddress","dataTokenAddress","dataTokenPolygonAddress","dpiTokenAddress","dpiTokenPolygonAddress","wlkrTokenAddress","wlkrTokenPolygonAddress","eth2xflipTokenAddress","eth2xfliTokenAddress","farmTwoAddress","gmiStakingRewardsAddress","gmiTokenAddress","gmiTokenPolygonAddress","iethflipTokenAddress","imaticflipTokenAddress","indexTokenAddress","matic2xflipTokenAddress","mviStakingRewardsAddress","mviTokenAddress","mviTokenPolygonAddress","stakingRewardsAddress","uniswapEthDpiLpTokenAddress","uniswapEthMviLpTokenAddress","usdcTokenAddress","usdcTokenPolygonAddress","wethTokenPolygonAddress","useWallet","getEarnedIndexTokenQuantity","getEarnedFarmTwoBalance","getGmiRewardsBalance","getMviRewardsBalance","BigNumber","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","getBalance","getBigNumBalance","getEthBalance","Context","Provider","children","ethBalance","setEthBalance","indexBalance","setIndexBalance","dpiBalance","setDpiBalance","wlkrBalance","setWlkrBalance","ethfliBalance","setEthFliBalance","btcfliBalance","setBtcFliBalance","mviBalance","setMviBalance","daiBalance","setDaiBalance","usdcBalance","setUsdcBalance","bedBalance","setBedBalance","dataBalance","setDataBalance","gmiBalance","setGmiBalance","wethBalancePolygon","setWethBalancePolygon","dpiBalancePolygon","setDpiBalancePolygon","wlkrBalancePolygon","setWlkrBalancePolygon","ethflipBalance","setEthFlipBalance","mviBalancePolygon","setMviBalancePolygon","daiBalancePolygon","setDaiBalancePolygon","usdcBalancePolygon","setUsdcBalancePolygon","dataBalancePolygon","setDataBalancePolygon","gmiBalancePolygon","setGmiBalancePolygon","iethFlipBalance","setIEthFlipBalance","maticFlipBalancePolygon","setMaticFlipBalance","imaticFlipBalancePolygon","setIMaticFlipBalance","uniswapEthDpiLpBalance","setUniswapEthDpiLpBalance","uniswapEthMviLpBalance","setUniswapEthMviLpBalance","stakedUniswapEthDpiLpBalance","setStakedUniswapEthDpiLpBalance","unharvestedIndexBalance","setUnharvestedIndexBalance","stakedFarmTwoBalance","setStakedFarmTwoBalance","unharvestedFarmTwoBalance","setUnharvestedFarmTwoBalance","stakedUniswapEthMviLpBalance","setStakedUniswapEthMviLpBalance","unharvestedMviRewardsBalance","setUnharvestedMviRewardsBalance","stakedGmiBalance","setStakedGmiBalance","unharvestedIndexFromGmiBalance","setUnharvestedIndexFromGmiBalance","account","ethereum","status","chainId","fetchBalances","userAddress","provider","Error","balances","Promise","all","balances2","refreshInterval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport { provider } from 'web3-core'\n\nimport {\n  bedTokenAddress,\n  btc2xfliTokenAddress,\n  daiTokenAddress,\n  daiTokenPolygonAddress,\n  dataTokenAddress,\n  dataTokenPolygonAddress,\n  dpiTokenAddress,\n  dpiTokenPolygonAddress,\n  wlkrTokenAddress, // added wlkr\n  wlkrTokenPolygonAddress, // added wlkr\n  eth2xflipTokenAddress,\n  eth2xfliTokenAddress,\n  farmTwoAddress,\n  gmiStakingRewardsAddress,\n  gmiTokenAddress,\n  gmiTokenPolygonAddress,\n  iethflipTokenAddress,\n  imaticflipTokenAddress,\n  indexTokenAddress,\n  matic2xflipTokenAddress,\n  mviStakingRewardsAddress,\n  mviTokenAddress,\n  mviTokenPolygonAddress,\n  stakingRewardsAddress,\n  uniswapEthDpiLpTokenAddress,\n  uniswapEthMviLpTokenAddress,\n  usdcTokenAddress,\n  usdcTokenPolygonAddress,\n  wethTokenPolygonAddress,\n} from 'constants/ethContractAddresses'\nimport useWallet from 'hooks/useWallet'\nimport { getEarnedIndexTokenQuantity as getEarnedFarmTwoBalance } from 'index-sdk/farmTwo'\nimport { getEarnedIndexTokenQuantity as getGmiRewardsBalance } from 'index-sdk/gmiStaking'\nimport { getEarnedIndexTokenQuantity as getMviRewardsBalance } from 'index-sdk/mviStaking'\nimport { getEarnedIndexTokenQuantity } from 'index-sdk/stake'\nimport BigNumber from 'utils/bignumber'\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors'\nimport { getBalance, getBigNumBalance, getEthBalance } from 'utils/index'\n\nimport Context from './Context'\n\nconst Provider: React.FC = ({ children }) => {\n  const [ethBalance, setEthBalance] = useState<BigNumber>()\n  const [indexBalance, setIndexBalance] = useState<BigNumber>()\n  const [dpiBalance, setDpiBalance] = useState<BigNumber>()\n  const [wlkrBalance, setWlkrBalance] = useState<BigNumber>()\n  const [ethfliBalance, setEthFliBalance] = useState<BigNumber>()\n  const [btcfliBalance, setBtcFliBalance] = useState<BigNumber>()\n  const [mviBalance, setMviBalance] = useState<BigNumber>()\n  const [daiBalance, setDaiBalance] = useState<BigNumber>()\n  const [usdcBalance, setUsdcBalance] = useState<BigNumber>()\n  const [bedBalance, setBedBalance] = useState<BigNumber>()\n  const [dataBalance, setDataBalance] = useState<BigNumber>()\n  const [gmiBalance, setGmiBalance] = useState<BigNumber>()\n\n  // polygon balances\n  const [wethBalancePolygon, setWethBalancePolygon] = useState<BigNumber>()\n  const [dpiBalancePolygon, setDpiBalancePolygon] = useState<BigNumber>()\n  const [wlkrBalancePolygon, setWlkrBalancePolygon] = useState<BigNumber>()\n  const [ethflipBalance, setEthFlipBalance] = useState<BigNumber>()\n  const [mviBalancePolygon, setMviBalancePolygon] = useState<BigNumber>()\n  const [daiBalancePolygon, setDaiBalancePolygon] = useState<BigNumber>()\n  const [usdcBalancePolygon, setUsdcBalancePolygon] = useState<BigNumber>()\n  const [dataBalancePolygon, setDataBalancePolygon] = useState<BigNumber>()\n  const [gmiBalancePolygon, setGmiBalancePolygon] = useState<BigNumber>()\n  const [iethFlipBalance, setIEthFlipBalance] = useState<BigNumber>()\n  const [maticFlipBalancePolygon, setMaticFlipBalance] = useState<BigNumber>()\n  const [imaticFlipBalancePolygon, setIMaticFlipBalance] = useState<BigNumber>()\n\n  // LP Tokens Balances\n  const [uniswapEthDpiLpBalance, setUniswapEthDpiLpBalance] =\n    useState<BigNumber>()\n  const [uniswapEthMviLpBalance, setUniswapEthMviLpBalance] =\n    useState<BigNumber>()\n\n  // Legacy DPI LM Program\n  const [stakedUniswapEthDpiLpBalance, setStakedUniswapEthDpiLpBalance] =\n    useState<BigNumber>()\n  const [unharvestedIndexBalance, setUnharvestedIndexBalance] =\n    useState<BigNumber>()\n\n  // Current DPI LM Program\n  const [stakedFarmTwoBalance, setStakedFarmTwoBalance] = useState<BigNumber>()\n  const [unharvestedFarmTwoBalance, setUnharvestedFarmTwoBalance] =\n    useState<BigNumber>()\n\n  // Current MVI LM Program\n  const [stakedUniswapEthMviLpBalance, setStakedUniswapEthMviLpBalance] =\n    useState<BigNumber>()\n  const [unharvestedMviRewardsBalance, setUnharvestedMviRewardsBalance] =\n    useState<BigNumber>()\n\n  // GMI Staking Program\n  const [stakedGmiBalance, setStakedGmiBalance] = useState<BigNumber>()\n  const [unharvestedIndexFromGmiBalance, setUnharvestedIndexFromGmiBalance] =\n    useState<BigNumber>()\n\n  const { account, ethereum, status, chainId } = useWallet()\n\n  const fetchBalances = useCallback(\n    async (userAddress: string, provider: provider) => {\n      if (\n        !indexTokenAddress ||\n        !dpiTokenAddress ||\n        !dpiTokenPolygonAddress ||\n        !wlkrTokenAddress ||\n        !wlkrTokenPolygonAddress ||\n        !eth2xfliTokenAddress ||\n        !eth2xflipTokenAddress ||\n        !btc2xfliTokenAddress ||\n        !mviTokenAddress ||\n        !mviTokenPolygonAddress ||\n        !daiTokenAddress ||\n        !daiTokenPolygonAddress ||\n        !usdcTokenAddress ||\n        !usdcTokenPolygonAddress ||\n        !bedTokenAddress ||\n        !gmiTokenAddress ||\n        !dataTokenAddress ||\n        !dataTokenPolygonAddress ||\n        !gmiTokenPolygonAddress ||\n        !uniswapEthDpiLpTokenAddress ||\n        !uniswapEthMviLpTokenAddress ||\n        !stakingRewardsAddress ||\n        !gmiStakingRewardsAddress ||\n        !farmTwoAddress ||\n        !mviStakingRewardsAddress ||\n        !wethTokenPolygonAddress ||\n        !iethflipTokenAddress ||\n        !matic2xflipTokenAddress ||\n        !imaticflipTokenAddress\n      ) {\n        throw new Error(\n          'A token address is not defined. Please check your .env to confirm all token addresses are defined.'\n        )\n      }\n      if (chainId && chainId === MAINNET_CHAIN_DATA.chainId) {\n        const balances = await Promise.all([\n          getEthBalance(provider, userAddress),\n          getBalance(provider, indexTokenAddress, userAddress),\n          getBalance(provider, dpiTokenAddress, userAddress),\n          getBalance(provider, wlkrTokenAddress, userAddress), // Added WLKR\n          getBalance(provider, eth2xfliTokenAddress, userAddress),\n          getBalance(provider, btc2xfliTokenAddress, userAddress),\n          getBalance(provider, mviTokenAddress, userAddress),\n          getBalance(provider, daiTokenAddress, userAddress),\n          getBalance(provider, usdcTokenAddress, userAddress),\n          getBalance(provider, bedTokenAddress, userAddress),\n          getBalance(provider, dataTokenAddress, userAddress),\n          getBalance(provider, gmiTokenAddress, userAddress),\n\n          // LP Token Balances\n          getBalance(provider, uniswapEthDpiLpTokenAddress, userAddress),\n          getBalance(provider, uniswapEthMviLpTokenAddress, userAddress),\n\n          // Legacy DPI LM Program Balances\n          getBalance(provider, stakingRewardsAddress, userAddress),\n          getEarnedIndexTokenQuantity(provider, userAddress),\n\n          // Current DPI LM Program Balances\n          getBalance(provider, farmTwoAddress, userAddress),\n          getEarnedFarmTwoBalance(provider, userAddress),\n\n          // GMI staking Balances\n          getBalance(provider, gmiStakingRewardsAddress, userAddress),\n          getGmiRewardsBalance(provider, userAddress),\n        ])\n        // Current MVI LM Program Balances\n        const balances2 = await Promise.all([\n          getBigNumBalance(provider, mviStakingRewardsAddress, userAddress),\n          getMviRewardsBalance(provider, userAddress),\n        ])\n\n        // mainnet\n        setEthBalance(new BigNumber(balances[0]))\n        setIndexBalance(new BigNumber(balances[1]))\n        setDpiBalance(new BigNumber(balances[2]))\n        setWlkrBalance(new BigNumber(balances[3])) // Added WLKR\n        setEthFliBalance(new BigNumber(balances[4]))\n        setBtcFliBalance(new BigNumber(balances[5]))\n        setMviBalance(new BigNumber(balances[6]))\n        setDaiBalance(new BigNumber(balances[7]))\n        setUsdcBalance(new BigNumber(balances[8]))\n        setBedBalance(new BigNumber(balances[9]))\n        setDataBalance(new BigNumber(balances[10]))\n        setGmiBalance(new BigNumber(balances[11]))\n        setUniswapEthDpiLpBalance(new BigNumber(balances[12]))\n        setUniswapEthMviLpBalance(new BigNumber(balances[13]))\n        setStakedUniswapEthDpiLpBalance(new BigNumber(balances[14]))\n        setUnharvestedIndexBalance(new BigNumber(balances[15]))\n        setStakedFarmTwoBalance(new BigNumber(balances[16]))\n        setUnharvestedFarmTwoBalance(new BigNumber(balances[17]))\n\n        setStakedGmiBalance(new BigNumber(balances[18]))\n        setUnharvestedIndexFromGmiBalance(new BigNumber(balances[19]))\n\n\n        // BN Balances\n        setStakedUniswapEthMviLpBalance(balances2[0])\n        setUnharvestedMviRewardsBalance(balances2[1])\n      } else if (chainId && chainId === POLYGON_CHAIN_DATA.chainId) {\n        const balances = await Promise.all([\n          //polygon\n          getBalance(provider, wethTokenPolygonAddress, userAddress),\n          getBalance(provider, dpiTokenPolygonAddress, userAddress),\n          getBalance(provider, wlkrTokenPolygonAddress, userAddress), // Added WLKR\n          getBalance(provider, eth2xflipTokenAddress, userAddress),\n          getBalance(provider, mviTokenPolygonAddress, userAddress),\n          getBalance(provider, daiTokenPolygonAddress, userAddress),\n          getBalance(provider, usdcTokenPolygonAddress, userAddress),\n          getBalance(provider, dataTokenPolygonAddress, userAddress),\n          getBalance(provider, gmiTokenPolygonAddress, userAddress),\n          getBalance(provider, iethflipTokenAddress, userAddress),\n          getBalance(provider, imaticflipTokenAddress, userAddress),\n          getBalance(provider, matic2xflipTokenAddress, userAddress),\n        ])\n\n        // polygon\n        setWethBalancePolygon(new BigNumber(balances[0]))\n        setDpiBalancePolygon(new BigNumber(balances[1]))\n        setWlkrBalancePolygon(new BigNumber(balances[2]))\n        setEthFlipBalance(new BigNumber(balances[3]))\n        setMviBalancePolygon(new BigNumber(balances[4]))\n        setDaiBalancePolygon(new BigNumber(balances[5]))\n        setUsdcBalancePolygon(new BigNumber(balances[6]))\n        setDataBalancePolygon(new BigNumber(balances[7]))\n        setGmiBalancePolygon(new BigNumber(balances[8]))\n        setIEthFlipBalance(new BigNumber(balances[9]))\n        setIMaticFlipBalance(new BigNumber(balances[10]))\n        setMaticFlipBalance(new BigNumber(balances[11]))\n      }\n    },\n    [\n      chainId,\n      setEthBalance,\n      setWethBalancePolygon,\n      setIndexBalance,\n      setDpiBalance,\n      setWlkrBalance,\n      setEthFliBalance,\n      setEthFlipBalance,\n      setBtcFliBalance,\n      setMviBalance,\n      setBedBalance,\n      setGmiBalance,\n      setDataBalance,\n      setDataBalancePolygon,\n      setGmiBalancePolygon,\n      setUniswapEthDpiLpBalance,\n      setUniswapEthMviLpBalance,\n      setStakedUniswapEthDpiLpBalance,\n      setUnharvestedIndexBalance,\n      setStakedFarmTwoBalance,\n      setUnharvestedFarmTwoBalance,\n      setStakedUniswapEthMviLpBalance,\n      setUnharvestedMviRewardsBalance,\n      setStakedGmiBalance,\n      setUnharvestedIndexFromGmiBalance,\n      setMaticFlipBalance,\n      setIMaticFlipBalance,\n      setIEthFlipBalance,\n    ]\n  )\n\n  useEffect(() => {\n    if (status !== 'connected') {\n      setEthBalance(new BigNumber(0))\n      setWethBalancePolygon(new BigNumber(0))\n      setIndexBalance(new BigNumber(0))\n      setDpiBalance(new BigNumber(0))\n      setDpiBalancePolygon(new BigNumber(0))\n      setWlkrBalance(new BigNumber(0))\n      setWlkrBalancePolygon(new BigNumber(0))\n      setEthFliBalance(new BigNumber(0))\n      setEthFlipBalance(new BigNumber(0))\n      setBtcFliBalance(new BigNumber(0))\n      setMviBalance(new BigNumber(0))\n      setMviBalancePolygon(new BigNumber(0))\n      setBedBalance(new BigNumber(0))\n      setGmiBalance(new BigNumber(0))\n      setDaiBalance(new BigNumber(0))\n      setDaiBalancePolygon(new BigNumber(0))\n      setUsdcBalance(new BigNumber(0))\n      setUsdcBalancePolygon(new BigNumber(0))\n      setUniswapEthDpiLpBalance(new BigNumber(0))\n      setUniswapEthMviLpBalance(new BigNumber(0))\n      setStakedUniswapEthDpiLpBalance(new BigNumber(0))\n      setUnharvestedIndexBalance(new BigNumber(0))\n      setStakedFarmTwoBalance(new BigNumber(0))\n      setUnharvestedFarmTwoBalance(new BigNumber(0))\n      setStakedUniswapEthMviLpBalance(new BigNumber(0))\n      setUnharvestedMviRewardsBalance(new BigNumber(0))\n      setDataBalance(new BigNumber(0))\n      setDataBalancePolygon(new BigNumber(0))\n      setStakedGmiBalance(new BigNumber(0))\n      setUnharvestedIndexFromGmiBalance(new BigNumber(0))\n      setGmiBalancePolygon(new BigNumber(0))\n      setMaticFlipBalance(new BigNumber(0))\n      setIMaticFlipBalance(new BigNumber(0))\n      setIEthFlipBalance(new BigNumber(0))\n    }\n  }, [status])\n\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum)\n      let refreshInterval = setInterval(\n        () => fetchBalances(account, ethereum),\n        10000\n      )\n      return () => clearInterval(refreshInterval)\n    }\n  }, [account, ethereum, fetchBalances])\n\n  return (\n    <Context.Provider\n      value={{\n        ethBalance,\n        wethBalancePolygon,\n        indexBalance,\n        dpiBalance,\n        dpiBalancePolygon,\n        wlkrBalance,\n        wlkrBalancePolygon,\n        ethfliBalance,\n        ethflipBalance,\n        btcfliBalance,\n        mviBalance,\n        mviBalancePolygon,\n        daiBalance,\n        daiBalancePolygon,\n        usdcBalance,\n        usdcBalancePolygon,\n        bedBalance,\n        gmiBalance,\n        dataBalance,\n        dataBalancePolygon,\n        uniswapEthDpiLpBalance,\n        uniswapEthMviLpBalance,\n        stakedUniswapEthDpiLpBalance,\n        unharvestedIndexBalance,\n        stakedFarmTwoBalance,\n        unharvestedFarmTwoBalance,\n        stakedUniswapEthMviLpBalance,\n        unharvestedMviRewardsBalance,\n        stakedGmiBalance,\n        unharvestedIndexFromGmiBalance,\n        gmiBalancePolygon,\n        maticFlipBalancePolygon,\n        imaticFlipBalancePolygon,\n        iethFlipBalance,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default Provider\n"]},"metadata":{},"sourceType":"module"}