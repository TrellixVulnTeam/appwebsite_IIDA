{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/index-ui-master/src/contexts/ChainData/ChainDataProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport useWallet from 'hooks/useWallet';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { ChainDataContext } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChainIdProvider = ({\n  children\n}) => {\n  _s();\n\n  const [chain, setChain] = useState(MAINNET_CHAIN_DATA);\n  const {\n    account,\n    ethereum,\n    isMetamaskConnected\n  } = useWallet();\n\n  const setMainnet = () => {\n    setChain(MAINNET_CHAIN_DATA);\n    if (isMetamaskConnected) ethereum === null || ethereum === void 0 ? void 0 : ethereum.send('wallet_switchEthereumChain', [{\n      chainId: '0x1'\n    }, account]);\n  };\n\n  const setPolygon = () => {\n    setChain(POLYGON_CHAIN_DATA);\n    if (isMetamaskConnected) ethereum === null || ethereum === void 0 ? void 0 : ethereum.send('wallet_addEthereumChain', [{\n      chainId: '0x89',\n      chainName: 'Polygon',\n      nativeCurrency: {\n        name: 'Matic',\n        symbol: 'MATIC',\n        decimals: 18\n      },\n      rpcUrls: ['https://rpc-mainnet.maticvigil.com'],\n      blockExplorerUrls: ['https://polygonscan.com/']\n    }, account]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChainDataContext.Provider, {\n    value: {\n      chain,\n      setMainnet,\n      setPolygon\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChainIdProvider, \"Jgn6gGyrSSLtzi/h037mXDuah8o=\", false, function () {\n  return [useWallet];\n});\n\n_c = ChainIdProvider;\nexport default ChainIdProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChainIdProvider\");","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/contexts/ChainData/ChainDataProvider.tsx"],"names":["React","useState","useWallet","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","ChainDataContext","ChainIdProvider","children","chain","setChain","account","ethereum","isMetamaskConnected","setMainnet","send","chainId","setPolygon","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAEEC,kBAFF,EAGEC,kBAHF,QAIO,kBAJP;AAMA,SAASC,gBAAT,QAAiC,GAAjC;;;AAEA,MAAMC,eAAyB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAClD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAYE,kBAAZ,CAAlC;AACA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,MAA6CV,SAAS,EAA5D;;AAEA,QAAMW,UAAU,GAAG,MAAM;AACvBJ,IAAAA,QAAQ,CAACN,kBAAD,CAAR;AACA,QAAIS,mBAAJ,EACED,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,IAAV,CAAe,4BAAf,EAA6C,CAC3C;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAD2C,EAE3CL,OAF2C,CAA7C;AAIH,GAPD;;AASA,QAAMM,UAAU,GAAG,MAAM;AACvBP,IAAAA,QAAQ,CAACL,kBAAD,CAAR;AACA,QAAIQ,mBAAJ,EACED,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,IAAV,CAAe,yBAAf,EAA0C,CACxC;AACEC,MAAAA,OAAO,EAAE,MADX;AAEEE,MAAAA,SAAS,EAAE,SAFb;AAGEC,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAE,OADQ;AAEdC,QAAAA,MAAM,EAAE,OAFM;AAGdC,QAAAA,QAAQ,EAAE;AAHI,OAHlB;AAQEC,MAAAA,OAAO,EAAE,CAAC,oCAAD,CARX;AASEC,MAAAA,iBAAiB,EAAE,CAAC,0BAAD;AATrB,KADwC,EAYxCb,OAZwC,CAA1C;AAcH,GAjBD;;AAmBA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,KADK;AAELK,MAAAA,UAFK;AAGLG,MAAAA;AAHK,KADT;AAAA,cAOGT;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA3CD;;GAAMD,e;UAE+CJ,S;;;KAF/CI,e;AA6CN,eAAeA,eAAf","sourcesContent":["import React, { useState } from 'react'\n\nimport useWallet from 'hooks/useWallet'\nimport {\n  ChainData,\n  MAINNET_CHAIN_DATA,\n  POLYGON_CHAIN_DATA,\n} from 'utils/connectors'\n\nimport { ChainDataContext } from '.'\n\nconst ChainIdProvider: React.FC = ({ children }) => {\n  const [chain, setChain] = useState<ChainData>(MAINNET_CHAIN_DATA)\n  const { account, ethereum, isMetamaskConnected } = useWallet()\n\n  const setMainnet = () => {\n    setChain(MAINNET_CHAIN_DATA)\n    if (isMetamaskConnected)\n      ethereum?.send('wallet_switchEthereumChain', [\n        { chainId: '0x1' },\n        account,\n      ])\n  }\n\n  const setPolygon = () => {\n    setChain(POLYGON_CHAIN_DATA)\n    if (isMetamaskConnected)\n      ethereum?.send('wallet_addEthereumChain', [\n        {\n          chainId: '0x89',\n          chainName: 'Polygon',\n          nativeCurrency: {\n            name: 'Matic',\n            symbol: 'MATIC',\n            decimals: 18,\n          },\n          rpcUrls: ['https://rpc-mainnet.maticvigil.com'],\n          blockExplorerUrls: ['https://polygonscan.com/'],\n        },\n        account,\n      ])\n  }\n\n  return (\n    <ChainDataContext.Provider\n      value={{\n        chain,\n        setMainnet,\n        setPolygon,\n      }}\n    >\n      {children}\n    </ChainDataContext.Provider>\n  )\n}\n\nexport default ChainIdProvider\n"]},"metadata":{},"sourceType":"module"}