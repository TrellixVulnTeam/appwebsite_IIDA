{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/TokenSupply/TokenSupplyProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { bedTokenAddress, btc2xfliTokenAddress, dataTokenAddress, dpiTokenAddress, dpiTokenPolygonAddress, wlkrTokenAddress, eth2xflipTokenAddress, eth2xfliTokenAddress, gmiTokenAddress, iethflipTokenAddress, imaticflipTokenAddress, matic2xflipTokenAddress, mviTokenAddress, mviTokenPolygonAddress } from 'constants/ethContractAddresses';\nimport useWallet from 'hooks/useWallet';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { getTokenSupply } from 'utils/setjsApi';\nimport TokenSupplyContext from './TokenSupplyContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenSupplyProvider = ({\n  children\n}) => {\n  _s();\n\n  const [dpiTotalSupply, setDpiTotalSupply] = useState();\n  const [wlkrTotalSupply, setWlkrTotalSupply] = useState();\n  const [mviTotalSupply, setMviTotalSupply] = useState();\n  const [bedTotalSupply, setBedTotalSupply] = useState();\n  const [gmiTotalSupply, setGmiTotalSupply] = useState();\n  const [eth2xfliTotalSupply, setEth2xfliTotalSupply] = useState();\n  const [eth2xflipTotalSupply, setEth2xflipTotalSupply] = useState();\n  const [btc2xfliTotalSupply, setBtc2xfliTotalSupply] = useState();\n  const [dataTotalSupply, setDataTotalSupply] = useState();\n  const [matic2xflipTotalSupply, setMatic2xflipTotalSupply] = useState();\n  const [iethflipTotalSupply, setiEthflipTotalSupply] = useState();\n  const [imaticflipTotalSupply, setiMaticflipTotalSupply] = useState();\n  const {\n    ethereum: provider,\n    chainId\n  } = useWallet();\n  useEffect(() => {\n    //mainnet\n    if (chainId && chainId === MAINNET_CHAIN_DATA.chainId && provider && dpiTokenAddress && wlkrTokenAddress && mviTokenAddress && bedTokenAddress && gmiTokenAddress && eth2xfliTokenAddress && btc2xfliTokenAddress && dataTokenAddress) {\n      getTokenSupply(provider, [dpiTokenAddress, wlkrTokenAddress, mviTokenAddress, bedTokenAddress, gmiTokenAddress, eth2xfliTokenAddress, btc2xfliTokenAddress, dataTokenAddress], chainId).then(result => {\n        const [dpiResult, mviResult, bedResult, gmiResult, eth2xFliResult, btc2xFliResult, dataResult] = result;\n        setDpiTotalSupply(new BigNumber(dpiResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setMviTotalSupply(new BigNumber(mviResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setBedTotalSupply(new BigNumber(bedResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setGmiTotalSupply(new BigNumber(gmiResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setEth2xfliTotalSupply(new BigNumber(eth2xFliResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setEth2xflipTotalSupply(undefined);\n        setBtc2xfliTotalSupply(new BigNumber(btc2xFliResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setDataTotalSupply(new BigNumber(dataResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n      }).catch(error => console.error(error));\n    } else if (chainId && chainId === POLYGON_CHAIN_DATA.chainId && provider && dpiTokenPolygonAddress && mviTokenPolygonAddress && eth2xflipTokenAddress && iethflipTokenAddress && matic2xflipTokenAddress && imaticflipTokenAddress) {\n      getTokenSupply(provider, [dpiTokenPolygonAddress, mviTokenPolygonAddress, eth2xflipTokenAddress, iethflipTokenAddress, imaticflipTokenAddress, matic2xflipTokenAddress], chainId).then(result => {\n        const [dpiResult, mviResult, eth2xFLIPResult, iethFLIPResult, imaticFLIPResult, matic2xFLIPResult] = result;\n        setDpiTotalSupply(new BigNumber(dpiResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setMviTotalSupply(new BigNumber(mviResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setEth2xflipTotalSupply(new BigNumber(eth2xFLIPResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setiEthflipTotalSupply(new BigNumber(iethFLIPResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setMatic2xflipTotalSupply(new BigNumber(matic2xFLIPResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setiMaticflipTotalSupply(new BigNumber(imaticFLIPResult.totalSupply.toString()).dividedBy(new BigNumber(10).pow(18)));\n        setBedTotalSupply(undefined);\n        setGmiTotalSupply(undefined);\n        setEth2xfliTotalSupply(undefined);\n        setBtc2xfliTotalSupply(undefined);\n        setDataTotalSupply(undefined);\n      }).catch(error => console.error(error));\n    }\n  }, [chainId, provider]);\n  return /*#__PURE__*/_jsxDEV(TokenSupplyContext.Provider, {\n    value: {\n      dpiTotalSupply: dpiTotalSupply,\n      mviTotalSupply: mviTotalSupply,\n      bedTotalSupply: bedTotalSupply,\n      gmiTotalSupply: gmiTotalSupply,\n      eth2xfliTotalSupply: eth2xfliTotalSupply,\n      eth2xflipTotalSupply: eth2xflipTotalSupply,\n      btc2xfliTotalSupply: btc2xfliTotalSupply,\n      dataTotalSupply: dataTotalSupply,\n      imaticflipTotalSupply: imaticflipTotalSupply,\n      matic2xflipTotalSupply: matic2xflipTotalSupply,\n      iethflipTotalSupply: iethflipTotalSupply\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenSupplyProvider, \"02lkK9FPYKT2DUx2D6bsJtyULZs=\", false, function () {\n  return [useWallet];\n});\n\n_c = TokenSupplyProvider;\nexport default TokenSupplyProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenSupplyProvider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/TokenSupply/TokenSupplyProvider.tsx"],"names":["React","useEffect","useState","BigNumber","bedTokenAddress","btc2xfliTokenAddress","dataTokenAddress","dpiTokenAddress","dpiTokenPolygonAddress","wlkrTokenAddress","eth2xflipTokenAddress","eth2xfliTokenAddress","gmiTokenAddress","iethflipTokenAddress","imaticflipTokenAddress","matic2xflipTokenAddress","mviTokenAddress","mviTokenPolygonAddress","useWallet","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","getTokenSupply","TokenSupplyContext","TokenSupplyProvider","children","dpiTotalSupply","setDpiTotalSupply","wlkrTotalSupply","setWlkrTotalSupply","mviTotalSupply","setMviTotalSupply","bedTotalSupply","setBedTotalSupply","gmiTotalSupply","setGmiTotalSupply","eth2xfliTotalSupply","setEth2xfliTotalSupply","eth2xflipTotalSupply","setEth2xflipTotalSupply","btc2xfliTotalSupply","setBtc2xfliTotalSupply","dataTotalSupply","setDataTotalSupply","matic2xflipTotalSupply","setMatic2xflipTotalSupply","iethflipTotalSupply","setiEthflipTotalSupply","imaticflipTotalSupply","setiMaticflipTotalSupply","ethereum","provider","chainId","then","result","dpiResult","mviResult","bedResult","gmiResult","eth2xFliResult","btc2xFliResult","dataResult","totalSupply","toString","dividedBy","pow","undefined","catch","error","console","eth2xFLIPResult","iethFLIPResult","imaticFLIPResult","matic2xFLIPResult"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport BigNumber from 'bignumber.js'\nimport { provider } from 'web3-core'\n\nimport {\n  bedTokenAddress,\n  btc2xfliTokenAddress,\n  dataTokenAddress,\n  dpiTokenAddress,\n  dpiTokenPolygonAddress,\n  wlkrTokenAddress,\n  wlkrTokenPolygonAddress,\n  eth2xflipTokenAddress,\n  eth2xfliTokenAddress,\n  gmiTokenAddress,\n  iethflipTokenAddress,\n  imaticflipTokenAddress,\n  matic2xflipTokenAddress,\n  mviTokenAddress,\n  mviTokenPolygonAddress,\n} from 'constants/ethContractAddresses'\nimport useWallet from 'hooks/useWallet'\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors'\nimport { getTokenSupply } from 'utils/setjsApi'\n\nimport TokenSupplyContext from './TokenSupplyContext'\n\nconst TokenSupplyProvider: React.FC = ({ children }) => {\n  const [dpiTotalSupply, setDpiTotalSupply] = useState<BigNumber>()\n  const [wlkrTotalSupply, setWlkrTotalSupply] = useState<BigNumber>()\n  const [mviTotalSupply, setMviTotalSupply] = useState<BigNumber>()\n  const [bedTotalSupply, setBedTotalSupply] = useState<BigNumber>()\n  const [gmiTotalSupply, setGmiTotalSupply] = useState<BigNumber>()\n  const [eth2xfliTotalSupply, setEth2xfliTotalSupply] = useState<BigNumber>()\n  const [eth2xflipTotalSupply, setEth2xflipTotalSupply] = useState<BigNumber>()\n  const [btc2xfliTotalSupply, setBtc2xfliTotalSupply] = useState<BigNumber>()\n  const [dataTotalSupply, setDataTotalSupply] = useState<BigNumber>()\n  const [matic2xflipTotalSupply, setMatic2xflipTotalSupply] =\n    useState<BigNumber>()\n  const [iethflipTotalSupply, setiEthflipTotalSupply] = useState<BigNumber>()\n  const [imaticflipTotalSupply, setiMaticflipTotalSupply] =\n    useState<BigNumber>()\n  const { ethereum: provider, chainId } = useWallet()\n\n  useEffect(() => {\n    //mainnet\n    if (\n      chainId &&\n      chainId === MAINNET_CHAIN_DATA.chainId &&\n      provider &&\n      dpiTokenAddress &&\n      wlkrTokenAddress &&\n      mviTokenAddress &&\n      bedTokenAddress &&\n      gmiTokenAddress &&\n      eth2xfliTokenAddress &&\n      btc2xfliTokenAddress &&\n      dataTokenAddress\n    ) {\n      getTokenSupply(\n        provider,\n        [\n          dpiTokenAddress,\n          wlkrTokenAddress,\n          mviTokenAddress,\n          bedTokenAddress,\n          gmiTokenAddress,\n          eth2xfliTokenAddress,\n          btc2xfliTokenAddress,\n          dataTokenAddress,\n        ],\n        chainId\n      )\n        .then((result) => {\n          const [\n            dpiResult,\n            mviResult,\n            bedResult,\n            gmiResult,\n            eth2xFliResult,\n            btc2xFliResult,\n            dataResult,\n          ] = result\n          setDpiTotalSupply(\n            new BigNumber(dpiResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setMviTotalSupply(\n            new BigNumber(mviResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setBedTotalSupply(\n            new BigNumber(bedResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setGmiTotalSupply(\n            new BigNumber(gmiResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setEth2xfliTotalSupply(\n            new BigNumber(eth2xFliResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setEth2xflipTotalSupply(undefined)\n          setBtc2xfliTotalSupply(\n            new BigNumber(btc2xFliResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setDataTotalSupply(\n            new BigNumber(dataResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n        })\n        .catch((error: any) => console.error(error))\n    } else if (\n      chainId &&\n      chainId === POLYGON_CHAIN_DATA.chainId &&\n      provider &&\n      dpiTokenPolygonAddress &&\n      mviTokenPolygonAddress &&\n      eth2xflipTokenAddress &&\n      iethflipTokenAddress &&\n      matic2xflipTokenAddress &&\n      imaticflipTokenAddress\n    ) {\n      getTokenSupply(\n        provider,\n        [\n          dpiTokenPolygonAddress,\n          mviTokenPolygonAddress,\n          eth2xflipTokenAddress,\n          iethflipTokenAddress,\n          imaticflipTokenAddress,\n          matic2xflipTokenAddress,\n        ],\n        chainId\n      )\n        .then((result) => {\n          const [\n            dpiResult,\n            mviResult,\n            eth2xFLIPResult,\n            iethFLIPResult,\n            imaticFLIPResult,\n            matic2xFLIPResult,\n          ] = result\n          setDpiTotalSupply(\n            new BigNumber(dpiResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setMviTotalSupply(\n            new BigNumber(mviResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setEth2xflipTotalSupply(\n            new BigNumber(eth2xFLIPResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setiEthflipTotalSupply(\n            new BigNumber(iethFLIPResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setMatic2xflipTotalSupply(\n            new BigNumber(matic2xFLIPResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n          setiMaticflipTotalSupply(\n            new BigNumber(imaticFLIPResult.totalSupply.toString()).dividedBy(\n              new BigNumber(10).pow(18)\n            )\n          )\n\n          setBedTotalSupply(undefined)\n          setGmiTotalSupply(undefined)\n          setEth2xfliTotalSupply(undefined)\n          setBtc2xfliTotalSupply(undefined)\n          setDataTotalSupply(undefined)\n        })\n        .catch((error: any) => console.error(error))\n    }\n  }, [chainId, provider])\n\n  return (\n    <TokenSupplyContext.Provider\n      value={{\n        dpiTotalSupply: dpiTotalSupply,\n        mviTotalSupply: mviTotalSupply,\n        bedTotalSupply: bedTotalSupply,\n        gmiTotalSupply: gmiTotalSupply,\n        eth2xfliTotalSupply: eth2xfliTotalSupply,\n        eth2xflipTotalSupply: eth2xflipTotalSupply,\n        btc2xfliTotalSupply: btc2xfliTotalSupply,\n        dataTotalSupply: dataTotalSupply,\n        imaticflipTotalSupply: imaticflipTotalSupply,\n        matic2xflipTotalSupply: matic2xflipTotalSupply,\n        iethflipTotalSupply: iethflipTotalSupply,\n      }}\n    >\n      {children}\n    </TokenSupplyContext.Provider>\n  )\n}\n\nexport default TokenSupplyProvider\n"]},"metadata":{},"sourceType":"module"}