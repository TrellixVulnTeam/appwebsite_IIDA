{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/SetComponents/SetComponentsProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { bedTokenAddress, btc2xfliTokenAddress, dataTokenAddress, dpiTokenAddress, dpiTokenPolygonAddress, eth2xflipTokenAddress, eth2xfliTokenAddress, gmiTokenAddress, iethflipTokenAddress, imaticflipTokenAddress, matic2xflipTokenAddress, mviTokenAddress, mviTokenPolygonAddress } from 'constants/ethContractAddresses';\nimport usePrices from 'hooks/usePrices';\nimport useWallet from 'hooks/useWallet';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { getSetDetails } from 'utils/setjsApi';\nimport { getTokenList } from 'utils/tokenlists';\nimport SetComponentsContext from './SetComponentsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ASSET_PLATFORM = 'ethereum';\nconst VS_CURRENCY = 'usd';\n\nconst SetComponentsProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    dpiPrice,\n    wlkrPrice,\n    mviPrice,\n    bedPrice,\n    gmiPrice,\n    eth2xfliPrice,\n    btc2xfliPrice,\n    dataPrice,\n    eth2xflipPrice,\n    matic2xflipPrice,\n    imaticflipPrice,\n    iethflipPrice\n  } = usePrices();\n  const [dpiComponents, setDpiComponents] = useState([]);\n  const [mviComponents, setMviComponents] = useState([]);\n  const [bedComponents, setBedComponents] = useState([]);\n  const [gmiComponents, setGmiComponents] = useState([]);\n  const [eth2xfliComponents, setEth2xfliComponents] = useState([]);\n  const [eth2xflipComponents, setEth2xflipComponents] = useState([]);\n  const [btc2xfliComponents, setBtc2xfliComponents] = useState([]);\n  const [dataComponents, setDataComponents] = useState([]);\n  const [iethflipComponents, setIEthflipComponents] = useState([]);\n  const [matic2xflipComponents, setMatic2xflipComponents] = useState([]);\n  const [imaticflipComponents, setIMaticflipComponents] = useState([]);\n  const {\n    ethereum: provider,\n    chainId\n  } = useWallet();\n  const tokenList = getTokenList(chainId);\n  useEffect(() => {\n    if (chainId && chainId === MAINNET_CHAIN_DATA.chainId && provider && dpiTokenAddress && mviTokenAddress && bedTokenAddress && gmiTokenAddress && eth2xfliTokenAddress && btc2xfliTokenAddress && dataTokenAddress && tokenList && dpiPrice) {\n      getSetDetails(provider, [dpiTokenAddress, mviTokenAddress, bedTokenAddress, gmiTokenAddress, eth2xfliTokenAddress, btc2xfliTokenAddress, dataTokenAddress], chainId).then(async result => {\n        const [dpi, mvi, bed, gmi, eth2xfli, btc2xfli, data] = result;\n        const dpiComponentPrices = await getPositionPrices(dpi);\n        const dpiPositions = dpi.positions.map(async position => {\n          var _dpiComponentPrices$p, _dpiComponentPrices$p2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_dpiComponentPrices$p = dpiComponentPrices[position.component.toLowerCase()]) === null || _dpiComponentPrices$p === void 0 ? void 0 : _dpiComponentPrices$p[VS_CURRENCY], (_dpiComponentPrices$p2 = dpiComponentPrices[position.component.toLowerCase()]) === null || _dpiComponentPrices$p2 === void 0 ? void 0 : _dpiComponentPrices$p2[`${VS_CURRENCY}_24h_change`], dpiPrice);\n        });\n        Promise.all(dpiPositions).then(sortPositionsByPercentOfSet).then(setDpiComponents);\n        const mviComponentPrices = await getPositionPrices(mvi);\n        const mviPositions = mvi.positions.map(async position => {\n          var _mviComponentPrices$p, _mviComponentPrices$p2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_mviComponentPrices$p = mviComponentPrices[position.component.toLowerCase()]) === null || _mviComponentPrices$p === void 0 ? void 0 : _mviComponentPrices$p[VS_CURRENCY], (_mviComponentPrices$p2 = mviComponentPrices[position.component.toLowerCase()]) === null || _mviComponentPrices$p2 === void 0 ? void 0 : _mviComponentPrices$p2[`${VS_CURRENCY}_24h_change`], mviPrice);\n        });\n        Promise.all(mviPositions).then(sortPositionsByPercentOfSet).then(setMviComponents);\n        const bedComponentPrices = await getPositionPrices(bed);\n        const bedPositions = bed.positions.map(async position => {\n          var _bedComponentPrices$p, _bedComponentPrices$p2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_bedComponentPrices$p = bedComponentPrices[position.component.toLowerCase()]) === null || _bedComponentPrices$p === void 0 ? void 0 : _bedComponentPrices$p[VS_CURRENCY], (_bedComponentPrices$p2 = bedComponentPrices[position.component.toLowerCase()]) === null || _bedComponentPrices$p2 === void 0 ? void 0 : _bedComponentPrices$p2[`${VS_CURRENCY}_24h_change`], bedPrice);\n        });\n        Promise.all(bedPositions).then(sortPositionsByPercentOfSet).then(setBedComponents);\n        const gmiComponentPrices = await getPositionPrices(gmi);\n        const gmiPositions = gmi.positions.map(async position => {\n          var _gmiComponentPrices$p, _gmiComponentPrices$p2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_gmiComponentPrices$p = gmiComponentPrices[position.component.toLowerCase()]) === null || _gmiComponentPrices$p === void 0 ? void 0 : _gmiComponentPrices$p[VS_CURRENCY], (_gmiComponentPrices$p2 = gmiComponentPrices[position.component.toLowerCase()]) === null || _gmiComponentPrices$p2 === void 0 ? void 0 : _gmiComponentPrices$p2[`${VS_CURRENCY}_24h_change`], gmiPrice);\n        });\n        Promise.all(gmiPositions).then(sortPositionsByPercentOfSet).then(setGmiComponents);\n        const eth2xfliComponentPrices = await getPositionPrices(eth2xfli);\n        const eth2xfliPositions = eth2xfli.positions.map(async position => {\n          var _eth2xfliComponentPri, _eth2xfliComponentPri2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_eth2xfliComponentPri = eth2xfliComponentPrices[position.component.toLowerCase()]) === null || _eth2xfliComponentPri === void 0 ? void 0 : _eth2xfliComponentPri[VS_CURRENCY], (_eth2xfliComponentPri2 = eth2xfliComponentPrices[position.component.toLowerCase()]) === null || _eth2xfliComponentPri2 === void 0 ? void 0 : _eth2xfliComponentPri2[`${VS_CURRENCY}_24h_change`], eth2xfliPrice);\n        });\n        Promise.all(eth2xfliPositions).then(sortPositionsByPercentOfSet).then(setEth2xfliComponents);\n        const btc2xfliComponentPrices = await getPositionPrices(btc2xfli);\n        const btc2xfliPositions = btc2xfli.positions.map(async position => {\n          var _btc2xfliComponentPri, _btc2xfliComponentPri2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_btc2xfliComponentPri = btc2xfliComponentPrices[position.component.toLowerCase()]) === null || _btc2xfliComponentPri === void 0 ? void 0 : _btc2xfliComponentPri[VS_CURRENCY], (_btc2xfliComponentPri2 = btc2xfliComponentPrices[position.component.toLowerCase()]) === null || _btc2xfliComponentPri2 === void 0 ? void 0 : _btc2xfliComponentPri2[`${VS_CURRENCY}_24h_change`], btc2xfliPrice);\n        });\n        Promise.all(btc2xfliPositions).then(sortPositionsByPercentOfSet).then(setBtc2xfliComponents);\n        const dataComponentPrices = await getPositionPrices(data);\n        const dataPositions = data.positions.map(async position => {\n          var _dataComponentPrices$, _dataComponentPrices$2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_dataComponentPrices$ = dataComponentPrices[position.component.toLowerCase()]) === null || _dataComponentPrices$ === void 0 ? void 0 : _dataComponentPrices$[VS_CURRENCY], (_dataComponentPrices$2 = dataComponentPrices[position.component.toLowerCase()]) === null || _dataComponentPrices$2 === void 0 ? void 0 : _dataComponentPrices$2[`${VS_CURRENCY}_24h_change`], dataPrice);\n        });\n        Promise.all(dataPositions).then(sortPositionsByPercentOfSet).then(setDataComponents);\n      });\n    }\n  }, [provider, tokenList, dpiPrice, mviPrice, chainId, bedPrice, gmiPrice, eth2xfliPrice, btc2xfliPrice, dataPrice, eth2xflipPrice]);\n  useEffect(() => {\n    if (chainId && chainId === POLYGON_CHAIN_DATA.chainId && provider && dpiTokenPolygonAddress && mviTokenPolygonAddress && eth2xflipTokenAddress && iethflipTokenAddress && matic2xflipTokenAddress && imaticflipTokenAddress && tokenList) {\n      getSetDetails(provider, [eth2xflipTokenAddress, iethflipTokenAddress, matic2xflipTokenAddress, imaticflipTokenAddress], chainId).then(async result => {\n        const [ethflip, iethflip, maticflip, imaticflip] = result;\n        const ethFlipComponentPrices = await getPositionPrices(ethflip, 'polygon-pos');\n        const ethFlipPositions = ethflip.positions.map(async position => {\n          var _ethFlipComponentPric, _ethFlipComponentPric2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_ethFlipComponentPric = ethFlipComponentPrices[position.component.toLowerCase()]) === null || _ethFlipComponentPric === void 0 ? void 0 : _ethFlipComponentPric[VS_CURRENCY], (_ethFlipComponentPric2 = ethFlipComponentPrices[position.component.toLowerCase()]) === null || _ethFlipComponentPric2 === void 0 ? void 0 : _ethFlipComponentPric2[`${VS_CURRENCY}_24h_change`], eth2xflipPrice);\n        });\n        Promise.all(ethFlipPositions).then(sortPositionsByPercentOfSet).then(setEth2xflipComponents);\n        const iethFlipComponentPrices = await getPositionPrices(iethflip, 'polygon-pos');\n        const iethFlipPositions = iethflip.positions.map(async position => {\n          var _iethFlipComponentPri, _iethFlipComponentPri2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_iethFlipComponentPri = iethFlipComponentPrices[position.component.toLowerCase()]) === null || _iethFlipComponentPri === void 0 ? void 0 : _iethFlipComponentPri[VS_CURRENCY], (_iethFlipComponentPri2 = iethFlipComponentPrices[position.component.toLowerCase()]) === null || _iethFlipComponentPri2 === void 0 ? void 0 : _iethFlipComponentPri2[`${VS_CURRENCY}_24h_change`], iethflipPrice);\n        });\n        Promise.all(iethFlipPositions).then(sortPositionsByPercentOfSet).then(setIEthflipComponents);\n        const maticFlipComponentPrices = await getPositionPrices(maticflip, 'polygon-pos');\n        const maticFliPositions = maticflip.positions.map(async position => {\n          var _maticFlipComponentPr, _maticFlipComponentPr2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_maticFlipComponentPr = maticFlipComponentPrices[position.component.toLowerCase()]) === null || _maticFlipComponentPr === void 0 ? void 0 : _maticFlipComponentPr[VS_CURRENCY], (_maticFlipComponentPr2 = maticFlipComponentPrices[position.component.toLowerCase()]) === null || _maticFlipComponentPr2 === void 0 ? void 0 : _maticFlipComponentPr2[`${VS_CURRENCY}_24h_change`], matic2xflipPrice);\n        });\n        Promise.all(maticFliPositions).then(sortPositionsByPercentOfSet).then(setMatic2xflipComponents);\n        const imaticFlipComponentPrices = await getPositionPrices(imaticflip, 'polygon-pos');\n        const imaticFlipPositions = imaticflip.positions.map(async position => {\n          var _imaticFlipComponentP, _imaticFlipComponentP2;\n\n          return await convertPositionToSetComponent(position, tokenList, (_imaticFlipComponentP = imaticFlipComponentPrices[position.component.toLowerCase()]) === null || _imaticFlipComponentP === void 0 ? void 0 : _imaticFlipComponentP[VS_CURRENCY], (_imaticFlipComponentP2 = imaticFlipComponentPrices[position.component.toLowerCase()]) === null || _imaticFlipComponentP2 === void 0 ? void 0 : _imaticFlipComponentP2[`${VS_CURRENCY}_24h_change`], imaticflipPrice);\n        });\n        Promise.all(imaticFlipPositions).then(sortPositionsByPercentOfSet).then(setIMaticflipComponents);\n      }).catch(err => console.log('err', err));\n    }\n  }, [chainId, provider, tokenList, iethflipPrice, imaticflipPrice, matic2xflipPrice]);\n  return /*#__PURE__*/_jsxDEV(SetComponentsContext.Provider, {\n    value: {\n      dpiComponents: dpiComponents,\n      mviComponents: mviComponents,\n      bedComponents: bedComponents,\n      gmiComponents: gmiComponents,\n      eth2xfliComponents: eth2xfliComponents,\n      eth2xflipComponents: eth2xflipComponents,\n      btc2xfliComponents: btc2xfliComponents,\n      dataComponents: dataComponents,\n      iEthFlipComponents: iethflipComponents,\n      iMaticFlipComponents: imaticflipComponents,\n      matic2xFlipComponents: matic2xflipComponents\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SetComponentsProvider, \"hYpYw4NB+BcTM7U1FsTC3aTzvKE=\", false, function () {\n  return [usePrices, useWallet];\n});\n\n_c = SetComponentsProvider;\n\nasync function convertPositionToSetComponent(position, tokenList, componentPriceUsd, componentPriceChangeUsd, setPriceUsd) {\n  const token = getTokenForPosition(tokenList, position);\n\n  if (token === undefined) {\n    return {\n      address: position.component,\n      id: position.component,\n      quantity: '',\n      symbol: 'SYM',\n      name: position.component,\n      image: '',\n      totalPriceUsd: '0',\n      dailyPercentChange: '0',\n      percentOfSet: '0',\n      percentOfSetNumber: new BigNumber('0')\n    };\n  }\n\n  const quantity = new BigNumber(position.unit.toString()).div(new BigNumber(10).pow(token.decimals));\n  const totalPriceUsd = quantity.multipliedBy(componentPriceUsd);\n  const percentOfSet = totalPriceUsd.dividedBy(setPriceUsd).multipliedBy(100);\n  return {\n    address: position.component,\n    id: token.name.toLowerCase(),\n    quantity: quantity.toString(),\n    symbol: token.symbol,\n    name: token.name,\n    image: token.logoURI,\n    totalPriceUsd: totalPriceUsd.toString(),\n    dailyPercentChange: componentPriceChangeUsd.toString(),\n    percentOfSet: percentOfSet.toPrecision(3).toString(),\n    percentOfSetNumber: percentOfSet\n  };\n}\n\nfunction getTokenForPosition(tokenList, position) {\n  const matchingTokens = tokenList.filter(t => t.address.toLowerCase() === position.component.toLowerCase());\n\n  if (matchingTokens.length === 0) {\n    console.warn(`No token for position ${position.component} exists in token lists`);\n  } else if (matchingTokens.length > 1) {\n    console.warn(`Multiple tokens for position ${position.component} exist in token lists`);\n  }\n\n  return matchingTokens[0];\n}\n\nfunction sortPositionsByPercentOfSet(components) {\n  return components.sort((a, b) => b.percentOfSetNumber.comparedTo(a.percentOfSetNumber));\n}\n\nasync function getPositionPrices(setDetails, assetPlatform = ASSET_PLATFORM) {\n  const componentAddresses = setDetails.positions.map(p => p.component);\n  return fetch(`https://api.coingecko.com/api/v3/simple/token_price/${assetPlatform}?vs_currencies=${VS_CURRENCY}&contract_addresses=${componentAddresses}&include_24hr_change=true`).then(response => response.json()).catch(e => console.error(e));\n}\n\nexport default SetComponentsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetComponentsProvider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/SetComponents/SetComponentsProvider.tsx"],"names":["React","useEffect","useState","BigNumber","bedTokenAddress","btc2xfliTokenAddress","dataTokenAddress","dpiTokenAddress","dpiTokenPolygonAddress","eth2xflipTokenAddress","eth2xfliTokenAddress","gmiTokenAddress","iethflipTokenAddress","imaticflipTokenAddress","matic2xflipTokenAddress","mviTokenAddress","mviTokenPolygonAddress","usePrices","useWallet","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","getSetDetails","getTokenList","SetComponentsContext","ASSET_PLATFORM","VS_CURRENCY","SetComponentsProvider","children","dpiPrice","wlkrPrice","mviPrice","bedPrice","gmiPrice","eth2xfliPrice","btc2xfliPrice","dataPrice","eth2xflipPrice","matic2xflipPrice","imaticflipPrice","iethflipPrice","dpiComponents","setDpiComponents","mviComponents","setMviComponents","bedComponents","setBedComponents","gmiComponents","setGmiComponents","eth2xfliComponents","setEth2xfliComponents","eth2xflipComponents","setEth2xflipComponents","btc2xfliComponents","setBtc2xfliComponents","dataComponents","setDataComponents","iethflipComponents","setIEthflipComponents","matic2xflipComponents","setMatic2xflipComponents","imaticflipComponents","setIMaticflipComponents","ethereum","provider","chainId","tokenList","then","result","dpi","mvi","bed","gmi","eth2xfli","btc2xfli","data","dpiComponentPrices","getPositionPrices","dpiPositions","positions","map","position","convertPositionToSetComponent","component","toLowerCase","Promise","all","sortPositionsByPercentOfSet","mviComponentPrices","mviPositions","bedComponentPrices","bedPositions","gmiComponentPrices","gmiPositions","eth2xfliComponentPrices","eth2xfliPositions","btc2xfliComponentPrices","btc2xfliPositions","dataComponentPrices","dataPositions","ethflip","iethflip","maticflip","imaticflip","ethFlipComponentPrices","ethFlipPositions","iethFlipComponentPrices","iethFlipPositions","maticFlipComponentPrices","maticFliPositions","imaticFlipComponentPrices","imaticFlipPositions","catch","err","console","log","iEthFlipComponents","iMaticFlipComponents","matic2xFlipComponents","componentPriceUsd","componentPriceChangeUsd","setPriceUsd","token","getTokenForPosition","undefined","address","id","quantity","symbol","name","image","totalPriceUsd","dailyPercentChange","percentOfSet","percentOfSetNumber","unit","toString","div","pow","decimals","multipliedBy","dividedBy","logoURI","toPrecision","matchingTokens","filter","t","length","warn","components","sort","a","b","comparedTo","setDetails","assetPlatform","componentAddresses","p","fetch","response","json","e","error"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport BigNumber from 'bignumber.js'\nimport {\n  CoinGeckoCoinPrices,\n  Position,\n  SetDetails,\n} from 'set.js/dist/types/src/types'\n\nimport {\n  bedTokenAddress,\n  btc2xfliTokenAddress,\n  dataTokenAddress,\n  dpiTokenAddress,\n  dpiTokenPolygonAddress,\n  wlkrTokenAddress,\n  wlkrTokenPolygonAddress,\n  eth2xflipTokenAddress,\n  eth2xfliTokenAddress,\n  gmiTokenAddress,\n  iethflipTokenAddress,\n  imaticflipTokenAddress,\n  matic2xflipTokenAddress,\n  mviTokenAddress,\n  mviTokenPolygonAddress,\n} from 'constants/ethContractAddresses'\nimport usePrices from 'hooks/usePrices'\nimport useWallet from 'hooks/useWallet'\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors'\nimport { getSetDetails } from 'utils/setjsApi'\nimport { getTokenList, TokenData as Token } from 'utils/tokenlists'\n\nimport { SetComponent } from './SetComponent'\nimport SetComponentsContext from './SetComponentsContext'\n\nconst ASSET_PLATFORM = 'ethereum'\nconst VS_CURRENCY = 'usd'\n\nconst SetComponentsProvider: React.FC = ({ children }) => {\n  const {\n    dpiPrice,\n    wlkrPrice,\n    mviPrice,\n    bedPrice,\n    gmiPrice,\n    eth2xfliPrice,\n    btc2xfliPrice,\n    dataPrice,\n    eth2xflipPrice,\n    matic2xflipPrice,\n    imaticflipPrice,\n    iethflipPrice,\n  } = usePrices()\n  const [dpiComponents, setDpiComponents] = useState<SetComponent[]>([])\n  const [mviComponents, setMviComponents] = useState<SetComponent[]>([])\n  const [bedComponents, setBedComponents] = useState<SetComponent[]>([])\n  const [gmiComponents, setGmiComponents] = useState<SetComponent[]>([])\n  const [eth2xfliComponents, setEth2xfliComponents] = useState<SetComponent[]>(\n    []\n  )\n  const [eth2xflipComponents, setEth2xflipComponents] = useState<\n    SetComponent[]\n  >([])\n  const [btc2xfliComponents, setBtc2xfliComponents] = useState<SetComponent[]>(\n    []\n  )\n  const [dataComponents, setDataComponents] = useState<SetComponent[]>([])\n  const [iethflipComponents, setIEthflipComponents] = useState<SetComponent[]>(\n    []\n  )\n  const [matic2xflipComponents, setMatic2xflipComponents] = useState<\n    SetComponent[]\n  >([])\n  const [imaticflipComponents, setIMaticflipComponents] = useState<\n    SetComponent[]\n  >([])\n\n  const { ethereum: provider, chainId } = useWallet()\n  const tokenList = getTokenList(chainId)\n\n  useEffect(() => {\n    if (\n      chainId &&\n      chainId === MAINNET_CHAIN_DATA.chainId &&\n      provider &&\n      dpiTokenAddress &&\n      mviTokenAddress &&\n      bedTokenAddress &&\n      gmiTokenAddress &&\n      eth2xfliTokenAddress &&\n      btc2xfliTokenAddress &&\n      dataTokenAddress &&\n      tokenList &&\n      dpiPrice\n    ) {\n      getSetDetails(\n        provider,\n        [\n          dpiTokenAddress,\n          mviTokenAddress,\n          bedTokenAddress,\n          gmiTokenAddress,\n          eth2xfliTokenAddress,\n          btc2xfliTokenAddress,\n          dataTokenAddress,\n        ],\n        chainId\n      ).then(async (result) => {\n        const [dpi, mvi, bed, gmi, eth2xfli, btc2xfli, data] = result\n\n        const dpiComponentPrices = await getPositionPrices(dpi)\n        const dpiPositions = dpi.positions.map(async (position) => {\n          return await convertPositionToSetComponent(\n            position,\n            tokenList,\n            dpiComponentPrices[position.component.toLowerCase()]?.[VS_CURRENCY],\n            dpiComponentPrices[position.component.toLowerCase()]?.[\n              `${VS_CURRENCY}_24h_change`\n            ],\n            dpiPrice\n          )\n        })\n        Promise.all(dpiPositions)\n          .then(sortPositionsByPercentOfSet)\n          .then(setDpiComponents)\n\n        const mviComponentPrices = await getPositionPrices(mvi)\n        const mviPositions = mvi.positions.map(async (position) => {\n          return await convertPositionToSetComponent(\n            position,\n            tokenList,\n            mviComponentPrices[position.component.toLowerCase()]?.[VS_CURRENCY],\n            mviComponentPrices[position.component.toLowerCase()]?.[\n              `${VS_CURRENCY}_24h_change`\n            ],\n            mviPrice\n          )\n        })\n        Promise.all(mviPositions)\n          .then(sortPositionsByPercentOfSet)\n          .then(setMviComponents)\n\n        const bedComponentPrices = await getPositionPrices(bed)\n        const bedPositions = bed.positions.map(async (position) => {\n          return await convertPositionToSetComponent(\n            position,\n            tokenList,\n            bedComponentPrices[position.component.toLowerCase()]?.[VS_CURRENCY],\n            bedComponentPrices[position.component.toLowerCase()]?.[\n              `${VS_CURRENCY}_24h_change`\n            ],\n            bedPrice\n          )\n        })\n        Promise.all(bedPositions)\n          .then(sortPositionsByPercentOfSet)\n          .then(setBedComponents)\n\n        const gmiComponentPrices = await getPositionPrices(gmi)\n        const gmiPositions = gmi.positions.map(async (position) => {\n          return await convertPositionToSetComponent(\n            position,\n            tokenList,\n            gmiComponentPrices[position.component.toLowerCase()]?.[VS_CURRENCY],\n            gmiComponentPrices[position.component.toLowerCase()]?.[\n              `${VS_CURRENCY}_24h_change`\n            ],\n            gmiPrice\n          )\n        })\n        Promise.all(gmiPositions)\n          .then(sortPositionsByPercentOfSet)\n          .then(setGmiComponents)\n\n        const eth2xfliComponentPrices = await getPositionPrices(eth2xfli)\n        const eth2xfliPositions = eth2xfli.positions.map(async (position) => {\n          return await convertPositionToSetComponent(\n            position,\n            tokenList,\n            eth2xfliComponentPrices[position.component.toLowerCase()]?.[\n              VS_CURRENCY\n            ],\n            eth2xfliComponentPrices[position.component.toLowerCase()]?.[\n              `${VS_CURRENCY}_24h_change`\n            ],\n            eth2xfliPrice\n          )\n        })\n        Promise.all(eth2xfliPositions)\n          .then(sortPositionsByPercentOfSet)\n          .then(setEth2xfliComponents)\n\n        const btc2xfliComponentPrices = await getPositionPrices(btc2xfli)\n        const btc2xfliPositions = btc2xfli.positions.map(async (position) => {\n          return await convertPositionToSetComponent(\n            position,\n            tokenList,\n            btc2xfliComponentPrices[position.component.toLowerCase()]?.[\n              VS_CURRENCY\n            ],\n            btc2xfliComponentPrices[position.component.toLowerCase()]?.[\n              `${VS_CURRENCY}_24h_change`\n            ],\n            btc2xfliPrice\n          )\n        })\n        Promise.all(btc2xfliPositions)\n          .then(sortPositionsByPercentOfSet)\n          .then(setBtc2xfliComponents)\n\n        const dataComponentPrices = await getPositionPrices(data)\n        const dataPositions = data.positions.map(async (position) => {\n          return await convertPositionToSetComponent(\n            position,\n            tokenList,\n            dataComponentPrices[position.component.toLowerCase()]?.[\n              VS_CURRENCY\n            ],\n            dataComponentPrices[position.component.toLowerCase()]?.[\n              `${VS_CURRENCY}_24h_change`\n            ],\n            dataPrice\n          )\n        })\n        Promise.all(dataPositions)\n          .then(sortPositionsByPercentOfSet)\n          .then(setDataComponents)\n      })\n    }\n  }, [\n    provider,\n    tokenList,\n    dpiPrice,\n    mviPrice,\n    chainId,\n    bedPrice,\n    gmiPrice,\n    eth2xfliPrice,\n    btc2xfliPrice,\n    dataPrice,\n    eth2xflipPrice,\n  ])\n\n  useEffect(() => {\n    if (\n      chainId &&\n      chainId === POLYGON_CHAIN_DATA.chainId &&\n      provider &&\n      dpiTokenPolygonAddress &&\n      mviTokenPolygonAddress &&\n      eth2xflipTokenAddress &&\n      iethflipTokenAddress &&\n      matic2xflipTokenAddress &&\n      imaticflipTokenAddress &&\n      tokenList\n    ) {\n      getSetDetails(\n        provider,\n        [\n          eth2xflipTokenAddress,\n          iethflipTokenAddress,\n          matic2xflipTokenAddress,\n          imaticflipTokenAddress,\n        ],\n        chainId\n      )\n        .then(async (result) => {\n          const [ethflip, iethflip, maticflip, imaticflip] = result\n\n          const ethFlipComponentPrices = await getPositionPrices(\n            ethflip,\n            'polygon-pos'\n          )\n          const ethFlipPositions = ethflip.positions.map(async (position) => {\n            return await convertPositionToSetComponent(\n              position,\n              tokenList,\n              ethFlipComponentPrices[position.component.toLowerCase()]?.[\n                VS_CURRENCY\n              ],\n              ethFlipComponentPrices[position.component.toLowerCase()]?.[\n                `${VS_CURRENCY}_24h_change`\n              ],\n              eth2xflipPrice\n            )\n          })\n          Promise.all(ethFlipPositions)\n            .then(sortPositionsByPercentOfSet)\n            .then(setEth2xflipComponents)\n\n          const iethFlipComponentPrices = await getPositionPrices(\n            iethflip,\n            'polygon-pos'\n          )\n          const iethFlipPositions = iethflip.positions.map(async (position) => {\n            return await convertPositionToSetComponent(\n              position,\n              tokenList,\n              iethFlipComponentPrices[position.component.toLowerCase()]?.[\n                VS_CURRENCY\n              ],\n              iethFlipComponentPrices[position.component.toLowerCase()]?.[\n                `${VS_CURRENCY}_24h_change`\n              ],\n              iethflipPrice\n            )\n          })\n          Promise.all(iethFlipPositions)\n            .then(sortPositionsByPercentOfSet)\n            .then(setIEthflipComponents)\n\n          const maticFlipComponentPrices = await getPositionPrices(\n            maticflip,\n            'polygon-pos'\n          )\n          const maticFliPositions = maticflip.positions.map(\n            async (position) => {\n              return await convertPositionToSetComponent(\n                position,\n                tokenList,\n                maticFlipComponentPrices[position.component.toLowerCase()]?.[\n                  VS_CURRENCY\n                ],\n                maticFlipComponentPrices[position.component.toLowerCase()]?.[\n                  `${VS_CURRENCY}_24h_change`\n                ],\n                matic2xflipPrice\n              )\n            }\n          )\n          Promise.all(maticFliPositions)\n            .then(sortPositionsByPercentOfSet)\n            .then(setMatic2xflipComponents)\n\n          const imaticFlipComponentPrices = await getPositionPrices(\n            imaticflip,\n            'polygon-pos'\n          )\n          const imaticFlipPositions = imaticflip.positions.map(\n            async (position) => {\n              return await convertPositionToSetComponent(\n                position,\n                tokenList,\n                imaticFlipComponentPrices[position.component.toLowerCase()]?.[\n                  VS_CURRENCY\n                ],\n                imaticFlipComponentPrices[position.component.toLowerCase()]?.[\n                  `${VS_CURRENCY}_24h_change`\n                ],\n                imaticflipPrice\n              )\n            }\n          )\n          Promise.all(imaticFlipPositions)\n            .then(sortPositionsByPercentOfSet)\n            .then(setIMaticflipComponents)\n        })\n        .catch((err) => console.log('err', err))\n    }\n  }, [\n    chainId,\n    provider,\n    tokenList,\n    iethflipPrice,\n    imaticflipPrice,\n    matic2xflipPrice,\n  ])\n\n  return (\n    <SetComponentsContext.Provider\n      value={{\n        dpiComponents: dpiComponents,\n        mviComponents: mviComponents,\n        bedComponents: bedComponents,\n        gmiComponents: gmiComponents,\n        eth2xfliComponents: eth2xfliComponents,\n        eth2xflipComponents: eth2xflipComponents,\n        btc2xfliComponents: btc2xfliComponents,\n        dataComponents: dataComponents,\n        iEthFlipComponents: iethflipComponents,\n        iMaticFlipComponents: imaticflipComponents,\n        matic2xFlipComponents: matic2xflipComponents,\n      }}\n    >\n      {children}\n    </SetComponentsContext.Provider>\n  )\n}\n\nasync function convertPositionToSetComponent(\n  position: Position,\n  tokenList: Token[],\n  componentPriceUsd: number,\n  componentPriceChangeUsd: number,\n  setPriceUsd: number\n): Promise<SetComponent> {\n  const token = getTokenForPosition(tokenList, position)\n  if (token === undefined) {\n    return {\n      address: position.component,\n      id: position.component,\n      quantity: '',\n      symbol: 'SYM',\n      name: position.component,\n      image: '',\n      totalPriceUsd: '0',\n      dailyPercentChange: '0',\n      percentOfSet: '0',\n      percentOfSetNumber: new BigNumber('0'),\n    }\n  }\n\n  const quantity = new BigNumber(position.unit.toString()).div(\n    new BigNumber(10).pow(token.decimals)\n  )\n  const totalPriceUsd = quantity.multipliedBy(componentPriceUsd)\n  const percentOfSet = totalPriceUsd.dividedBy(setPriceUsd).multipliedBy(100)\n\n  return {\n    address: position.component,\n    id: token.name.toLowerCase(),\n    quantity: quantity.toString(),\n    symbol: token.symbol,\n    name: token.name,\n    image: token.logoURI,\n    totalPriceUsd: totalPriceUsd.toString(),\n    dailyPercentChange: componentPriceChangeUsd.toString(),\n    percentOfSet: percentOfSet.toPrecision(3).toString(),\n    percentOfSetNumber: percentOfSet,\n  }\n}\n\nfunction getTokenForPosition(tokenList: Token[], position: Position): Token {\n  const matchingTokens = tokenList.filter(\n    (t) => t.address.toLowerCase() === position.component.toLowerCase()\n  )\n  if (matchingTokens.length === 0) {\n    console.warn(\n      `No token for position ${position.component} exists in token lists`\n    )\n  } else if (matchingTokens.length > 1) {\n    console.warn(\n      `Multiple tokens for position ${position.component} exist in token lists`\n    )\n  }\n  return matchingTokens[0]\n}\n\nfunction sortPositionsByPercentOfSet(\n  components: SetComponent[]\n): SetComponent[] {\n  return components.sort((a, b) =>\n    b.percentOfSetNumber.comparedTo(a.percentOfSetNumber)\n  )\n}\n\nasync function getPositionPrices(\n  setDetails: SetDetails,\n  assetPlatform: string = ASSET_PLATFORM\n): Promise<CoinGeckoCoinPrices> {\n  const componentAddresses = setDetails.positions.map((p) => p.component)\n  return fetch(\n    `https://api.coingecko.com/api/v3/simple/token_price/${assetPlatform}?vs_currencies=${VS_CURRENCY}&contract_addresses=${componentAddresses}&include_24hr_change=true`\n  )\n    .then((response) => response.json())\n    .catch((e) => console.error(e))\n}\n\nexport default SetComponentsProvider\n"]},"metadata":{},"sourceType":"module"}