{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/MediaQuery/MediaQueryProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport MediaQueryContext from './MediaQueryContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MediaQueryProvider = ({\n  children\n}) => {\n  _s();\n\n  /* eslint no-restricted-globals:0 */\n  const [deviceWidth, setDeviceWidth] = useState(0);\n  const [deviceHeight, setDeviceHeight] = useState(0);\n  /* eslint no-restricted-globals:1 */\n\n  const [isMobile, setIsMobile] = useState(false);\n  const [isTablet, setIsTablet] = useState(false);\n  const [isDesktop, setIsDesktop] = useState(false);\n\n  const handleWindowSizeChange = () => {\n    setDeviceWidth(window.innerWidth);\n    setDeviceHeight(window.innerHeight);\n\n    if (window.innerWidth < 500) {\n      setIsMobile(true);\n    } else {\n      setIsMobile(false);\n    }\n\n    if (window.innerWidth < 900) {\n      setIsTablet(true);\n    } else {\n      setIsTablet(false);\n    }\n\n    if (window.innerWidth >= 900) {\n      setIsDesktop(true);\n    } else {\n      setIsDesktop(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowSizeChange);\n    return () => {\n      window.removeEventListener('resize', handleWindowSizeChange);\n    };\n  });\n  useEffect(() => {\n    handleWindowSizeChange();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MediaQueryContext.Provider, {\n    value: {\n      deviceWidth,\n      deviceHeight,\n      isMobile,\n      isTablet,\n      isDesktop\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MediaQueryProvider, \"Z4n8kIDfTzLNE/UmejpYNihbHuE=\");\n\n_c = MediaQueryProvider;\nexport default MediaQueryProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MediaQueryProvider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/MediaQuery/MediaQueryProvider.tsx"],"names":["React","useEffect","useState","MediaQueryContext","MediaQueryProvider","children","deviceWidth","setDeviceWidth","deviceHeight","setDeviceHeight","isMobile","setIsMobile","isTablet","setIsTablet","isDesktop","setIsDesktop","handleWindowSizeChange","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;;;AAEA,MAAMC,kBAA4B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrD;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAS,CAAT,CAA9C;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAS,CAAT,CAAhD;AACA;;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAU,KAAV,CAA1C;;AAEA,QAAMc,sBAAsB,GAAG,MAAM;AACnCT,IAAAA,cAAc,CAACU,MAAM,CAACC,UAAR,CAAd;AACAT,IAAAA,eAAe,CAACQ,MAAM,CAACE,WAAR,CAAf;;AAEA,QAAIF,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;AAC3BP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAED,QAAIM,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;AAC3BL,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAED,QAAII,MAAM,CAACC,UAAP,IAAqB,GAAzB,EAA8B;AAC5BH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GArBD;;AAuBAd,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,sBAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,sBAArC;AACD,KAFD;AAGD,GALQ,CAAT;AAOAf,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,sBAAsB;AACvB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLV,MAAAA,WADK;AAELE,MAAAA,YAFK;AAGLE,MAAAA,QAHK;AAILE,MAAAA,QAJK;AAKLE,MAAAA;AALK,KADT;AAAA,cASGT;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAxDD;;GAAMD,kB;;KAAAA,kB;AA0DN,eAAeA,kBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport MediaQueryContext from './MediaQueryContext'\n\nconst MediaQueryProvider: React.FC = ({ children }) => {\n  /* eslint no-restricted-globals:0 */\n  const [deviceWidth, setDeviceWidth] = useState<number>(0)\n  const [deviceHeight, setDeviceHeight] = useState<number>(0)\n  /* eslint no-restricted-globals:1 */\n  const [isMobile, setIsMobile] = useState<boolean>(false)\n  const [isTablet, setIsTablet] = useState<boolean>(false)\n  const [isDesktop, setIsDesktop] = useState<boolean>(false)\n\n  const handleWindowSizeChange = () => {\n    setDeviceWidth(window.innerWidth)\n    setDeviceHeight(window.innerHeight)\n\n    if (window.innerWidth < 500) {\n      setIsMobile(true)\n    } else {\n      setIsMobile(false)\n    }\n\n    if (window.innerWidth < 900) {\n      setIsTablet(true)\n    } else {\n      setIsTablet(false)\n    }\n\n    if (window.innerWidth >= 900) {\n      setIsDesktop(true)\n    } else {\n      setIsDesktop(false)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowSizeChange)\n    return () => {\n      window.removeEventListener('resize', handleWindowSizeChange)\n    }\n  })\n\n  useEffect(() => {\n    handleWindowSizeChange()\n  }, [])\n\n  return (\n    <MediaQueryContext.Provider\n      value={{\n        deviceWidth,\n        deviceHeight,\n        isMobile,\n        isTablet,\n        isDesktop,\n      }}\n    >\n      {children}\n    </MediaQueryContext.Provider>\n  )\n}\n\nexport default MediaQueryProvider\n"]},"metadata":{},"sourceType":"module"}