{"ast":null,"code":"const inherits = require('util').inherits;\n\nconst {\n  TransactionFactory\n} = require('@ethereumjs/tx');\n\nconst ethUtil = require('ethereumjs-util');\n\nconst Subprovider = require('./subprovider.js');\n\nconst blockTagForPayload = require('../util/rpc-cache-utils').blockTagForPayload;\n\nmodule.exports = NonceTrackerSubprovider; // handles the following RPC methods:\n//   eth_getTransactionCount (pending only)\n//\n// observes the following RPC methods:\n//   eth_sendRawTransaction\n//   evm_revert (to clear the nonce cache)\n\ninherits(NonceTrackerSubprovider, Subprovider);\n\nfunction NonceTrackerSubprovider() {\n  const self = this;\n  self.nonceCache = {};\n}\n\nNonceTrackerSubprovider.prototype.handleRequest = function (payload, next, end) {\n  const self = this;\n\n  switch (payload.method) {\n    case 'eth_getTransactionCount':\n      var blockTag = blockTagForPayload(payload);\n      var address = payload.params[0].toLowerCase();\n      var cachedResult = self.nonceCache[address]; // only handle requests against the 'pending' blockTag\n\n      if (blockTag === 'pending') {\n        // has a result\n        if (cachedResult) {\n          end(null, cachedResult); // fallthrough then populate cache\n        } else {\n          next(function (err, result, cb) {\n            if (err) return cb();\n\n            if (self.nonceCache[address] === undefined) {\n              self.nonceCache[address] = result;\n            }\n\n            cb();\n          });\n        }\n      } else {\n        next();\n      }\n\n      return;\n\n    case 'eth_sendRawTransaction':\n      // allow the request to continue normally\n      next(function (err, result, cb) {\n        // only update local nonce if tx was submitted correctly\n        if (err) return cb(); // parse raw tx\n\n        var rawTx = payload.params[0];\n        var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex');\n        const tx = TransactionFactory.fromSerializedData(rawData); // extract address\n\n        var address = tx.getSenderAddress().toString('hex').toLowerCase(); // extract nonce and increment\n\n        var nonce = ethUtil.bufferToInt(tx.nonce);\n        nonce++; // hexify and normalize\n\n        var hexNonce = nonce.toString(16);\n        if (hexNonce.length % 2) hexNonce = '0' + hexNonce;\n        hexNonce = '0x' + hexNonce; // dont update our record on the nonce until the submit was successful\n        // update cache\n\n        self.nonceCache[address] = hexNonce;\n        cb();\n      });\n      return;\n    // Clear cache on a testrpc revert\n\n    case 'evm_revert':\n      self.nonceCache = {};\n      next();\n      return;\n\n    default:\n      next();\n      return;\n  }\n};","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/node_modules/web3-provider-engine/subproviders/nonce-tracker.js"],"names":["inherits","require","TransactionFactory","ethUtil","Subprovider","blockTagForPayload","module","exports","NonceTrackerSubprovider","self","nonceCache","prototype","handleRequest","payload","next","end","method","blockTag","address","params","toLowerCase","cachedResult","err","result","cb","undefined","rawTx","rawData","Buffer","from","stripHexPrefix","tx","fromSerializedData","getSenderAddress","toString","nonce","bufferToInt","hexNonce","length"],"mappings":"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","sourcesContent":["const inherits = require('util').inherits\nconst { TransactionFactory } = require('@ethereumjs/tx')\nconst ethUtil = require('ethereumjs-util')\nconst Subprovider = require('./subprovider.js')\nconst blockTagForPayload = require('../util/rpc-cache-utils').blockTagForPayload\n\nmodule.exports = NonceTrackerSubprovider\n\n// handles the following RPC methods:\n//   eth_getTransactionCount (pending only)\n//\n// observes the following RPC methods:\n//   eth_sendRawTransaction\n//   evm_revert (to clear the nonce cache)\n\ninherits(NonceTrackerSubprovider, Subprovider)\n\nfunction NonceTrackerSubprovider(){\n  const self = this\n\n  self.nonceCache = {}\n}\n\nNonceTrackerSubprovider.prototype.handleRequest = function(payload, next, end){\n  const self = this\n\n  switch(payload.method) {\n\n    case 'eth_getTransactionCount':\n      var blockTag = blockTagForPayload(payload)\n      var address = payload.params[0].toLowerCase()\n      var cachedResult = self.nonceCache[address]\n      // only handle requests against the 'pending' blockTag\n      if (blockTag === 'pending') {\n        // has a result\n        if (cachedResult) {\n          end(null, cachedResult)\n        // fallthrough then populate cache\n        } else {\n          next(function(err, result, cb){\n            if (err) return cb()\n            if (self.nonceCache[address] === undefined) {\n              self.nonceCache[address] = result\n            }\n            cb()\n          })\n        }\n      } else {\n        next()\n      }\n      return\n\n    case 'eth_sendRawTransaction':\n      // allow the request to continue normally\n      next(function(err, result, cb){\n        // only update local nonce if tx was submitted correctly\n        if (err) return cb()\n        // parse raw tx\n        var rawTx = payload.params[0]\n        var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex')\n        const tx = TransactionFactory.fromSerializedData(rawData)\n        // extract address\n        var address = tx.getSenderAddress().toString('hex').toLowerCase()\n        // extract nonce and increment\n        var nonce = ethUtil.bufferToInt(tx.nonce)\n        nonce++\n        // hexify and normalize\n        var hexNonce = nonce.toString(16)\n        if (hexNonce.length%2) hexNonce = '0'+hexNonce\n        hexNonce = '0x'+hexNonce\n        // dont update our record on the nonce until the submit was successful\n        // update cache\n        self.nonceCache[address] = hexNonce\n        cb()\n      })\n      return\n\n   // Clear cache on a testrpc revert\n   case 'evm_revert':\n      self.nonceCache = {}\n      next()\n      return\n\n    default:\n      next()\n      return\n\n  }\n}\n"]},"metadata":{},"sourceType":"script"}