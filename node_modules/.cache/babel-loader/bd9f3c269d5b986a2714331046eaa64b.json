{"ast":null,"code":"import Web3 from 'web3';\nimport { farmTwoAddress } from 'constants/ethContractAddresses';\nimport StakeABI from 'index-sdk/abi/Stake.json';\nexport const getStakingRewardsContract = provider => {\n  const web3 = new Web3(provider);\n  const contract = new web3.eth.Contract(StakeABI, farmTwoAddress);\n  return contract;\n};\nexport const stakeUniswapEthDpiLpTokens = (provider, account, stakeQuantity) => {\n  const stakingContract = getStakingRewardsContract(provider);\n  return new Promise(resolve => {\n    stakingContract.methods.stake(stakeQuantity.toString()).send({\n      from: account,\n      gas: 200000\n    }).on('transactionHash', txId => {\n      if (!txId) resolve(null);\n      resolve(txId);\n    }).on('error', error => {\n      console.log(error);\n      resolve(null);\n    });\n  });\n};\nexport const unstakeUniswapEthDpiLpTokens = (provider, account, unstakeQuantity) => {\n  const stakingContract = getStakingRewardsContract(provider);\n  return new Promise(resolve => {\n    stakingContract.methods.withdraw(unstakeQuantity.toString()).send({\n      from: account,\n      gas: 200000\n    }).on('transactionHash', txId => {\n      if (!txId) resolve(null);\n      resolve(txId);\n    }).on('error', error => {\n      console.log(error);\n      resolve(null);\n    });\n  });\n};\nexport const getEarnedIndexTokenQuantity = async (provider, account) => {\n  const stakingContract = getStakingRewardsContract(provider);\n\n  try {\n    const earnedTokenQuantity = stakingContract.methods.earned(account).call();\n    return earnedTokenQuantity;\n  } catch (e) {\n    console.log(e);\n    return '0';\n  }\n};\nexport const claimEarnedIndexLpReward = (provider, account) => {\n  const stakingContract = getStakingRewardsContract(provider);\n  return new Promise(resolve => {\n    stakingContract.methods.getReward().send({\n      from: account,\n      gas: 200000\n    }).on('transactionHash', txId => {\n      if (!txId) resolve(null);\n      resolve(txId);\n    }).on('error', error => {\n      console.log(error);\n      resolve(null);\n    });\n  });\n};\nexport const unstakeAndClaimEarnedIndexLpReward = (provider, account) => {\n  const stakingContract = getStakingRewardsContract(provider);\n  return new Promise(resolve => {\n    stakingContract.methods.exit().send({\n      from: account,\n      gas: 250000\n    }).on('transactionHash', txId => {\n      if (!txId) resolve(null);\n      resolve(txId);\n    }).on('error', error => {\n      console.log(error);\n      resolve(null);\n    });\n  });\n}; // Currently set for 12pm PST Dec. 7th\n\nexport const farmTwoStartTime = '1607371200000';","map":{"version":3,"sources":["/Users/safahi/Desktop/index-ui-master/src/index-sdk/farmTwo.ts"],"names":["Web3","farmTwoAddress","StakeABI","getStakingRewardsContract","provider","web3","contract","eth","Contract","stakeUniswapEthDpiLpTokens","account","stakeQuantity","stakingContract","Promise","resolve","methods","stake","toString","send","from","gas","on","txId","error","console","log","unstakeUniswapEthDpiLpTokens","unstakeQuantity","withdraw","getEarnedIndexTokenQuantity","earnedTokenQuantity","earned","call","e","claimEarnedIndexLpReward","getReward","unstakeAndClaimEarnedIndexLpReward","exit","farmTwoStartTime"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport { provider } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\n\nimport { farmTwoAddress } from 'constants/ethContractAddresses'\nimport StakeABI from 'index-sdk/abi/Stake.json'\nimport BigNumber from 'utils/bignumber'\n\nexport const getStakingRewardsContract = (provider: provider) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(\n    StakeABI as unknown as AbiItem,\n    farmTwoAddress\n  )\n  return contract\n}\n\nexport const stakeUniswapEthDpiLpTokens = (\n  provider: provider,\n  account: string,\n  stakeQuantity: BigNumber\n): Promise<string | null> => {\n  const stakingContract = getStakingRewardsContract(provider)\n\n  return new Promise((resolve) => {\n    stakingContract.methods\n      .stake(stakeQuantity.toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (txId: string) => {\n        if (!txId) resolve(null)\n\n        resolve(txId)\n      })\n      .on('error', (error: any) => {\n        console.log(error)\n        resolve(null)\n      })\n  })\n}\n\nexport const unstakeUniswapEthDpiLpTokens = (\n  provider: provider,\n  account: string,\n  unstakeQuantity: BigNumber\n): Promise<string | null> => {\n  const stakingContract = getStakingRewardsContract(provider)\n\n  return new Promise((resolve) => {\n    stakingContract.methods\n      .withdraw(unstakeQuantity.toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (txId: string) => {\n        if (!txId) resolve(null)\n\n        resolve(txId)\n      })\n      .on('error', (error: any) => {\n        console.log(error)\n        resolve(null)\n      })\n  })\n}\n\nexport const getEarnedIndexTokenQuantity = async (\n  provider: provider,\n  account: string\n): Promise<string> => {\n  const stakingContract = getStakingRewardsContract(provider)\n\n  try {\n    const earnedTokenQuantity: string = stakingContract.methods\n      .earned(account)\n      .call()\n\n    return earnedTokenQuantity\n  } catch (e) {\n    console.log(e)\n\n    return '0'\n  }\n}\n\nexport const claimEarnedIndexLpReward = (\n  provider: provider,\n  account: string\n): Promise<string | null> => {\n  const stakingContract = getStakingRewardsContract(provider)\n\n  return new Promise((resolve) => {\n    stakingContract.methods\n      .getReward()\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (txId: string) => {\n        if (!txId) resolve(null)\n\n        resolve(txId)\n      })\n      .on('error', (error: any) => {\n        console.log(error)\n        resolve(null)\n      })\n  })\n}\n\nexport const unstakeAndClaimEarnedIndexLpReward = (\n  provider: provider,\n  account: string\n): Promise<string | null> => {\n  const stakingContract = getStakingRewardsContract(provider)\n\n  return new Promise((resolve) => {\n    stakingContract.methods\n      .exit()\n      .send({ from: account, gas: 250000 })\n      .on('transactionHash', (txId: string) => {\n        if (!txId) resolve(null)\n\n        resolve(txId)\n      })\n      .on('error', (error: any) => {\n        console.log(error)\n        resolve(null)\n      })\n  })\n}\n\n// Currently set for 12pm PST Dec. 7th\nexport const farmTwoStartTime = '1607371200000'\n"]},"metadata":{},"sourceType":"module"}