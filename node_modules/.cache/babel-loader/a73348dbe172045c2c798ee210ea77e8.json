{"ast":null,"code":"export function defer() {\n  var resolve, reject;\n  var promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n\n  return {\n    promise: promise,\n    resolve: resolve,\n    reject: reject\n  };\n} // TODO use bip32-path library\n\nexport function splitPath(path) {\n  var result = [];\n  var components = path.split(\"/\");\n  components.forEach(function (element) {\n    var number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\nexport function eachSeries(arr, fun) {\n  return arr.reduce(function (p, e) {\n    return p.then(function () {\n      return fun(e);\n    });\n  }, Promise.resolve());\n}\nexport function foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(function () {\n    return iterate(0, arr, []);\n  });\n}\nexport function doIf(condition, callback) {\n  return Promise.resolve().then(function () {\n    if (condition) {\n      return callback();\n    }\n  });\n}\nexport function asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(function (res) {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"AAqBA,OAAM,SAAU,KAAV,GAAe;AACnB,MAAI,OAAJ,EAAa,MAAb;AACA,MAAM,OAAO,GAAG,IAAI,OAAJ,CAAe,UAAU,OAAV,EAAmB,OAAnB,EAA0B;AACvD,IAAA,OAAO,GAAG,OAAV;AACA,IAAA,MAAM,GAAG,OAAT;AACD,GAHe,CAAhB;AAIA,MAAI,CAAC,OAAD,IAAY,CAAC,MAAjB,EAAyB,MAAM,eAAN,CANN,CAM6B;;AAEhD,SAAO;AACL,IAAA,OAAO,EAAA,OADF;AAEL,IAAA,OAAO,EAAA,OAFF;AAGL,IAAA,MAAM,EAAA;AAHD,GAAP;AAKD,C,CACD;;AACA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAAgC;AACpC,MAAM,MAAM,GAAa,EAAzB;AACA,MAAM,UAAU,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAnB;AACA,EAAA,UAAU,CAAC,OAAX,CAAmB,UAAC,OAAD,EAAQ;AACzB,QAAI,MAAM,GAAG,QAAQ,CAAC,OAAD,EAAU,EAAV,CAArB;;AAEA,QAAI,KAAK,CAAC,MAAD,CAAT,EAAmB;AACjB,aADiB,CACT;AACT;;AAED,QAAI,OAAO,CAAC,MAAR,GAAiB,CAAjB,IAAsB,OAAO,CAAC,OAAO,CAAC,MAAR,GAAiB,CAAlB,CAAP,KAAgC,GAA1D,EAA+D;AAC7D,MAAA,MAAM,IAAI,UAAV;AACD;;AAED,IAAA,MAAM,CAAC,IAAP,CAAY,MAAZ;AACD,GAZD;AAaA,SAAO,MAAP;AACD,C,CACD;;AACA,OAAM,SAAU,UAAV,CACJ,GADI,EAEJ,GAFI,EAE0B;AAE9B,SAAO,GAAG,CAAC,MAAJ,CAAW,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,WAAA,CAAC,CAAC,IAAF,CAAO,YAAA;AAAM,aAAA,GAAG,CAAH,CAAG,CAAH;AAAb,KAAA,CAAA;AAAoB,GAAzC,EAA2C,OAAO,CAAC,OAAR,EAA3C,CAAP;AACD;AACD,OAAM,SAAU,OAAV,CACJ,GADI,EAEJ,QAFI,EAE2C;AAE/C,WAAS,OAAT,CAAiB,KAAjB,EAAwB,KAAxB,EAA+B,MAA/B,EAAqC;AACnC,QAAI,KAAK,IAAI,KAAK,CAAC,MAAnB,EAA2B;AACzB,aAAO,MAAP;AACD,KAFD,MAGE,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAD,CAAN,EAAe,KAAf,CAAR,CAA8B,IAA9B,CAAmC,UAAU,GAAV,EAAa;AACrD,MAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACA,aAAO,OAAO,CAAC,KAAK,GAAG,CAAT,EAAY,KAAZ,EAAmB,MAAnB,CAAd;AACD,KAHM,CAAP;AAIH;;AAED,SAAO,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAAA;AAAM,WAAA,OAAO,CAAC,CAAD,EAAI,GAAJ,EAAP,EAAO,CAAP;AAAmB,GAAhD,CAAP;AACD;AACD,OAAM,SAAU,IAAV,CACJ,SADI,EAEJ,QAFI,EAE8B;AAElC,SAAO,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAAA;AAC5B,QAAI,SAAJ,EAAe;AACb,aAAO,QAAQ,EAAf;AACD;AACF,GAJM,CAAP;AAKD;AACD,OAAM,SAAU,UAAV,CACJ,SADI,EAEJ,QAFI,EAEsB;AAE1B,WAAS,OAAT,CAAiB,MAAjB,EAAuB;AACrB,QAAI,CAAC,SAAS,EAAd,EAAkB;AAChB,aAAO,MAAP;AACD,KAFD,MAEO;AACL,aAAO,QAAQ,GAAG,IAAX,CAAgB,UAAC,GAAD,EAAI;AACzB,QAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACA,eAAO,OAAO,CAAC,MAAD,CAAd;AACD,OAHM,CAAP;AAID;AACF;;AAED,SAAO,OAAO,CAAC,OAAR,CAAgB,EAAhB,EAAoB,IAApB,CAAyB,OAAzB,CAAP;AACD","sourceRoot":"","sourcesContent":["export function defer() {\n    var resolve, reject;\n    var promise = new Promise(function (success, failure) {\n        resolve = success;\n        reject = failure;\n    });\n    if (!resolve || !reject)\n        throw \"defer() error\"; // this never happens and is just to make flow happy\n    return {\n        promise: promise,\n        resolve: resolve,\n        reject: reject\n    };\n}\n// TODO use bip32-path library\nexport function splitPath(path) {\n    var result = [];\n    var components = path.split(\"/\");\n    components.forEach(function (element) {\n        var number = parseInt(element, 10);\n        if (isNaN(number)) {\n            return; // FIXME shouldn't it throws instead?\n        }\n        if (element.length > 1 && element[element.length - 1] === \"'\") {\n            number += 0x80000000;\n        }\n        result.push(number);\n    });\n    return result;\n}\n// TODO use async await\nexport function eachSeries(arr, fun) {\n    return arr.reduce(function (p, e) { return p.then(function () { return fun(e); }); }, Promise.resolve());\n}\nexport function foreach(arr, callback) {\n    function iterate(index, array, result) {\n        if (index >= array.length) {\n            return result;\n        }\n        else\n            return callback(array[index], index).then(function (res) {\n                result.push(res);\n                return iterate(index + 1, array, result);\n            });\n    }\n    return Promise.resolve().then(function () { return iterate(0, arr, []); });\n}\nexport function doIf(condition, callback) {\n    return Promise.resolve().then(function () {\n        if (condition) {\n            return callback();\n        }\n    });\n}\nexport function asyncWhile(predicate, callback) {\n    function iterate(result) {\n        if (!predicate()) {\n            return result;\n        }\n        else {\n            return callback().then(function (res) {\n                result.push(res);\n                return iterate(result);\n            });\n        }\n    }\n    return Promise.resolve([]).then(iterate);\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}