'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __generator=this&&this.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1];},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),'throw':verb(1),'return':verb(2)},typeof Symbol==='function'&&(g[Symbol.iterator]=function(){return this;}),g;function verb(n){return function(v){return step([n,v]);};}function step(op){if(f)throw new TypeError('Generator is already executing.');while(_)try{if(f=1,y&&(t=op[0]&2?y['return']:op[0]?y['throw']||((t=y['return'])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue;}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break;}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break;}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break;}if(t[2])_.ops.pop();_.trys.pop();continue;}op=body.call(thisArg,_);}catch(e){op=[6,e];y=0;}finally{f=t=0;}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true};}};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});var ERC20Wrapper_1=__importDefault(require('../wrappers/set-protocol-v2/ERC20Wrapper'));var assertions_1=__importDefault(require('../assertions'));var ERC20API=function(){function ERC20API(provider,assertions){this.erc20Wrapper=new ERC20Wrapper_1.default(provider);this.assert=assertions||new assertions_1.default();}ERC20API.prototype.getBalanceAsync=function(tokenAddress,userAddress,callerAddress){if(callerAddress===void 0){callerAddress=undefined;}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.assert.schema.isValidAddress('tokenAddress',tokenAddress);this.assert.schema.isValidAddress('userAddress',userAddress);return[2,this.erc20Wrapper.balanceOf(tokenAddress,userAddress,callerAddress)];});});};ERC20API.prototype.getTokenNameAsync=function(tokenAddress,callerAddress){if(callerAddress===void 0){callerAddress=undefined;}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.assert.schema.isValidAddress('tokenAddress',tokenAddress);return[2,this.erc20Wrapper.name(tokenAddress,callerAddress)];});});};ERC20API.prototype.getTokenSymbolAsync=function(tokenAddress,callerAddress){if(callerAddress===void 0){callerAddress=undefined;}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.assert.schema.isValidAddress('tokenAddress',tokenAddress);return[2,this.erc20Wrapper.symbol(tokenAddress,callerAddress)];});});};ERC20API.prototype.getTotalSupplyAsync=function(tokenAddress,callerAddress){if(callerAddress===void 0){callerAddress=undefined;}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.assert.schema.isValidAddress('tokenAddress',tokenAddress);return[2,this.erc20Wrapper.totalSupply(tokenAddress,callerAddress)];});});};ERC20API.prototype.getDecimalsAsync=function(tokenAddress,callerAddress){if(callerAddress===void 0){callerAddress=undefined;}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.assert.schema.isValidAddress('tokenAddress',tokenAddress);return[2,this.erc20Wrapper.decimals(tokenAddress,callerAddress)];});});};ERC20API.prototype.getAllowanceAsync=function(tokenAddress,ownerAddress,spenderAddress,callerAddress){if(callerAddress===void 0){callerAddress=undefined;}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.assert.schema.isValidAddress('tokenAddress',tokenAddress);this.assert.schema.isValidAddress('ownerAddress',ownerAddress);this.assert.schema.isValidAddress('spenderAddress',spenderAddress);return[2,this.erc20Wrapper.allowance(tokenAddress,ownerAddress,spenderAddress,callerAddress)];});});};ERC20API.prototype.transferAsync=function(tokenAddress,to,value,callerAddress,txOpts){if(callerAddress===void 0){callerAddress=undefined;}if(txOpts===void 0){txOpts={};}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:this.assert.schema.isValidAddress('tokenAddress',tokenAddress);this.assert.schema.isValidAddress('toAddress',to);this.assert.schema.isValidNumber('value',value);return[4,this.erc20Wrapper.transfer(tokenAddress,to,value,callerAddress,txOpts)];case 1:return[2,_a.sent()];}});});};ERC20API.prototype.approveProxyAsync=function(tokenAddress,spenderAddress,value,callerAddress,txOpts){if(callerAddress===void 0){callerAddress=undefined;}if(txOpts===void 0){txOpts={};}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.assert.schema.isValidAddress('tokenAddress',tokenAddress);this.assert.schema.isValidAddress('spenderAddress',spenderAddress);this.assert.schema.isValidNumber('value',value);return[2,this.erc20Wrapper.approve(tokenAddress,spenderAddress,value,callerAddress,txOpts)];});});};ERC20API.prototype.proxyTransferAsync=function(tokenAddress,from,to,value,callerAddress,txOpts){if(callerAddress===void 0){callerAddress=undefined;}if(txOpts===void 0){txOpts={};}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.assert.schema.isValidAddress('tokenAddress',tokenAddress);this.assert.schema.isValidAddress('toAddress',to);this.assert.schema.isValidAddress('fromAddress',from);this.assert.schema.isValidNumber('value',value);return[2,this.erc20Wrapper.transferFrom(tokenAddress,from,to,value,callerAddress,txOpts)];});});};return ERC20API;}();exports.default=ERC20API;