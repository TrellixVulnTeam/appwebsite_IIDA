import { ContractTransaction } from 'ethers';
import { Provider } from '@ethersproject/providers';
import { Address } from '@setprotocol/set-protocol-v2/utils/types';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
import { BigNumber } from 'ethers/lib/ethers';
import Assertions from '../assertions';
import { StreamingFeeInfo } from '../types';
/**
 * @title  FeeAPI
 * @author Set Protocol
 *
 * The FeeAPI exposes functions that allow the manager to update various fees associated
 * with Sets through the modules
 *
 */
export default class FeeAPI {
    private streamingFeeModuleWrapper;
    private protocolViewerWrapper;
    private assert;
    constructor(provider: Provider, protocolViewerAddress: Address, streamingFeeIssuanceModuleAddress: Address, assertions?: Assertions);
    /**
     * Initializes the StreamingFeeModule to the SetToken. Only callable by the SetToken's manager.
     *
     * @param setTokenAddress             Address of the SetToken to initialize
     * @param feeRecipient                Address of the recipient of the fee
     * @param streamingFeePercentage      Percentage of the fee to receive
     * @param maxStreamingFeePercentage   Max streaming fee percentage
     * @param lastStreamingFeeTimestamp   Last timestamp of the streaming fee
     * @param callerAddress               Address of caller (optional)
     * @param txOpts                      Overrides for transaction (optional)
     *
     * @return                            Transaction hash of the initialize transaction
     */
    initializeAsync(setTokenAddress: Address, feeRecipient: Address, streamingFeePercentage: BigNumber, maxStreamingFeePercentage: BigNumber, lastStreamingFeeTimestamp: BigNumber, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Fetches the streaming fee info of set tokens
     *
     * @param  tokenAddresses    Addresses of ERC20 contracts to check balance for
     * @returns                  Array of streaming fee infos
     */
    batchFetchStreamingFeeInfoAsync(tokenAddresses: Address[]): Promise<StreamingFeeInfo[]>;
    /**
     * Accrue the streaming fees for a SetToken. StreamingFeeModule must have been initialized
     *
     * @param  setAddress      Address of the Set
     * @param  callerAddress   Address of caller (optional)
     * @param  txOpts          Overrides for transaction (optional)
     * @return                 Transaction hash
     */
    accrueStreamingFeesAsync(setTokenAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Update the streaming fee percentage for a SetToken. StreamingFeeModule must have been initialized
     *
     * @param  setAddress       Address of the Set
     * @param  newFee           New streaming fee amount in percentage
     * @param  callerAddress    Address of caller (optional)
     * @param  txOpts           Overrides for transaction (optional)
     * @return                  Transaction hash
     */
    updateStreamingFeeAsync(setTokenAddress: Address, newFee: BigNumber, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Update fee recipient for a SetToken. StreamingFeeModule must have been initialized
     *
     * @param  setAddress            Address of the Set
     * @param  newRecipientAddress   The address of the new fee recipient
     * @param  callerAddress         Address of caller (optional)
     * @param  txOpts                Overrides for transaction (optional)
     * @return                       Transaction hash
     */
    updateStreamingFeeRecipient(setTokenAddress: Address, newRecipientAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Fetch unaccrued fees as percentage of the SetToken's current supply
     *
     * @param  setAddress    Address of the Set
     * @return               Transaction hash
     */
    getUnaccruedStreamingFeesAsync(setTokenAddress: Address): Promise<BigNumber>;
}
