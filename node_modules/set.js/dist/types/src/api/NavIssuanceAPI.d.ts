import { ContractTransaction } from 'ethers';
import { Provider } from '@ethersproject/providers';
import { Address, NAVIssuanceSettings } from '@setprotocol/set-protocol-v2/utils/types';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
import { BigNumber } from 'ethers/lib/ethers';
import Assertions from '../assertions';
/**
 * @title  NavIssuanceAPI
 * @author Set Protocol
 *
 * The NavIssuanceAPI exposes issuance and redemption functions of the NavIssuanceModule
 * to allow minting and redeeming of SetTokens based on the Net Asset Value.
 *
 */
export default class NavIssuanceAPI {
    private navIssuanceModuleWrapper;
    private assert;
    constructor(provider: Provider, navIssuanceModuleAddress: Address, assertions?: Assertions);
    /**
     * Initializes the NavIssuanceModule to the SetToken. Only callable by the SetToken's manager.
     *
     * @param setTokenAddress             Address of the SetToken to initialize
     * @param navIssuanceSettings         Settings for the NavIssuanceModule
     * @param callerAddress               Address of caller (optional)
     * @param txOpts                      Overrides for transaction (optional)
     *
     * @return                            Transaction hash of the initialize transaction
     */
    initializeAsync(setTokenAddress: Address, navIssuanceSettings: NAVIssuanceSettings, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Deposits the allowed reserve asset into the SetToken and mints the appropriate % of Net Asset Value of the SetToken
     * to the specified to address.
     *
     * @param setTokenAddress              Address of the SetToken contract
     * @param reserveAsset                 Address of the reserve asset to issue with
     * @param reserveAssetQuantity         Quantity of the reserve asset to issue with
     * @param minSetTokenReceiveQuantity   Min quantity of SetToken to receive after issuance
     * @param to                           Address to mint SetToken to
     * @param callerAddress                Address of caller (optional)
     * @param txOpts                       Overrides for transaction (optional)
     *
     * @return                             Transaction hash of the trade transaction
     */
    issueAsync(setTokenAddress: Address, reserveAsset: Address, reserveAssetQuantity: BigNumber, minSetTokenReceiveQuantity: BigNumber, to: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Wraps ETH and deposits WETH if allowed into the SetToken and mints the appropriate % of
     * Net Asset Value of the SetToken to the specified to address.
     *
     * @param setTokenAddress              Address of the SetToken contract
     * @param minSetTokenReceiveQuantity   Min quantity of SetToken to receive after issuance
     * @param to                           Address to mint SetToken to
     * @param callerAddress                Address of caller (optional)
     * @param txOpts                       Overrides for transaction (optional)
     *
     * @return                             Transaction hash of the trade transaction
     */
    issueWithEtherAsync(setTokenAddress: Address, quantity: BigNumber, setTokenRecipientAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Redeems a SetToken into a valid reserve asset representing the appropriate % of Net Asset Value of the SetToken
     * to the specified to address. Only valid if there are available reserve units on the SetToken.
     *
     * @param setTokenAddress              Address of the SetToken contract
     * @param reserveAsset                 Address of the reserve asset to redeem with
     * @param setTokenQuantity             Quantity of SetTokens to redeem
     * @param minReserveReceiveQuantity    Min quantity of reserve asset to receive
     * @param to                           Address to redeem reserve asset to
     * @param callerAddress                Address of caller (optional)
     * @param txOpts                       Overrides for transaction (optional)
     *
     * @return                             Transaction hash of the trade transaction
     */
    redeemAsync(setTokenAddress: Address, reserveAsset: Address, setTokenQuantity: BigNumber, minReserveReceiveQuantity: BigNumber, to: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Redeems a SetToken into Ether (if WETH is valid) representing the appropriate % of Net Asset Value of the SetToken
     * to the specified to address. Only valid if there are available WETH units on the SetToken.
     *
     * @param setTokenAddress              Address of the SetToken contract
     * @param setTokenQuantity             Quantity of SetTokens to redeem
     * @param minReserveReceiveQuantity    Min quantity of reserve asset to receive
     * @param to                           Address to redeem reserve asset to
     * @param callerAddress                Address of caller (optional)
     * @param txOpts                       Overrides for transaction (optional)
     *
     * @return                             Transaction hash of the trade transaction
     */
    redeemIntoEtherAsync(setTokenAddress: Address, setTokenQuantity: BigNumber, minReserveReceiveQuantity: BigNumber, to: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Get reserve asset addresses for token
     *
     * @param setTokenAddress              Address of the SetToken contract
     *
     * @return                             Returns the reserve asset addresses for token
     */
    getReserveAssetsAsync(setTokenAddress: Address): Promise<Address[]>;
    /**
     * Get boolean to see if reserve asset is valid
     *
     * @param setTokenAddress              Address of the SetToken contract
     * @param reserveAsset                 Address of reserve asset token
     *
     * @return                             Returns true if reserve asset is valid
     */
    isReserveAssetAsync(setTokenAddress: Address, reserveAsset: Address): Promise<boolean>;
    /**
     * Get the issue premium of the set
     *
     * @param setTokenAddress              Address of the SetToken contract
     * @param reserveAsset                 Address of reserve asset token
     * @param reserveAssetQuantity         Quantity being used for reserve asset
     *
     * @return                             Returns the issue premium amount
     */
    getIssuePremiumAsync(setTokenAddress: Address, reserveAsset: Address, reserveAssetQuantity: BigNumber): Promise<BigNumber>;
    /**
     * Get the redeem premium of the set
     *
     * @param setTokenAddress              Address of the SetToken contract
     * @param reserveAsset                 Address of reserve asset token
     * @param setTokenQuantity             Quantity being redeemed
     *
     * @return                             Returns the redeem premium amount
     */
    getRedeemPremiumAsync(setTokenAddress: Address, reserveAsset: Address, setTokenQuantity: BigNumber): Promise<BigNumber>;
    /**
     * Get the manager fee of the set
     *
     * @param setTokenAddress              Address of the SetToken contract
     * @param managerFeeIndex              Index of manager fee to check
     *
     * @return                             The manager fee
     */
    getManagerFeeAsync(setTokenAddress: Address, managerFeeIndex: BigNumber): Promise<BigNumber>;
    /**
     * Get the expected SetTokens minted to recipient on issuance
     *
     * @param setTokenAddress               Address of the SetToken
     * @param reserveAsset                  Address of the reserve asset
     * @param reserveAssetQuantity          Quantity of the reserve asset to issue with
     *
     * @return                              Expected amount of set tokens minted
     */
    getExpectedSetTokenIssueQuantityAsync(setTokenAddress: Address, reserveAsset: Address, reserveAssetQuantity: BigNumber): Promise<BigNumber>;
    /**
     * Get the expected reserve asset to be redeemed
     *
     * @param setTokenAddress              Address of the SetToken
     * @param reserveAsset                 Address of the reserve asset
     * @param setTokenQuantity             Quantity of SetTokens to redeem
     *
     * @return                             Expected reserve asset quantity redeemed
     */
    getExpectedReserveRedeemQuantityAsync(setTokenAddress: Address, reserveAsset: Address, setTokenQuantity: BigNumber): Promise<BigNumber>;
    /**
     * Checks if issue is valid
     *
     * @param setTokenAddress              Address of the SetToken
     * @param reserveAsset                 Address of the reserve asset
     * @param reserveAssetQuantity         Quantity of the reserve asset to issue with
     *
     * @return                             Returns true if issue is valid
     */
    isIssueValidAsync(setTokenAddress: Address, reserveAsset: Address, reserveAssetQuantity: BigNumber): Promise<boolean>;
    /**
     * Checks if redeem is valid
     *
     * @param setTokenAddress              Address of the SetToken
     * @param reserveAsset                 Address of the reserve asset
     * @param setTokenQuantity             Quantity of SetTokens to redeem
     *
     * @return                             Returns true if redeem is valid
     */
    isRedeemValidAsync(setTokenAddress: Address, reserveAsset: Address, setTokenQuantity: BigNumber): Promise<boolean>;
}
