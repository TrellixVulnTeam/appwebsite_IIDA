import { ContractTransaction } from 'ethers';
import { Provider } from '@ethersproject/providers';
import { BigNumber } from 'ethers/lib/ethers';
import { Address, Position } from '@setprotocol/set-protocol-v2/utils/types';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
import Assertions from '../assertions';
import { ModuleState, SetDetails, SetDetailsWithStreamingInfo } from '../types';
/**
 * @title  SetTokenWrapper
 * @author Set Protocol
 *
 * The Set Token wrapper handles all functions on the SetToken smart contract.
 *
 */
export default class SetTokenAPI {
    private setTokenWrapper;
    private setTokenCreatorWrapper;
    private protocolViewerWrapper;
    private protocolUtils;
    private assert;
    private streamingFeeModuleAddress;
    constructor(provider: Provider, protocolViewerAddress: Address, streamingFeeModuleAddress: Address, setTokenCreatorAddress: Address, assertions?: Assertions);
    /**
     * Instantiates and registers a new Set Token.
     *
     * @param componentAddresses    List of component addresses that will comprise a Set's initial positions.
     * @param units                 List of units. Each unit is the # of components per 10^18 of this Set Token.
     * @param moduleAddresses       List of modules to enable. All modules must be approved by the Controller.
     * @param managerAddress        Address of the manager.
     * @param name                  The Set Token's name.
     * @param symbol                The Set Token's symbol identifier.
     * @param callerAddress         Address of caller (optional)
     *
     * @return            Address of newly instantiated Set Token.
     */
    createAsync(componentAddresses: Address[], units: BigNumber[], moduleAddresses: Address[], managerAddress: Address, name: string, symbol: string, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    getSetAddressFromCreateHash(txHash: string): Promise<Address>;
    /**
     * Fetches the details of the SetToken. Accepts an array of module addresses and returns
     * the initialization statuses of each of the modules for the SetToken
     *
     * @param  setTokenAddress    Address of SetToken to fetch details for
     * @param  moduleAddresses    Addresses of ERC20 contracts to check balance for
     * @param  callerAddress      Address to use as the caller (optional)
     */
    fetchSetDetailsAsync(setTokenAddress: Address, moduleAddresses: Address[], callerAddress?: Address): Promise<SetDetails | SetDetailsWithStreamingInfo>;
    /**
     * Fetches the details of multiple SetToken contract. Accepts an array of module addresses
     * and returns the initialization statuses of each of the modules for the SetToken
     *
     * @param  setTokenAddresses   Addresses of SetToken to fetch details for
     * @param  moduleAddresses     Addresses of ERC20 contracts to check balance for
     * @param  callerAddress       Address to use as the caller (optional)
     */
    batchFetchSetDetailsAsync(setTokenAddresses: Address[], moduleAddresses: Address[], callerAddress?: Address): Promise<SetDetails[]>;
    /**
     * Fetches the managers of set tokens
     *
     * @param  tokenAddresses Addresses of ERC20 contracts to check balance for
     * @returns               Addresses of managers of the set tokens
     */
    batchFetchManagersAsync(tokenAddresses: Address[]): Promise<Address[]>;
    /**
     * Batch fetches balances for a list of tokens for a given owner
     * @param   tokenAddresses Array of ERC20 token addresses
     * @param   userAddress    Address of the user
     * @returns                The balances of the ERC20 tokens for the user in array of BigNumbers format
     */
    batchFetchBalancesOfAsync(tokenAddresses: Address[], userAddress: Address, callerAddress?: Address): Promise<BigNumber[]>;
    /**
     * Batch fetches allowances for a list of tokens for a given owners/spenders
     * @param   tokenAddresses Array of ERC20 token addresses
     * @param   ownerAddress   Owner address to check for
     * @param   spenderAddress Spender address to check for
     * @returns                The allowances of the ERC20 tokens for the owner, spender in array of BigNumbers format
     */
    batchFetchAllowancesAsync(tokenAddresses: Address[], ownerAddress: Address, spenderAddress: Address, callerAddress?: Address): Promise<BigNumber[]>;
    /**
     * Gets the controller address of a target Set Token.
     *
     * @param  setAddress    Address of the Set.
     * @return               Address of the controller.
     */
    getControllerAddressAsync(setAddress: Address): Promise<string>;
    /**
     * Gets the manager address of the target Set Token.
     *
     * @param  setAddress    Address of the Set.
     * @return               Address of the manager.
     */
    getManagerAddressAsync(setAddress: Address): Promise<Address>;
    /**
     * Gets all current positions on the target Set Token.
     *
     * @param  setAddress      Address of the Set.
     * @return                 Array of current Set Positions.
     */
    getPositionsAsync(setAddress: Address, callerAddress?: Address): Promise<Position[]>;
    /**
     * Returns a list of modules for the target Set Token.
     *
     * @param  setAddress      Address of the Set.
     * @return                 Array of module addresses.
     */
    getModulesAsync(setAddress: Address, callerAddress?: Address): Promise<Address[]>;
    /**
     * Get the target module initialization state for the target Set Token.
     *
     * @param  setAddress      Address of the Set.
     * @param  moduleAddress   Address of the module state to check.
     * @return                 An integer representing module state.
     */
    getModuleStateAsync(setAddress: Address, moduleAddress: Address, callerAddress?: Address): Promise<ModuleState>;
    /**
     * Add a module via address to the target Set token.
     *
     * @param  setAddress      Address of the Set.
     * @param  moduleAddress   Address of the module to be added.
     * @param  callerAddress   Address of caller (optional).
     * @param  txOpts          Overrides for transaction (optional).
     * @return                 Transaction hash.
     */
    addModuleAsync(setAddress: Address, moduleAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Sets the manager of the target Set token.
     *
     * @param  setAddress      Address of the Set.
     * @param  callerAddress   Address of caller (optional).
     * @param  txOpts          Overrides for transaction (optional).
     * @return                 Transaction hash.
     */
    setManagerAsync(setAddress: Address, managerAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Initialize a module on the target Set.
     *
     * @param  setAddress    Address Set to issue.
     * @param  callerAddress Address of caller (optional).
     * @param  txOpts        Overrides for transaction (optional).
     * @return               Contract transaction.
     */
    initializeModuleAsync(setAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Returns true if the given address is an enabled module on the target Set.
     *
     * @param  setAddress     Address of Set to check
     * @param  moduleAddress  Address of potential module
     * @return                boolean
     */
    isModuleEnabledAsync(setAddress: Address, moduleAddress: Address, callerAddress?: Address): Promise<boolean>;
    /**
     * Returns true if the given module is in "pending" state for the target Set.
     *
     * @param  setAddress    Address of Set to check
     * @param  moduleAddress Address of module
     * @return               boolean
     */
    isModulePendingAsync(setAddress: Address, moduleAddress: Address, callerAddress?: Address): Promise<boolean>;
}
