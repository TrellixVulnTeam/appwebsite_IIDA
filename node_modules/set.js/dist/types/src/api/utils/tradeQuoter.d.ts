import { QuoteOptions, TradeQuote } from '../../types/index';
export declare const ZERO_EX_ADAPTER_NAME = "ZeroExApiAdapterV4";
/**
 * @title TradeQuote
 * @author Set Protocol
 *
 * A utility library to generate trade quotes for token pairs associated with a
 * set for Ethereum and Polygon chains. Uses 0xAPI to get quote and requires a valid
 * 0x api key.
 */
export declare class TradeQuoter {
    private tradeQuoteGasBuffer;
    private feeRecipient;
    private feePercentage;
    private isFirmQuote;
    private slippagePercentage;
    private excludedSources;
    private zeroExApiKey;
    constructor(zeroExApiKey?: string);
    /**
     * Generates a trade quote for a token pair in a SetToken. This method requires
     * a token metadata map (passed with the options) which can be generated using
     * the CoinGeckoDataService in '.api/utils/coingecko.ts'.
     *
     * @param  options  QuoteOptions: options / config to generate the quote
     * @return          TradeQuote: trade quote object
     */
    generate(options: QuoteOptions): Promise<TradeQuote>;
    private sanitizeAddress;
    private sanitizeAmount;
    private fetchZeroExQuote;
    private validateQuoteValues;
    private calculateFromTokenAmount;
    private tokenDisplayAmount;
    private chainCurrencyAddress;
    private normalizeTokenAmount;
    private tokenPriceUsd;
    private formatAsPercentage;
    private totalGasCost;
    private gasCostsUsd;
    private gasCostsChainCurrency;
    private chainCurrency;
    private estimateGasCost;
    private calculateSlippage;
    private outputSlippageTolerance;
}
