import { CoinGeckoCoinPrices, CoinGeckoTokenData, CoinGeckoTokenMap, CoinPricesParams } from '../../types';
/**
 * These currency codes can be used for the vs_currencies parameter of the service's
 * fetchCoinPrices method
 *
 * @type {number}
 */
export declare const USD_CURRENCY_CODE = "usd";
export declare const ETH_CURRENCY_CODE = "eth";
/**
 * @title CoinGeckoDataService
 * @author Set Protocol
 *
 * A utility library for fetching token metadata and coin prices from Coingecko for Ethereum
 * and Polygon chains
 */
export declare class CoinGeckoDataService {
    chainId: number;
    private tokenList;
    private tokenMap;
    private assert;
    constructor(chainId: number);
    /**
     * Gets address-to-price map of token prices for a set of token addresses and currencies
     *
     * @param  params             CoinPricesParams: token addresses and currency codes
     * @return                    CoinGeckoCoinPrices: Address to price map
     */
    fetchCoinPrices(params: CoinPricesParams): Promise<CoinGeckoCoinPrices>;
    /**
     * Gets a list of available tokens and their metadata for chain. If Ethereum, the list
     * is sourced from Uniswap. If Polygon the list is sourced from Sushiswap with image assets
     * derived from multiple sources including CoinGecko
     *
     * @return  CoinGeckoTokenData: array of token data
     */
    fetchTokenList(): Promise<CoinGeckoTokenData[]>;
    /**
     * Gets a token list (see above) formatted as an address indexed map
     *
     * @return  CoinGeckoTokenMap: map of token addresses to token metadata
     */
    fetchTokenMap(): Promise<CoinGeckoTokenMap>;
    convertTokenListToAddressMap(list?: CoinGeckoTokenData[]): CoinGeckoTokenMap;
    private getPlatform;
    private fetchEthereumTokenList;
    private fetchPolygonTokenList;
    private fetchSushiPolygonTokenList;
    private fetchPolygonMappedTokenList;
    private fetchQuickswapPolygonTokenList;
}
