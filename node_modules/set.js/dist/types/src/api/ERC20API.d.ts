import { Address } from '@setprotocol/set-protocol-v2/utils/types';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
import { BigNumber, ContractTransaction } from 'ethers/lib/ethers';
import { Provider } from '@ethersproject/providers';
import Assertions from '../assertions';
/**
 * @title  ERC20Wrapper
 * @author Set Protocol
 *
 * The ERC20API exposes basic functionality common to all ERC-20 tokens.
 *
 */
export default class ERC20API {
    private assert;
    private erc20Wrapper;
    constructor(provider: Provider, assertions?: Assertions);
    /**
     * Gets balance of the ERC20 token
     *
     * @param  tokenAddress  Address of the ERC20 token
     * @param  userAddress   Address of the user
     * @param  callerAddress Optional. The address of user transferring from.
     * @return               The balance of the ERC20 token in BigNumber format
     */
    getBalanceAsync(tokenAddress: Address, userAddress: Address, callerAddress?: Address): Promise<BigNumber>;
    /**
     * Gets name of the ERC20 token
     *
     * @param  tokenAddress  Address of the ERC20 token
     * @param  callerAddress Optional. The address of user transferring from.
     * @return               The name of the ERC20 token
     */
    getTokenNameAsync(tokenAddress: Address, callerAddress?: Address): Promise<string>;
    /**
     * Gets symbol of the ERC20 token
     *
     * @param  tokenAddress  Address of the ERC20 token
     * @param  callerAddress Optional. The address of user transferring from.
     * @return               The symbol of the ERC20 token
     */
    getTokenSymbolAsync(tokenAddress: Address, callerAddress?: Address): Promise<string>;
    /**
     * Gets the total supply of the ERC20 token
     *
     * @param  tokenAddress  Address of the ERC20 token
     * @param  callerAddress Optional. The address of user transferring from.
     * @return               The total supply of ERC-20 in BigNumber format
     */
    getTotalSupplyAsync(tokenAddress: Address, callerAddress?: Address): Promise<BigNumber>;
    /**
     * Gets decimals of the ERC20 token
     *
     * @param  tokenAddress  Address of the ERC20 token
     * @param  callerAddress Optional. The address of user transferring from.
     * @return               The decimals of the ERC20 token
     */
    getDecimalsAsync(tokenAddress: Address, callerAddress?: Address): Promise<number>;
    /**
     * Gets the token allowance of the spender by the owner account
     *
     * @param  tokenAddress      Address of the token
     * @param  ownerAddress      Address of the owner
     * @param  spenderAddress    Address of the spender
     * @param  callerAddress     Optional. The address of user transferring from.
     * @return                   The allowance of the spender in BigNumber format
     */
    getAllowanceAsync(tokenAddress: Address, ownerAddress: Address, spenderAddress: Address, callerAddress?: Address): Promise<BigNumber>;
    /**
     * Asynchronously transfer target ERC20 tokens from the caller's wallet to
     * the target address
     *
     * @param  tokenAddress   The address of the token being transferred.
     * @param  to             To whom the transfer is being made.
     * @param  value          The amount being transferred.
     * @param  callerAddress  Optional. The address of user transferring from.
     * @param  txOpts         Optional. Any parameters necessary to modify the transaction.
     * @return                The approval transaction hash.
     */
    transferAsync(tokenAddress: Address, to: Address, value: BigNumber, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Approve a proxy address to conduct tokens transfers from the method caller's wallet.
     *
     * @param  tokenAddress         The address of the token being transferred.
     * @param  spenderAddress       The proxy address that is being approved.
     * @param  value                The spendable token quantity being approved.
     * @param  callerAddress        Optional. The address of user giving the approval.
     * @param  txOpts               Any parameters necessary to modify the transaction.
     * @return                      The approval transaction hash.
     */
    approveProxyAsync(tokenAddress: Address, spenderAddress: Address, value: BigNumber, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Conduct a token transfer on behalf of a target wallet.
     *
     * @param  tokenAddress   The address of the token being transferred.
     * @param  from           From whom are the tokens being transferred.
     * @param  to             To whom are the tokens being transferred.
     * @param  value          The amount to be transferred.
     * @param  callerAddress  Optional. The address of the user conducting transfer.
     * @param  txOpts         Optional. Any parameters necessary to modify the transaction.
     * @return                The transfer transaction hash.
     */
    proxyTransferAsync(tokenAddress: Address, from: Address, to: Address, value: BigNumber, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
}
