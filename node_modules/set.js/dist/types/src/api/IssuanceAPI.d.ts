import { ContractTransaction } from 'ethers';
import { Provider } from '@ethersproject/providers';
import { Address } from '@setprotocol/set-protocol-v2/utils/types';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
import { BigNumber } from 'ethers/lib/ethers';
import Assertions from '../assertions';
/**
 * @title  IssuanceAPI
 * @author Set Protocol
 *
 * The IssuanceAPI exposes simple issuance and redemption functions of the BasicIssuanceModule
 * to allow minting and burning of SetTokens from the Positions of the Set
 *
 */
export default class IssuanceAPI {
    private basicIssuanceModuleWrapper;
    private assert;
    constructor(provider: Provider, basicIssuanceModuleAddress: Address, assertions?: Assertions);
    /**
     * Initializes the BasicIssuanceModule to the SetToken. Only callable by the SetToken's manager.
     *
     * @param setTokenAddress             Address of the SetToken to initialize
     * @param preIssuanceHook             Address of the preIssuanceHook
     * @param callerAddress               Address of caller (optional)
     * @param txOpts                      Overrides for transaction (optional)
     *
     * @return                            Transaction hash of the initialize transaction
     */
    initializeAsync(setTokenAddress: Address, preIssuanceHook?: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Issue SetToken from its Position components. Each token must be approved to the Controller
     *
     * @param  setTokenAddress             Address of the SetToken contract to issue
     * @param  quantity                    Quantity to issue
     * @param  setTokenRecipientAddress    Address of the recipient of the issuance
     * @param  callerAddress               Address of caller (optional)
     * @return                             Transaction hash
     */
    issueAsync(setTokenAddress: Address, quantity: BigNumber, setTokenRecipientAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Redeem a SetToken into its underlying positions
     *
     * @param  setTokenAddress           Address of the SetToken contract
     * @param  quantity                  Quantity to issue
     * @param  setTokenRecipientAddress  Address of recipient of component tokens from redemption
     * @param  callerAddress             Address of caller (optional)
     * @return                           Transaction hash of the redemption transaction
     */
    redeemAsync(setTokenAddress: Address, quantity: BigNumber, setTokenRecipientAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
}
