import { Address, StreamingFeeState } from '@setprotocol/set-protocol-v2/utils/types';
import { ContractTransaction } from 'ethers';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
import { BigNumber } from 'ethers/lib/ethers';
import { Provider } from '@ethersproject/providers';
/**
 * @title  StreamingFeeModuleWrapper
 * @author Set Protocol
 *
 * The StreamingFeeModuleWrapper forwards functionality from the StreamingFeeModule contract.
 *
 */
export default class StreamingFeeModuleWrapper {
    private provider;
    private contracts;
    private streamingFeeModuleAddress;
    constructor(provider: Provider, streamingFeeModuleAddress: Address);
    /**
     * Initializes this module to the SetToken. Only callable by the SetToken's manager.
     *
     * @param setTokenAddress             Address of the SetToken to initialize
     * @param streamingFeeState           Settings for the StreamingFeeModule
     * @param callerAddress               Address of caller (optional)
     * @param txOpts                      Overrides for transaction (optional)
     */
    initialize(setTokenAddress: Address, streamingFeeState: StreamingFeeState, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Calculates total inflation percentage then mints new Sets to the fee recipient.
     *
     * @param  setTokenAddress    Address of the SetToken contract to issue
     * @param  callerAddress      Address of caller (optional)
     * @param  txOpts             Overrides for transaction (optional)
     *
     * @return                    Transaction hash of the issuance transaction
     */
    accrueFee(setTokenAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Updates the streaming fee to a new streaming fee amount.
     *
     * @param  setTokenAddress    Address of the SetToken contract to issue
     * @param  newFee             The new streaming fee amount 18 decimal precision
     * @param  callerAddress      Address of caller (optional)
     * @param  txOpts             Overrides for transaction (optional)
     *
     * @return                    Transaction hash of the issuance transaction
     */
    updateStreamingFee(setTokenAddress: Address, newFee: BigNumber, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Updates the recipient address of the SetToken's streaming fees
     *
     * @param  setTokenAddress        Address of the SetToken contract to issue
     * @param  newRecipientAddress    The address of the new fee recipient
     * @param  callerAddress          Address of caller (optional)
     * @param  txOpts                 Overrides for transaction (optional)
     *
     * @return                        Transaction hash of the issuance transaction
     */
    updateFeeRecipient(setTokenAddress: Address, newRecipientAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Calculates total inflation percentage in order to accrue fees to manager
     *
     * @param  setTokenAddress    Address of the SetToken contract to issue
     * @return                    Current unaccumulate fee amount in percentage of supply
     */
    getFee(setTokenAddress: Address): Promise<BigNumber>;
}
