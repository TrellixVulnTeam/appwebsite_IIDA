import { ContractTransaction } from 'ethers';
import { Provider } from '@ethersproject/providers';
import { Address, Position } from '@setprotocol/set-protocol-v2/utils/types';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
/**
 * @title  SetTokenWrapper
 * @author Set Protocol
 *
 * The Set Token wrapper handles all functions on the SetToken smart contract.
 *
 */
export default class SetTokenWrapper {
    private contracts;
    constructor(provider: Provider);
    /**
     * controller
     *
     * @param  setAddress    Address of Set
     * @return               Controller address of the Set
     */
    controller(setAddress: Address): Promise<Address>;
    /**
     * manager
     *
     * @param  setAddress    Address of Set
     * @return               Manager of the Set
     */
    manager(setAddress: Address): Promise<Address>;
    /**
     * moduleStates
     *
     * @param  setAddress     Address of Set
     * @param  moduleAddress  Address of module state to check
     * @param  callerAddress  Address of caller (optional)
     * @return                An integer representing module state
     */
    moduleStates(setAddress: Address, moduleAddress: Address, callerAddress?: Address): Promise<number>;
    /**
     * addModule
     * Add a module via address to the Set token
     *
     * @param  setAddress    Address Set to issue
     * @param  moduleAddress Address of potential module
     * @param  callerAddress Address of caller (optional)
     * @param  txOpts        Overrides for transaction (optional)
     *
     * @return               Transaction hash
     */
    addModule(setAddress: Address, moduleAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * setManager
     * Sets the manager of the current Set token
     *
     * @param  setAddress    Address Set to issue
     * @param  callerAddress Address of caller (optional)
     * @param  txOpts        Overrides for transaction (optional)
     *
     * @return               Transaction hash
     */
    setManager(setAddress: Address, managerAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * initializeModule
     * Initializes the module on the Set
     *
     * @param  setAddress    Address Set to issue
     * @param  callerAddress Address of caller (optional)
     * @param  txOpts        Overrides for transaction (optional)
     *
     * @return               Contract transaction
     */
    initializeModule(setAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * isInitializedModule
     * Determines if given address is an initialized module
     *
     * @param  setAddress    Address of Set to check
     * @param  moduleAddress Address of potential module
     * @param  callerAddress Address of caller (optional)
     *
     * @return               boolean
     */
    isInitializedModule(setAddress: Address, moduleAddress: Address, callerAddress?: Address): Promise<boolean>;
    /**
     * isPendingModule
     * Determines if a given module address is pending on the Set
     *
     * @param  setAddress    Address of Set to check
     * @param  moduleAddress Address of module
     * @param  callerAddress Address of caller (optional)
     *
     * @return               boolean
     */
    isPendingModule(setAddress: Address, moduleAddress: Address, callerAddress?: Address): Promise<boolean>;
    /**
     * getPositions
     * Returns the list of positions on the SetToken
     *
     * @param  setAddress    Address of Set to get list of positions for
     * @param  callerAddress Address of caller (optional)
     *
     * @return               Array of Positions
     */
    getPositions(setAddress: Address, callerAddress?: Address): Promise<Position[]>;
    /**
     * getModules
     * Returns the list of modules on the SetToken
     *
     * @param  setAddress     Address of Set to get list of modules for
     * @param  callerAddress  Address of caller (optional)
     *
     * @return                Array of module addresses
     */
    getModules(setAddress: Address, callerAddress?: Address): Promise<Address[]>;
}
