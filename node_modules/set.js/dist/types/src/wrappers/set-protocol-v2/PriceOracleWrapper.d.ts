import { Address } from '@setprotocol/set-protocol-v2/utils/types';
import { BigNumber } from 'ethers/lib/ethers';
import { Provider } from '@ethersproject/providers';
/**
 * @title  PriceOracleWrapper
 * @author Set Protocol
 *
 * The PriceOracleWrapper forwards functionality from the PriceOracle contract
 *
 */
export default class PriceOracleWrapper {
    private provider;
    private contracts;
    private masterOracleAddress;
    constructor(provider: Provider, masterOracleAddress: Address);
    /**
     *  Find price of passed asset pair, if possible. The steps it takes are:
     *  1) Check to see if a direct or inverse oracle of the pair exists,
     *  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC
     *     could be used to calculate BTC/USDC).
     *  3) If not, check oracle adapters in case one or more of the assets needs external protocol data
     *     to price.
     *  4) If all steps fail, revert.
     *
     * @param assetOne         Address of first asset in pair
     * @param assetTwo         Address of second asset in pair
     * @return                 Price of asset pair to 18 decimals of precision
     */
    getPrice(assetOne: Address, assetTwo: Address, callerAddress: Address): Promise<BigNumber>;
}
