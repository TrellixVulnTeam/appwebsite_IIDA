import { Address } from '@setprotocol/set-protocol-v2/dist/utils/types';
import { ContractTransaction } from 'ethers';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
import { BigNumber } from 'ethers/lib/ethers';
import { Provider } from '@ethersproject/providers';
/**
 * @title  BasicIssuanceModuleWrapper
 * @author Set Protocol
 *
 * The BasicIssuanceModuleWrapper forwards functionality from the IssuanceModule contract
 *
 */
export default class BasicIssuanceModuleWrapper {
    private provider;
    private contracts;
    private basicIssuanceModuleAddress;
    constructor(provider: Provider, basicIssuanceModuleAddress: Address);
    /**
     * Initializes this module to the SetToken. Only callable by the SetToken's manager.
     *
     * @param setTokenAddress             Address of the SetToken to initialize
     * @param preIssuanceHook             Address of the preIssuanceHook
     * @param callerAddress               Address of caller (optional)
     * @param txOpts                      Overrides for transaction (optional)
     */
    initialize(setTokenAddress: Address, preIssuanceHook?: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Issue a SetToken from its underlying positions
     *
     * @param  setTokenAddress             Address of the SetToken contract to issue
     * @param  quantity                    Quantity to issue
     * @param  setTokenRecipientAddress    Address of the recipient of the issued SetToken
     * @param  callerAddress               Address of caller (optional)
     * @return                             Transaction hash of the issuance transaction
     */
    issue(setTokenAddress: Address, quantity: BigNumber, setTokenRecipientAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Redeem a SetToken into its underlying positions
     *
     * @param  setTokenAddress           Address of the SetToken contract
     * @param  quantity                  Quantity to issue
     * @param  setTokenRecipientAddress  Address of recipient of component tokens from redemption
     * @param  callerAddress             Address of caller (optional)
     * @return                           Transaction hash of the redemption transaction
     */
    redeem(setTokenAddress: Address, quantity: BigNumber, setTokenRecipientAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
}
