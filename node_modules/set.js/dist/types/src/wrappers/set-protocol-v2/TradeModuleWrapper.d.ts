import { Address } from '@setprotocol/set-protocol-v2/utils/types';
import { ContractTransaction } from 'ethers';
import { TransactionOverrides } from '@setprotocol/set-protocol-v2/dist/typechain';
import { BigNumber } from 'ethers/lib/ethers';
import { Provider } from '@ethersproject/providers';
/**
 * @title  TradeModuleWrapper
 * @author Set Protocol
 *
 * The TradeModuleWrapper forwards functionality from the TradeModule contract
 *
 */
export default class TradeModuleWrapper {
    private provider;
    private contracts;
    private tradeModuleAddress;
    constructor(provider: Provider, tradeModuleAddress: Address);
    /**
     * Initializes this module to the SetToken. Only callable by the SetToken's manager.
     *
     * @param setTokenAddress             Address of the SetToken to initialize
     * @param callerAddress               Address of caller (optional)
     * @param txOpts                      Overrides for transaction (optional)
     */
    initialize(setTokenAddress: Address, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Executes a trade on a supported DEX. Only callable by the SetToken's manager.
     *
     * @dev Although the SetToken units are passed in for the send and receive quantities, the total quantity
     * sent and received is the quantity of SetToken units multiplied by the SetToken totalSupply.
     *
     * @param setTokenAddress             Address of the SetToken to trade
     * @param exchangeName                Human readable name of the exchange in the integrations registry
     * @param sendTokenAddress            Address of the token to be sent to the exchange
     * @param sendQuantity                Units of token in SetToken sent to the exchange
     * @param receiveTokenAddress         Address of the token that will be received from the exchange
     * @param minReceiveQuantity          Min units of token in SetToken to be received from the exchange
     * @param data                        Arbitrary bytes to be used to construct trade call data
     * @param callerAddress               Address of caller (optional)
     * @param txOpts                      Overrides for transaction (optional)
     *
     * @return                            Transaction hash of the trade transaction
     */
    trade(setTokenAddress: Address, exchangeName: string, sendTokenAddress: Address, sendQuantity: BigNumber, receiveTokenAddress: Address, minReceivedQuantity: BigNumber, data: string, callerAddress?: Address, txOpts?: TransactionOverrides): Promise<ContractTransaction>;
    /**
     * Estimate gas cost for executing a trade on a supported DEX.
     *
     * @dev Although the SetToken units are passed in for the send and receive quantities, the total quantity
     * sent and received is the quantity of SetToken units multiplied by the SetToken totalSupply.
     *
     * @param setTokenAddress             Address of the SetToken to trade
     * @param exchangeName                Human readable name of the exchange in the integrations registry
     * @param sendTokenAddress            Address of the token to be sent to the exchange
     * @param sendQuantity                Units of token in SetToken sent to the exchange
     * @param receiveTokenAddress         Address of the token that will be received from the exchange
     * @param minReceiveQuantity          Min units of token in SetToken to be received from the exchange
     * @param data                        Arbitrary bytes to be used to construct trade call data
     * @param callerAddress               Address of caller
     *
     * @return                            Transaction hash of the trade transaction
     */
    estimateGasForTradeAsync(setTokenAddress: Address, exchangeName: string, sendTokenAddress: Address, sendQuantity: BigNumber, receiveTokenAddress: Address, minReceivedQuantity: BigNumber, data: string, callerAddress: Address): Promise<BigNumber>;
}
