import { Provider } from '@ethersproject/providers';
import { Signer } from 'ethers';
import { Address } from '@setprotocol/set-protocol-v2/utils/types';
import { BasicIssuanceModule, DebtIssuanceModule, DebtIssuanceModuleV2, Controller, ProtocolViewer, SetToken, SetTokenCreator, StreamingFeeModule, TradeModule, NavIssuanceModule, PriceOracle } from '@setprotocol/set-protocol-v2/typechain';
/**
 * @title ContractWrapper
 * @author Set Protocol
 *
 * The Contracts API handles all functions that load contracts
 *
 */
export default class ContractWrapper {
    private provider;
    private cache;
    constructor(provider: Provider);
    /**
     * Load Controller contract
     *
     * @param  controllerAddress  Address of the Controller contract
     * @param  signer             Caller of the methods
     * @return                    The Controller Contract
     */
    loadControllerContractAsync(controllerAddress: Address, signer: Signer): Promise<Controller>;
    /**
     * Load ERC20 token contract
     *
     * @param  tokenAddress       Address of the token contract
     * @param  callerAddress      Address of caller, uses first one on node if none provided.
     * @return                    The token contract
     */
    loadERC20Async(tokenAddress: Address, callerAddress?: Address): Promise<SetToken>;
    /**
     * Load BasicIssuanceModule contract
     *
     * @param  basicIssuanceModuleAddress   Address of the token contract
     * @param  callerAddress                Address of caller, uses first one on node if none provided.
     * @return                              BasicIssuanceModule contract instance
     */
    loadBasicIssuanceModuleAsync(basicIssuanceModuleAddress: Address, callerAddress?: Address): Promise<BasicIssuanceModule>;
    /**
     * Load TradeModule contract
     *
     * @param  tradeModuleAddress           Address of the trade module
     * @param  callerAddress                Address of caller, uses first one on node if none provided.
     * @return                              TradeModule contract instance
     */
    loadTradeModuleAsync(tradeModuleAddress: Address, callerAddress?: Address): Promise<TradeModule>;
    /**
     * Load TradeModule contract without signer (for running populateTransaction)
     *
     * @param  tradeModuleAddress           Address of the trade module
     * @return                              TradeModule contract instance
     */
    loadTradeModuleWithoutSigner(tradeModuleAddress: Address): TradeModule;
    /**
     * Load NavIssuanceModule contract
     *
     * @param  navIssuanceModuleAddress     Address of the NAV issuance module
     * @param  callerAddress                Address of caller, uses first one on node if none provided.
     * @return                              NavIssuanceModule contract instance
     */
    loadNavIssuanceModuleAsync(navIssuanceModuleAddress: Address, callerAddress?: Address): Promise<NavIssuanceModule>;
    /**
     * Load PriceOracle contract
     *
     * @param  masterOracleAddress          Address of the master price oracle
     * @param  callerAddress                Address of caller, uses first one on node if none provided.
     * @return                              PriceOracle contract instance
     */
    loadMasterPriceOracleAsync(masterOracleAddress: Address, callerAddress?: Address): Promise<PriceOracle>;
    /**
     * Load Set Token contract
     *
     * @param  setTokenAddress    Address of the Set Token contract
     * @param  callerAddress      Address of caller, uses first one on node if none provided.
     * @return                    The Set Token Contract
     */
    loadSetTokenAsync(setTokenAddress: Address, callerAddress?: Address): Promise<SetToken>;
    /**
     * Load Set Token Creator contract
     *
     * @param  setTokenCreatorAddress  Address of the Set Token Creator contract
     * @param  signer                  Caller of the method
     * @return                         The Set Token Creator Contract
     */
    loadSetTokenCreatorAsync(setTokenCreatorAddress: Address, signer: Signer): Promise<SetTokenCreator>;
    /**
     * Load StreamingFeeModule contract
     *
     * @param  streamingFeeModuleAddress  Address of the streaming fee module contract
     * @param  callerAddress              Address of caller, uses first one on node if none provided.
     * @return                            The Streaming Fee Module Contract
     */
    loadStreamingFeeModuleAsync(streamingFeeModuleAddress: Address, callerAddress?: Address): Promise<StreamingFeeModule>;
    /**
     * Load ProtocolViewer contract
     *
     * @param  protocolViewerAddress  Address of the ProtocolViewer contract
     * @param  signer                 Caller of the methods
     * @return                        The ProtocolViewer Contract
     */
    loadProtocolViewerContractAsync(protocolViewerAddress: Address, signer: Signer): Promise<ProtocolViewer>;
    /**
     * Load DebtIssuanceModule contract
     *
     * @param  debtIssuanceModuleAddress    Address of the token contract
     * @param  callerAddress                Address of caller, uses first one on node if none provided.
     * @return                              DebtIssuanceModule contract instance
     */
    loadDebtIssuanceModuleAsync(debtIssuanceModuleAddress: Address, callerAddress?: Address): Promise<DebtIssuanceModule>;
    /**
     * Load DebtIssuanceModuleV2 contract
     *
     * @param  debtIssuanceModuleV2Address    Address of the token contract
     * @param  callerAddress                Address of caller, uses first one on node if none provided.
     * @return                              DebtIssuanceModuleV2 contract instance
     */
    loadDebtIssuanceModuleV2Async(debtIssuanceModuleV2Address: Address, callerAddress?: Address): Promise<DebtIssuanceModuleV2>;
}
