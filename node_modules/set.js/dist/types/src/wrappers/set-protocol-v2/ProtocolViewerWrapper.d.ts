import { Provider } from '@ethersproject/providers';
import { Address } from '@setprotocol/set-protocol-v2/utils/types';
import { SetDetails, StreamingFeeInfo } from '../../types';
import { BigNumber } from 'ethers/lib/ethers';
/**
 * @title ProtocolViewerWrapper
 * @author Set Protocol
 *
 * The ProtocolViewer API handles all functions on the Protocol Viewer smart contract
 *
 */
export default class ProtocolViewerWrapper {
    private provider;
    private contracts;
    private protocolViewerAddress;
    private streamingFeeModuleAddress;
    constructor(provider: Provider, protocolViewerAddress: Address, streamingFeeModuleAddress: Address);
    /**
     * Fetches the managers of set tokens
     *
     * @param  tokenAddresses    Addresses of ERC20 contracts to check managers for
     * @param  callerAddress     Address to use as the caller (optional)
     */
    batchFetchManagers(tokenAddresses: Address[], callerAddress?: Address): Promise<Address[]>;
    /**
     * Fetches the streaming fee info of set tokens
     *
     * @param   tokenAddresses    Addresses of ERC20 contracts to check streaming fee for
     * @param   callerAddress     Address to use as the caller (optional)
     */
    batchFetchStreamingFeeInfo(tokenAddresses: Address[], callerAddress?: Address): Promise<StreamingFeeInfo[]>;
    /**
     * Fetches the balance of list of set tokens and user addresses
     *
     * @param   tokenAddresses    Addresses of ERC20 contracts to check balance for
     * @param   userAddresses     Addresses of users to check balances for matched up with token index
     * @param   callerAddress     Address to use as the caller (optional)
     */
    batchFetchBalancesOf(tokenAddresses: Address[], userAddresses: Address[], callerAddress?: Address): Promise<BigNumber[]>;
    /**
     * Fetches the allowances of list of set tokens and owner/spender addresses
     *
     * @param   tokenAddresses    Addresses of ERC20 contracts to check alloances for
     * @param   ownerAddresses    Addresses of owners of token matched up with token index
     * @param   spenderAddresses  Addresses of spenders of token matched up with token index
     * @param   callerAddress     Address to use as the caller (optional)
     */
    batchFetchAllowances(tokenAddresses: Address[], ownerAddresses: Address[], spenderAddresses: Address[], callerAddress?: Address): Promise<BigNumber[]>;
    /**
     * Fetches the details of the SetToken. Accepts an array of module addresses and returns
     * the initialization statuses of each of the modules for the SetToken
     *
     * @param  setTokenAddress    Address of SetToken to fetch details for
     * @param  moduleAddresses    Addresses of ERC20 contracts to check balance for
     * @param  callerAddress      Address to use as the caller (optional)
     */
    getSetDetails(setTokenAddress: Address, moduleAddresses: Address[], callerAddress?: Address): Promise<SetDetails>;
    /**
     * Fetches the details of multiple SetToken contract. Accepts an array of module addresses
     * and returns the initialization statuses of each of the modules for the SetToken
     *
     * @param  setTokenAddresses    Addresses of SetToken to fetch details for
     * @param  moduleAddresses      Addresses of ERC20 contracts to check balance for
     * @param  callerAddress        Address to use as the caller (optional)
     */
    batchFetchDetails(setTokenAddress: Address[], moduleAddresses: Address[], callerAddress?: Address): Promise<SetDetails[]>;
}
