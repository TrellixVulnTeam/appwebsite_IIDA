import { Address } from '@setprotocol/set-protocol-v2/utils/types';
import { BigNumber } from 'ethers/lib/ethers';
import type { Provider } from '@ethersproject/providers';
import type SetTokenAPI from '../api/SetTokenAPI';
import type TradeModuleWrapper from '../wrappers/set-protocol-v2/TradeModuleWrapper';
export declare type CurrencyCodePriceMap = {
    [key: string]: number;
};
export declare type CoinGeckoCoinPrices = {
    [key: string]: CurrencyCodePriceMap;
};
export declare type CoinGeckoTokenData = {
    chainId: number;
    address: string;
    name: string;
    symbol: string;
    decimals: number;
    logoURI?: string;
};
export declare type SushiswapTokenData = CoinGeckoTokenData & {
    volumeUSD: number;
};
export declare type CoinGeckoTokenMap = {
    [key: string]: CoinGeckoTokenData;
};
export declare type CoinPricesParams = {
    contractAddresses: string[];
    vsCurrencies: string[];
};
export declare type PolygonMappedTokenData = {
    [key: string]: string;
};
export declare type QuoteOptions = {
    fromToken: Address;
    toToken: Address;
    fromTokenDecimals: number;
    toTokenDecimals: number;
    rawAmount: string;
    fromAddress: Address;
    chainId: number;
    setToken: SetTokenAPI;
    tradeModule: TradeModuleWrapper;
    provider: Provider;
    gasPrice?: number;
    slippagePercentage?: number;
    isFirmQuote?: boolean;
    feePercentage?: number;
    feeRecipient?: Address;
    excludedSources?: string[];
};
export declare type ZeroExQuote = {
    fromTokenAmount: BigNumber;
    fromUnits: BigNumber;
    toTokenAmount: BigNumber;
    toUnits: BigNumber;
    calldata: string;
    zeroExGas: number;
};
export declare type TradeQuote = {
    from: Address;
    fromTokenAddress: Address;
    toTokenAddress: Address;
    exchangeAdapterName: string;
    calldata: string;
    gas: string;
    gasPrice: string;
    slippagePercentage: string;
    fromTokenAmount: string;
    toTokenAmount: string;
    display: {
        inputAmountRaw: string;
        inputAmount: string;
        quoteAmount: string;
        fromTokenDisplayAmount: string;
        toTokenDisplayAmount: string;
        fromTokenPriceUsd: string;
        toTokenPriceUsd: string;
        gasCostsUsd: string;
        gasCostsChainCurrency: string;
        feePercentage: string;
        slippage: string;
    };
};
export declare type ZeroExTradeQuoterOptions = {
    chainId: number;
    zeroExApiKey: string;
};
export declare type ZeroExQueryParams = {
    sellToken: Address;
    buyToken: Address;
    sellAmount: string;
    slippagePercentage: number;
    takerAddress: Address;
    excludedSources: string;
    skipValidation: boolean;
    feeRecipient: Address;
    buyTokenPercentageFee: number;
    affiliateAddress: Address;
    intentOnFilling: boolean;
};
export declare type ZeroExTradeQuote = {
    guaranteedPrice: number;
    price: number;
    sellAmount: BigNumber;
    buyAmount: BigNumber;
    calldata: string;
};
export declare type EthGasStationData = {
    fast: number;
    fastest: number;
    safeLow: number;
    average: number;
};
export declare type GasOracleSpeed = 'average' | 'fast' | 'fastest';
