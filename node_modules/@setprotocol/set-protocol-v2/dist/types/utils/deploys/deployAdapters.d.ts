import { Signer } from "ethers";
import { AaveGovernanceAdapter, AaveGovernanceV2Adapter, AaveV2WrapV2Adapter, AGIMigrationWrapAdapter, AxieInfinityMigrationWrapAdapter, BalancerV1IndexExchangeAdapter, CompoundLikeGovernanceAdapter, CurveStakingAdapter, KyberExchangeAdapter, KyberV3IndexExchangeAdapter, KyberMigrationWrapAdapter, OneInchExchangeAdapter, AaveMigrationWrapAdapter, AaveWrapAdapter, CompoundWrapAdapter, CompoundWrapV2Adapter, YearnWrapAdapter, YearnWrapV2Adapter, UniswapPairPriceAdapter, UniswapV2AmmAdapter, UniswapV2ExchangeAdapter, UniswapV2ExchangeAdapterV2, UniswapV2IndexExchangeAdapter, UniswapV3IndexExchangeAdapter, UniswapV2TransferFeeExchangeAdapter, UniswapV3ExchangeAdapter, ZeroExApiAdapter, SnapshotGovernanceAdapter, SynthetixExchangeAdapter, CompoundBravoGovernanceAdapter, CompClaimAdapter } from "../contracts";
import { Address, Bytes } from "./../types";
export default class DeployAdapters {
    private _deployerSigner;
    constructor(deployerSigner: Signer);
    deployKyberExchangeAdapter(kyberNetworkProxy: Address): Promise<KyberExchangeAdapter>;
    deployOneInchExchangeAdapter(approveAddress: Address, exchangeAddress: Address, swapFunctionSignature: Bytes): Promise<OneInchExchangeAdapter>;
    deployUniswapV2AmmAdapter(uniswapV2Router: Address): Promise<UniswapV2AmmAdapter>;
    deployUniswapV2ExchangeAdapter(uniswapV2Router: Address): Promise<UniswapV2ExchangeAdapter>;
    deployUniswapV2TransferFeeExchangeAdapter(uniswapV2Router: Address): Promise<UniswapV2TransferFeeExchangeAdapter>;
    deployUniswapV2ExchangeAdapterV2(uniswapV2Router: Address): Promise<UniswapV2ExchangeAdapterV2>;
    deployUniswapV2IndexExchangeAdapter(uniswapV2Router: Address): Promise<UniswapV2IndexExchangeAdapter>;
    deployAaveGovernanceAdapter(aaveProtoGovernance: Address, aaveToken: Address): Promise<AaveGovernanceAdapter>;
    deployAaveGovernanceV2Adapter(aaveGovernanceV2: Address, aaveToken: Address): Promise<AaveGovernanceV2Adapter>;
    deployAaveMigrationWrapAdapter(aaveMigrationProxy: Address, lendToken: Address, aaveToken: Address): Promise<AaveMigrationWrapAdapter>;
    deployKyberMigrationWrapAdapter(kncLegacyToken: Address, kncToken: Address): Promise<KyberMigrationWrapAdapter>;
    deployAaveWrapAdapter(aaveLendingPool: Address): Promise<AaveWrapAdapter>;
    deployAxieInfinityMigrationWrapAdapter(tokenSwap: Address, oldToken: Address, newToken: Address): Promise<AxieInfinityMigrationWrapAdapter>;
    deployAGIMigrationWrapAdapter(agiLegacyToken: Address, agixToken: Address): Promise<AGIMigrationWrapAdapter>;
    deployCompoundWrapAdapter(libraryName: string, libraryAddress: Address): Promise<CompoundWrapAdapter>;
    deployCompClaimAdapter(comptrollerAddress: Address): Promise<CompClaimAdapter>;
    deployYearnWrapAdapter(): Promise<YearnWrapAdapter>;
    deployBalancerV1IndexExchangeAdapter(balancerProxy: Address): Promise<BalancerV1IndexExchangeAdapter>;
    deployCompoundLikeGovernanceAdapter(governanceAlpha: Address, governanceToken: Address): Promise<CompoundLikeGovernanceAdapter>;
    deployCompoundBravoGovernanceAdapter(governorBravo: Address, governanceToken: Address): Promise<CompoundBravoGovernanceAdapter>;
    deployCurveStakingAdapter(gaugeController: Address): Promise<CurveStakingAdapter>;
    deployUniswapPairPriceAdapter(controller: Address, uniswapFactory: Address, uniswapPools: Address[]): Promise<UniswapPairPriceAdapter>;
    getUniswapPairPriceAdapter(uniswapAdapterAddress: Address): Promise<UniswapPairPriceAdapter>;
    deployUniswapV3IndexExchangeAdapter(router: Address): Promise<UniswapV3IndexExchangeAdapter>;
    deployZeroExApiAdapter(zeroExAddress: Address, wethAddress: Address): Promise<ZeroExApiAdapter>;
    deploySnapshotGovernanceAdapter(delegateRegistry: Address): Promise<SnapshotGovernanceAdapter>;
    deploySynthetixExchangeAdapter(synthetixExchangerAddress: Address): Promise<SynthetixExchangeAdapter>;
    deployUniswapV3ExchangeAdapter(swapRouter: Address): Promise<UniswapV3ExchangeAdapter>;
    deployKyberV3IndexExchangeAdapter(dmmRouter: Address, dmmFactory: Address): Promise<KyberV3IndexExchangeAdapter>;
    deployCompoundWrapV2Adapter(libraryName: string, libraryAddress: Address): Promise<CompoundWrapV2Adapter>;
    deployYearnWrapV2Adapter(): Promise<YearnWrapV2Adapter>;
    deployAaveV2WrapV2Adapter(lendingPool: Address): Promise<AaveV2WrapV2Adapter>;
}
