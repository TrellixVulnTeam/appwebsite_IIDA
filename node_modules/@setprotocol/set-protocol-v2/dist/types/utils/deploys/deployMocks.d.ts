import { Address, Bytes } from "../types";
import { BigNumberish, BigNumber, Signer } from "ethers";
import { AaveLendingPoolCoreMock, AaveLendingPoolMock, AddressArrayUtilsMock, AmmAdapterMock, ChainlinkAggregatorMock, ClaimAdapterMock, ContractCallerMock, CompoundMock, ComptrollerMock, CustomSetValuerMock, DebtIssuanceMock, DebtModuleMock, ExplicitERC20Mock, ForceFunderMock, GaugeControllerMock, GodModeMock, GovernanceAdapterMock, InvokeMock, KyberNetworkProxyMock, ManagerIssuanceHookMock, ModuleIssuanceHookMock, ModuleBaseMock, NAVIssuanceCaller, NAVIssuanceHookMock, OneInchExchangeMock, OracleAdapterMock, OracleMock, YearnVaultMock, PerpV2Mock, PositionMock, PreciseUnitMathMock, ResourceIdentifierMock, StakingAdapterMock, StandardTokenMock, StandardTokenWithRoundingErrorMock, StandardTokenWithFeeMock, TradeAdapterMock, SynthMock, SynthetixExchangerMock, Uint256ArrayUtilsMock, WrapAdapterMock, WrapV2AdapterMock, ZeroExMock, YearnStrategyMock, AaveV2Mock } from "../contracts";
export default class DeployMocks {
    private _deployerSigner;
    constructor(deployerSigner: Signer);
    deployExplicitErc20Mock(): Promise<ExplicitERC20Mock>;
    deployInvokeMock(): Promise<InvokeMock>;
    deployManagerIssuanceHookMock(): Promise<ManagerIssuanceHookMock>;
    deployModuleIssuanceHookMock(): Promise<ModuleIssuanceHookMock>;
    deployNavIssuanceHookMock(): Promise<NAVIssuanceHookMock>;
    deployNAVIssuanceCaller(navIssuanceModule: Address): Promise<NAVIssuanceCaller>;
    deployAddressArrayUtilsMock(): Promise<AddressArrayUtilsMock>;
    deployUint256ArrayUtilsMock(): Promise<Uint256ArrayUtilsMock>;
    deployKyberNetworkProxyMock(mockWethAddress: Address): Promise<KyberNetworkProxyMock>;
    deployModuleBaseMock(controllerAddress: Address): Promise<ModuleBaseMock>;
    deployGodModeMock(controllerAddress: Address): Promise<GodModeMock>;
    deployDebtModuleMock(controllerAddress: Address, moduleAddress: Address): Promise<DebtModuleMock>;
    deployGovernanceAdapterMock(initialProposalId: BigNumberish): Promise<GovernanceAdapterMock>;
    deployOneInchExchangeMock(sendToken: Address, receiveToken: Address, sendQuantity: BigNumber, receiveQuantity: BigNumber): Promise<OneInchExchangeMock>;
    deployZeroExMock(sendToken: Address, receiveToken: Address, sendQuantity: BigNumber, receiveQuantity: BigNumber): Promise<ZeroExMock>;
    deployOracleMock(initialValue: BigNumberish): Promise<OracleMock>;
    deployYearnVaultMock(pricePerShare: BigNumberish): Promise<YearnVaultMock>;
    deployOracleAdapterMock(asset: Address, dummyPrice: BigNumber): Promise<OracleAdapterMock>;
    deployPositionMock(): Promise<PositionMock>;
    deployPreciseUnitMathMock(): Promise<PreciseUnitMathMock>;
    deployResourceIdentifierMock(): Promise<ResourceIdentifierMock>;
    deployStakingAdapterMock(stakingAsset: Address): Promise<StakingAdapterMock>;
    deployTokenMock(initialAccount: Address, initialBalance?: BigNumberish, decimals?: BigNumberish, name?: string, symbol?: string): Promise<StandardTokenMock>;
    deployTokenWithFeeMock(initialAccount: Address, initialBalance?: BigNumberish, fee?: BigNumberish, name?: string, symbol?: string): Promise<StandardTokenWithFeeMock>;
    deployTokenWithErrorMock(initialAccount: Address, initialBalance: BigNumberish, error: BigNumberish, name?: string, symbol?: string, decimals?: BigNumberish): Promise<StandardTokenWithRoundingErrorMock>;
    deployTradeAdapterMock(): Promise<TradeAdapterMock>;
    deployAmmAdapterMock(_underlyingTokens: Address[]): Promise<AmmAdapterMock>;
    deployWrapAdapterMock(): Promise<WrapAdapterMock>;
    deployAaveLendingPoolCoreMock(): Promise<AaveLendingPoolCoreMock>;
    deployAaveLendingPoolMock(aaveLendingPoolCore: Address): Promise<AaveLendingPoolMock>;
    deployAaveV2Mock(libraryName: string, libraryAddress: Address): Promise<AaveV2Mock>;
    deployPerpV2Mock(libraryName: string, libraryAddress: Address): Promise<PerpV2Mock>;
    deployClaimAdapterMock(): Promise<ClaimAdapterMock>;
    deployGaugeControllerMock(): Promise<GaugeControllerMock>;
    deployContractCallerMock(): Promise<ContractCallerMock>;
    deployDebtIssuanceMock(): Promise<DebtIssuanceMock>;
    deployComptrollerMock(comp: Address, compAmount: BigNumber, cToken: Address): Promise<ComptrollerMock>;
    deployCompoundMock(libraryName: string, libraryAddress: Address): Promise<CompoundMock>;
    deploySynthMock(initialAccount: Address, currencyKey: Bytes, initialBalance?: BigNumberish, name?: string, symbol?: string): Promise<SynthMock>;
    deploySynthetixExchangerMock(sUsd: Address, sEth: Address, sBtc: Address, currencyKeys: any, rates: any): Promise<SynthetixExchangerMock>;
    deployCustomSetValuerMock(): Promise<CustomSetValuerMock>;
    deployYearnStrategyMock(vault: Address): Promise<YearnStrategyMock>;
    deployForceFunderMock(): Promise<ForceFunderMock>;
    deployWrapV2AdapterMock(): Promise<WrapV2AdapterMock>;
    deployChainlinkAggregatorMock(decimals: number): Promise<ChainlinkAggregatorMock>;
    /** ***********************************
     * Instance getters
     ************************************/
    getTokenMock(token: Address): Promise<StandardTokenMock>;
    getForkedZeroExExchange(): Promise<ZeroExMock>;
}
