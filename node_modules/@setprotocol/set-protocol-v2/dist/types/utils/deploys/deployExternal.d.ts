import { BigNumberish, BigNumber, Signer } from "ethers";
import { CompoundPriceOracleMock, Comp, CompoundGovernorAlpha, CompoundGovernorBravoDelegate, CompoundGovernorBravoDelegator, CompoundTimelock, Comptroller, CERc20, CEther, PriceOracleProxy, Unitroller, WhitePaperInterestRateModel } from "./../contracts/compound";
import { WETH9, DelegateRegistry } from "./../contracts";
import { Address } from "./../types";
import { AavePropositionPower, AaveProtoGovernance, AaveTokenV2Mintable, AssetVotingWeightProvider, CoreLibrary, DefaultReserveInterestRateStrategy, GovernanceParamsProvider, LendingPool, LendingPoolAddressesProvider, LendingPoolConfigurator, LendingPoolCore, LendingRateOracle, LendToAaveMigrator } from "../contracts/aave";
import { LendingPoolDataProvider } from "../../typechain/LendingPoolDataProvider";
import { CurveDeposit, CurvePoolERC20, CRVToken, GaugeController, LiquidityGauge, LiquidityGaugeReward, Minter, Stableswap } from "../contracts/curve";
import { StakingRewards, Uni, UniswapGovernorAlpha, UniswapTimelock, UniswapV2Factory, UniswapV2Pair, UniswapV2Router02 } from "../contracts/uniswap";
import { BFactory, BRegistry, ExchangeProxy } from "../contracts/balancer";
import { Vault, Registry } from "../contracts/yearn";
import { KyberNetworkTokenV2, DMMFactory, DMMPool, DMMRouter02 } from "../contracts/kyberV3";
import { TokenSwap } from "../contracts/index";
import { SingularityNetToken } from "../contracts/index";
import { SwapRouter, UniswapV3Factory, NonfungiblePositionManager, Quoter, NFTDescriptor, UniswapV3Pool } from "../contracts/uniswapV3";
import { AaveGovernanceV2, AaveV2AToken, AaveV2StakedTokenIncentivesController, AaveV2StableDebtToken, AaveV2VariableDebtToken, AaveV2ProtocolDataProvider, AaveV2LendingPool, AaveV2LendingPoolAddressesProvider, AaveV2LendingPoolConfigurator, AaveV2LendingPoolCollateralManager, AaveV2DefaultReserveInterestRateStrategy, AaveV2LendingRateOracle, AaveV2Oracle, AaveV2PriceOracle, Executor, GovernanceStrategy, GenericLogic, ReserveLogic, ValidationLogic } from "../contracts/aaveV2";
import { PerpV2MarketRegistry, PerpV2OrderBook, PerpV2Quoter, PerpV2QuoteToken, PerpV2Vault, PerpV2TestAggregatorV3, PerpV2ChainlinkPriceFeed, PerpV2BaseToken, PerpV2ClearingHouse, PerpV2ClearingHouseConfig, PerpV2InsuranceFund, PerpV2AccountBalance, PerpV2Exchange } from "./../contracts/perpV2";
export default class DeployExternalContracts {
    private _deployerSigner;
    constructor(deployerSigner: Signer);
    deployComp(_account: Address): Promise<Comp>;
    deployCompoundTimelock(_admin: Address, _delay: BigNumber): Promise<CompoundTimelock>;
    deployCompoundGovernorAlpha(_timelock: Address, _comp: Address, _guardian: Address): Promise<CompoundGovernorAlpha>;
    deployCompoundGovernorBravoDelegate(): Promise<CompoundGovernorBravoDelegate>;
    deployCompoundGovernorBravoDelegator(timelock: Address, comp: Address, admin: Address, implementation: Address, votingPeriod: BigNumberish, votingDelay: BigNumberish, proposalThreshold: BigNumberish): Promise<CompoundGovernorBravoDelegator>;
    deployCeRc20(underlying: Address, comptroller: Address, interestRateModel: Address, initialExchangeRateMantissa: BigNumberish, name: string, symbol: string, decimals: BigNumberish): Promise<CERc20>;
    deployCEther(comptroller: Address, interestRateModel: Address, initialExchangeRateMantissa: BigNumberish, name: string, symbol: string, decimals: BigNumberish): Promise<CEther>;
    deployCompoundPriceOracleMock(): Promise<CompoundPriceOracleMock>;
    deployPriceOracleProxy(guardian: Address, v1PriceOracle: Address, cEthAddress: Address, cUsdcAddress: Address, cSaiAddress: Address, cDaiAddress: Address, cUsdtAddress: Address): Promise<PriceOracleProxy>;
    deployComptroller(): Promise<Comptroller>;
    deployUnitroller(): Promise<Unitroller>;
    deployWhitePaperInterestRateModel(baseRate: BigNumberish, multiplier: BigNumberish): Promise<WhitePaperInterestRateModel>;
    deployWETH(): Promise<WETH9>;
    deployAaveProtoGovernance(govParamsProvider: Address): Promise<AaveProtoGovernance>;
    deployGovernanceParamsProvider(propositionPowerThreshold: BigNumber, propositionPower: Address, assetVotingWeightProvider: Address): Promise<GovernanceParamsProvider>;
    deployAavePropositionPower(name: string, symbol: string, decimals: BigNumberish, council: Address[], cap: BigNumber): Promise<AavePropositionPower>;
    deployAssetVotingWeightProvider(assets: Address[], weights: BigNumber[]): Promise<AssetVotingWeightProvider>;
    deployLendingPoolAddressesProvider(): Promise<LendingPoolAddressesProvider>;
    deployCoreLibrary(): Promise<CoreLibrary>;
    deployLendingPoolCore(coreLibraryAddress: Address): Promise<LendingPoolCore>;
    deployLendingPool(): Promise<LendingPool>;
    deployLendingPoolConfigurator(): Promise<LendingPoolConfigurator>;
    deployDefaultReserveInterestRateStrategy(_reserve: Address, _AddressProvider: Address, _baseVariableBorrowRate?: BigNumberish, _variableRateSlope1?: BigNumberish, _variableRateSlope2?: BigNumberish, _stableRateSlope1?: BigNumberish, _stableRateSlope2?: BigNumberish): Promise<DefaultReserveInterestRateStrategy>;
    deployLendingRateOracle(): Promise<LendingRateOracle>;
    deployLendingPoolDataProvider(): Promise<LendingPoolDataProvider>;
    deployLendToAaveMigrator(_aaveToken: Address, _lendToken: Address, _aaveLendRatio: BigNumber): Promise<LendToAaveMigrator>;
    getLendToAaveMigrator(lendToAaveMigratorAddress: Address): Promise<LendToAaveMigrator>;
    deployAaveV2LendingPoolAddressesProvider(marketId: string): Promise<AaveV2LendingPoolAddressesProvider>;
    deployAaveV2LendingPool(validationLogicAddress: Address, reserveLogicAddress: Address): Promise<AaveV2LendingPool>;
    deployAaveV2LendingPoolConfigurator(): Promise<AaveV2LendingPoolConfigurator>;
    deployAaveV2LendingPoolCollateralManager(): Promise<AaveV2LendingPoolCollateralManager>;
    deployAaveV2LendingRateOracle(): Promise<AaveV2LendingRateOracle>;
    deployAaveV2Oracle(assets: string[], sources: [], fallBackOracle: Address, weth: Address): Promise<AaveV2Oracle>;
    deployAaveV2PriceOracle(): Promise<AaveV2PriceOracle>;
    deployAaveV2DefaultReserveInterestRateStrategy(_AddressesProvider: Address, _optimalUtilizationRate?: BigNumberish, _baseVariableBorrowRate?: BigNumberish, _variableRateSlope1?: BigNumberish, _variableRateSlope2?: BigNumberish, _stableRateSlope1?: BigNumberish, _stableRateSlope2?: BigNumberish): Promise<AaveV2DefaultReserveInterestRateStrategy>;
    deployAaveV2ProtocolDataProvider(addressProvider: Address): Promise<AaveV2ProtocolDataProvider>;
    deployAaveV2AToken(): Promise<AaveV2AToken>;
    deployAaveV2StableDebtToken(): Promise<AaveV2StableDebtToken>;
    deployAaveV2VariableDebtToken(): Promise<AaveV2VariableDebtToken>;
    deployAaveV2StakedTokenIncentivesController(stakeToken: Address, emissionManager: Address): Promise<AaveV2StakedTokenIncentivesController>;
    getForkedAaveLendingPoolAddressesProvider(_mainnetAddressesProvider: Address): AaveV2LendingPoolAddressesProvider;
    getForkedAaveV2ProtocolDataProvider(_mainnetAddressesProvider: Address): AaveV2ProtocolDataProvider;
    deployGeneralLogic(): Promise<GenericLogic>;
    deployValidationLogic(genericLogicLibraryAddress: Address): Promise<ValidationLogic>;
    deployReserveLogic(): Promise<ReserveLogic>;
    deployAaveGovernanceV2(_governanceStrategy: Address, _votingDelay: BigNumber, _guardian: Address, _executors: Address[]): Promise<AaveGovernanceV2>;
    deployExecutor(_admin: Address, _delay: BigNumber, _gracePeriod: BigNumber, _minimumDelay: BigNumber, _maximumDelay: BigNumber, _propositionThreshold: BigNumber, _voteDuration: BigNumber, _voteDifferential: BigNumber, _minmumQuorum: BigNumber): Promise<Executor>;
    deployGovernanceStrategy(_aave: Address, _stkaave: Address): Promise<GovernanceStrategy>;
    deployAaveTokenV2Mintable(): Promise<AaveTokenV2Mintable>;
    deployCurveDeposit(_coins: [string, string, string, string], _underlying_coins: [string, string, string, string], _curve: string, _token: string): Promise<CurveDeposit>;
    deployCurvePoolERC20(_name: string, _symbol: string, _decimals: BigNumberish | undefined, _supply: BigNumberish): Promise<CurvePoolERC20>;
    deployStableswap(_coins: [string, string, string, string], _underlying_coins: [string, string, string, string], _pool_token: string, _aCoefficient?: BigNumberish, _fee?: BigNumberish): Promise<Stableswap>;
    deployCrvToken(_name: string, _symbol: string, _decimals?: BigNumberish): Promise<CRVToken>;
    deployGaugeController(_token: string, _voting_escrow: string): Promise<GaugeController>;
    deployLiquidityGaugeReward(_lpAddr: string, _minter: string, _reward_contract: string, _rewarded_token: string): Promise<LiquidityGaugeReward>;
    deployLiquidityGauge(_lpAddr: string, _minter: string): Promise<LiquidityGauge>;
    deployMinter(_token: string, _controller: string): Promise<Minter>;
    deployUni(_account: Address, _minter: Address, _mintingAllowedAfter: BigNumber): Promise<Uni>;
    deployUniswapTimelock(_admin: Address, _delay: BigNumber): Promise<UniswapTimelock>;
    deployUniswapGovernorAlpha(_timelock: Address, _uni: Address): Promise<UniswapGovernorAlpha>;
    deployUniswapV2Factory(_feeToSetter: string): Promise<UniswapV2Factory>;
    deployUniswapV2Router02(_factory: Address, _weth: Address): Promise<UniswapV2Router02>;
    getForkedUniswapV2Router02(_mainnetRouter: Address): UniswapV2Router02;
    deployUniswapV2Pair(): Promise<UniswapV2Pair>;
    deployStakingRewards(_rewardsDistribution: Address, _rewardsToken: Address, _stakingToken: Address): Promise<StakingRewards>;
    deployB__factory(): Promise<BFactory>;
    deployExchangeProxy(weth: Address): Promise<ExchangeProxy>;
    deployBRegistry(factory: Address): Promise<BRegistry>;
    deployDelegateRegistry(): Promise<DelegateRegistry>;
    deployVault(): Promise<Vault>;
    getVault(vaultAddress: Address): Promise<Vault>;
    deployRegistry(): Promise<Registry>;
    deployKyberNetworkTokenV2(): Promise<KyberNetworkTokenV2>;
    deployDMMFactory(_feeToSetter: string): Promise<DMMFactory>;
    deployDMMRouter02(_factory: Address, _weth: Address): Promise<DMMRouter02>;
    deployDMMPool(): Promise<DMMPool>;
    deployTokenSwap(oldToken: Address, newToken: Address): Promise<TokenSwap>;
    deploySingularityNetToken(): Promise<SingularityNetToken>;
    deployUniswapV3Factory(): Promise<UniswapV3Factory>;
    deploySwapRouter(factory: Address, weth: Address): Promise<SwapRouter>;
    deployNftPositionManager(factory: Address, weth: Address, nftDesc: Address): Promise<NonfungiblePositionManager>;
    deployQuoter(factory: Address, weth: Address): Promise<Quoter>;
    deployNFTDescriptor(): Promise<NFTDescriptor>;
    getUniswapV3PoolInstance(pool: Address): Promise<UniswapV3Pool>;
    deployPerpV2OrderBook(): Promise<PerpV2OrderBook>;
    deployPerpV2MarketRegistry(): Promise<PerpV2MarketRegistry>;
    deployPerpV2Quoter(): Promise<PerpV2Quoter>;
    deployPerpV2QuoteToken(): Promise<PerpV2QuoteToken>;
    deployPerpV2Vault(): Promise<PerpV2Vault>;
    deployPerpV2TestAggregatorV3(): Promise<PerpV2TestAggregatorV3>;
    deployPerpV2ChainlinkPriceFeed(): Promise<PerpV2ChainlinkPriceFeed>;
    deployPerpV2BaseToken(): Promise<PerpV2BaseToken>;
    deployPerpV2ClearingHouseConfig(): Promise<PerpV2ClearingHouseConfig>;
    deployPerpV2InsuranceFund(): Promise<PerpV2InsuranceFund>;
    deployPerpV2AccountBalance(): Promise<PerpV2AccountBalance>;
    deployPerpV2Exchange(): Promise<PerpV2Exchange>;
    deployPerpV2ClearingHouse(): Promise<PerpV2ClearingHouse>;
}
