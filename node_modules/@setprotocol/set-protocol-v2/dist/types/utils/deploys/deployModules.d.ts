import { Signer } from "ethers";
import { AaveLeverageModule, AirdropModule, AmmModule, BasicIssuanceModule, ClaimModule, CompoundLeverageModule, CustomOracleNavIssuanceModule, DebtIssuanceModule, GeneralIndexModule, GovernanceModule, IssuanceModule, NavIssuanceModule, PerpV2LeverageModule, SingleIndexModule, SlippageIssuanceModule, StakingModule, StreamingFeeModule, TradeModule, WrapModule, WrapModuleV2 } from "../contracts";
import { Address } from "../types";
export default class DeployModules {
    private _deployerSigner;
    constructor(deployerSigner: Signer);
    deployBasicIssuanceModule(controller: Address): Promise<BasicIssuanceModule>;
    deployIssuanceModule(controller: Address): Promise<IssuanceModule>;
    deployDebtIssuanceModule(controller: Address): Promise<DebtIssuanceModule>;
    deployDebtIssuanceModuleV2(controller: Address): Promise<DebtIssuanceModule>;
    deploySlippageIssuanceModule(controller: Address): Promise<SlippageIssuanceModule>;
    deployAmmModule(controller: Address): Promise<AmmModule>;
    getBasicIssuanceModule(basicIssuanceModule: Address): Promise<BasicIssuanceModule>;
    deployStreamingFeeModule(controller: Address): Promise<StreamingFeeModule>;
    getStreamingFeeModule(streamingFeeModule: Address): Promise<StreamingFeeModule>;
    deployAirdropModule(controller: Address): Promise<AirdropModule>;
    deployNavIssuanceModule(controller: Address, weth: Address): Promise<NavIssuanceModule>;
    deployTradeModule(controller: Address): Promise<TradeModule>;
    deployWrapModule(controller: Address, weth: Address): Promise<WrapModule>;
    deployClaimModule(controller: Address): Promise<ClaimModule>;
    deployStakingModule(controller: Address): Promise<StakingModule>;
    deployCustomOracleNavIssuanceModule(controller: Address, weth: Address): Promise<CustomOracleNavIssuanceModule>;
    getNavIssuanceModule(navIssuanceModule: Address): Promise<NavIssuanceModule>;
    deploySingleIndexModule(controller: Address, weth: Address, uniswapRouter: Address, sushiswapRouter: Address, balancerProxy: Address): Promise<SingleIndexModule>;
    deployGeneralIndexModule(controller: Address, weth: Address): Promise<GeneralIndexModule>;
    deployGovernanceModule(controller: Address): Promise<GovernanceModule>;
    deployCompoundLeverageModule(controller: Address, compToken: Address, comptroller: Address, cEth: Address, weth: Address, libraryName: string, libraryAddress: Address): Promise<CompoundLeverageModule>;
    deployAaveLeverageModule(controller: Address, lendingPoolAddressesProvider: Address, libraryName: string, libraryAddress: Address): Promise<AaveLeverageModule>;
    deployWrapModuleV2(controller: Address, weth: Address): Promise<WrapModuleV2>;
    deployPerpV2LeverageModule(controller: Address, perpVault: Address, perpQuoter: Address, perpMarketRegistry: Address, libraryName: string, libraryAddress: Address): Promise<PerpV2LeverageModule>;
}
