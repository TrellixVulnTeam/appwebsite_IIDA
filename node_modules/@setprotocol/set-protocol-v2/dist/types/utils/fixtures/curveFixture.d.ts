import { providers } from "ethers";
import { Address } from "../types";
import { CurvePoolERC20 } from "../../typechain/CurvePoolERC20";
import { Stableswap } from "../../typechain/Stableswap";
import { CurveDeposit } from "../../typechain/CurveDeposit";
import { CRVToken } from "../../typechain/CRVToken";
import { GaugeController } from "../../typechain/GaugeController";
import { Minter } from "../../typechain/Minter";
import { LiquidityGaugeReward } from "../../typechain/LiquidityGaugeReward";
import { LiquidityGauge } from "../../typechain/LiquidityGauge";
export declare class CurveFixture {
    private _deployer;
    private _ownerSigner;
    poolToken: CurvePoolERC20;
    stableSwap: Stableswap;
    deposit: CurveDeposit;
    crvToken: CRVToken;
    gaugeController: GaugeController;
    minter: Minter;
    constructor(provider: providers.Web3Provider | providers.JsonRpcProvider, ownerAddress: Address);
    /**
     * Initializes a pool.
     *
     * @param _tokens Expects 4 tokens
     */
    initializePool(_tokens: [string, string, string, string]): Promise<void>;
    /**
     * Initializes contracts for staking LP tokens and generate CRV token.
     */
    initializeDAO(): Promise<void>;
    /**
     * Initializes a gauge.
     */
    initializeGauge(_lpToken: string): Promise<LiquidityGauge>;
    /**
     * Initializes a gauge with rewards for a LP token on external protocol contracts.
     */
    initializeGaugeRewards(_lpToken: string, _rewardContract: string, _rewardedToken: string): Promise<LiquidityGaugeReward>;
}
