import { providers } from "ethers";
import { Address } from "../types";
import { Account } from "../test/types";
import { StakingRewards, Uni, UniswapTimelock, UniswapGovernorAlpha, UniswapV2Factory, UniswapV2Pair, UniswapV2Router02 } from "../contracts/uniswap";
export declare class UniswapFixture {
    private _deployer;
    private _provider;
    private _ownerSigner;
    owner: Account;
    uni: Uni;
    uniswapGovernorAlpha: UniswapGovernorAlpha;
    uniswapTimelock: UniswapTimelock;
    factory: UniswapV2Factory;
    pair: UniswapV2Pair;
    router: UniswapV2Router02;
    wethDaiPool: UniswapV2Pair;
    wethDaiStakingRewards: StakingRewards;
    wethWbtcPool: UniswapV2Pair;
    wethWbtcStakingRewards: StakingRewards;
    uniWethPool: UniswapV2Pair;
    constructor(provider: providers.Web3Provider | providers.JsonRpcProvider, ownerAddress: Address);
    initialize(_owner: Account, _weth: Address, _wbtc: Address, _dai: Address): Promise<void>;
    createNewStakingPair(_tokenOne: Address, _tokenTwo: Address): Promise<[UniswapV2Pair, StakingRewards]>;
    createNewPair(_tokenOne: Address, _tokenTwo: Address): Promise<UniswapV2Pair>;
    getTokenOrder(_tokenOne: Address, _tokenTwo: Address): [Address, Address];
    getForkedUniswapRouter(): UniswapV2Router02;
    getForkedSushiswapRouter(): UniswapV2Router02;
}
