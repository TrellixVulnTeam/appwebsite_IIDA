import { providers, BigNumber } from "ethers";
import { Address } from "../types";
import { Account } from "../test/types";
import { StandardTokenMock } from "../contracts";
import { DMMPool, DMMFactory, DMMRouter02 } from "../contracts/kyberV3";
export declare class KyberV3DMMFixture {
    private _deployer;
    private _ownerSigner;
    owner: Account;
    knc: StandardTokenMock;
    dmmFactory: DMMFactory;
    dmmRouter: DMMRouter02;
    kncWethPool: DMMPool;
    wethDaiPool: DMMPool;
    wethWbtcPool: DMMPool;
    constructor(provider: providers.Web3Provider | providers.JsonRpcProvider, ownerAddress: Address);
    initialize(_owner: Account, _weth: Address, _wbtc: Address, _dai: Address): Promise<void>;
    /**
     * Creates new DMM pool. The token addresses are interchangeable.
     * NOTE: There can be at most 1 unamplified pool for a token pair, ie. only 1 pool can exist with ampBps = BPS (10000).
     * Should there already be an existing unamplified pool, attempts to create another one will fail.
     *
     * @param _token0     address of token 1
     * @param _token1     address of token 2
     * @param _ampBps     Amplification factor (in BPS)
     */
    createNewPool(_tokenA: Address, _tokenB: Address, _ampBps: BigNumber): Promise<DMMPool>;
    getTokenOrder(_tokenOne: Address, _tokenTwo: Address): [Address, Address];
}
