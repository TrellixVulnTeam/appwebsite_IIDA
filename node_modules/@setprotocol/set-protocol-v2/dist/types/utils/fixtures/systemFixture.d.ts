import { providers } from "ethers";
import { BigNumber } from "ethers";
import { BasicIssuanceModule, Controller, IntegrationRegistry, OracleMock, PriceOracle, SetToken, SetTokenCreator, SetValuer, StandardTokenMock, StreamingFeeModule, WETH9, NavIssuanceModule } from "../contracts";
import { Address } from "../types";
export declare class SystemFixture {
    private _provider;
    private _ownerAddress;
    private _ownerSigner;
    private _deployer;
    feeRecipient: Address;
    controller: Controller;
    factory: SetTokenCreator;
    priceOracle: PriceOracle;
    integrationRegistry: IntegrationRegistry;
    setValuer: SetValuer;
    issuanceModule: BasicIssuanceModule;
    streamingFeeModule: StreamingFeeModule;
    navIssuanceModule: NavIssuanceModule;
    weth: WETH9;
    usdc: StandardTokenMock;
    wbtc: StandardTokenMock;
    dai: StandardTokenMock;
    ETH_USD_Oracle: OracleMock;
    USD_USD_Oracle: OracleMock;
    BTC_USD_Oracle: OracleMock;
    DAI_USD_Oracle: OracleMock;
    component1Price: BigNumber;
    component2Price: BigNumber;
    component3Price: BigNumber;
    component4Price: BigNumber;
    constructor(provider: providers.Web3Provider | providers.JsonRpcProvider, ownerAddress: Address);
    initialize(): Promise<void>;
    initializeStandardComponents(): Promise<void>;
    createSetToken(components: Address[], units: BigNumber[], modules: Address[], manager?: Address, name?: string, symbol?: string): Promise<SetToken>;
    createNonControllerEnabledSetToken(components: Address[], units: BigNumber[], modules: Address[], manager?: Address, name?: string, symbol?: string): Promise<SetToken>;
    approveAndIssueSetToken(setToken: SetToken, issueQuantity: BigNumber, to?: Address): Promise<any>;
}
