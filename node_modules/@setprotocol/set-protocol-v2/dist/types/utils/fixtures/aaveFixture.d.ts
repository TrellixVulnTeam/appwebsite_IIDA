import { providers, BigNumber, BigNumberish } from "ethers";
import { Address } from "../types";
import { AavePropositionPower, AaveProtoGovernance, AssetVotingWeightProvider, AToken, CoreLibrary, DefaultReserveInterestRateStrategy, GovernanceParamsProvider, LendingPool, LendingPoolAddressesProvider, LendingPoolConfigurator, LendingPoolCore, LendingRateOracle, LendingPoolDataProvider, LendToAaveMigrator } from "../contracts/aave";
import { StandardTokenMock } from "../contracts";
import { AaveTokenV2Mintable } from "../../typechain/AaveTokenV2Mintable";
export declare class AaveFixture {
    private _deployer;
    private _ownerSigner;
    lendingPool: LendingPool;
    lendingPoolCore: LendingPoolCore;
    lendingPoolAddressesProvider: LendingPoolAddressesProvider;
    coreLibrary: CoreLibrary;
    lendingPoolConfigurator: LendingPoolConfigurator;
    reserveInterestRateStrategy: DefaultReserveInterestRateStrategy;
    lendingRateOracle: LendingRateOracle;
    lendingPoolDataProvider: LendingPoolDataProvider;
    lendToAaveMigrator: LendToAaveMigrator;
    lendToken: StandardTokenMock;
    aaveToken: AaveTokenV2Mintable;
    aaveExchangeRatio: BigNumber;
    ethTokenAddress: Address;
    aaveProtoGovernance: AaveProtoGovernance;
    aavePropositionPower: AavePropositionPower;
    assetVotingWeightPower: AssetVotingWeightProvider;
    governanceParamsProvider: GovernanceParamsProvider;
    constructor(provider: providers.Web3Provider | providers.JsonRpcProvider, ownerAddress: Address);
    initialize(): Promise<void>;
    deployAToken(_underlyingAsset: Address, _decimals?: BigNumberish): Promise<AToken>;
    deployETHAToken(_underlyingAsset?: Address, _name?: string, _symbol?: string, _decimals?: BigNumberish): Promise<AToken>;
}
