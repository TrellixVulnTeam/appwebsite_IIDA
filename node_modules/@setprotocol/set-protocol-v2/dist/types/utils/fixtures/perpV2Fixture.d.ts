import { providers, BigNumber, BigNumberish } from "ethers";
import { Account } from "../test/types";
import { PerpV2AccountBalance, PerpV2BaseToken, PerpV2ClearingHouseConfig, PerpV2Exchange, PerpV2InsuranceFund, PerpV2Vault, PerpV2OrderBook, PerpV2MarketRegistry, PerpV2ClearingHouse, PerpV2QuoteToken, PerpV2Quoter } from "../contracts/perpV2";
import { UniswapV3Factory, UniswapV3Pool } from "../contracts/uniswapV3";
import { StandardTokenMock, ChainlinkAggregatorMock } from "../contracts";
import { Address } from "../types";
export interface TokensFixture {
    token0: PerpV2BaseToken;
    token1: PerpV2QuoteToken;
    mockAggregator0: ChainlinkAggregatorMock;
    mockAggregator1: ChainlinkAggregatorMock;
}
export interface PoolFixture {
    factory: UniswapV3Factory;
    pool: UniswapV3Pool;
    baseToken: PerpV2BaseToken;
    quoteToken: PerpV2QuoteToken;
}
export interface BaseTokenFixture {
    baseToken: PerpV2BaseToken;
    mockAggregator: ChainlinkAggregatorMock;
}
export interface PositionInfo {
    baseToken: Address;
    baseBalance: BigNumber;
    quoteBalance: BigNumber;
}
export declare class PerpV2Fixture {
    private _deployer;
    private _ownerAddress;
    private _ownerSigner;
    private _feeTier;
    private _usdcDecimals;
    private _priceFeeds;
    private _pools;
    maker: Account;
    otherTrader: Account;
    usdc: StandardTokenMock;
    clearingHouse: PerpV2ClearingHouse;
    orderBook: PerpV2OrderBook;
    accountBalance: PerpV2AccountBalance;
    marketRegistry: PerpV2MarketRegistry;
    clearingHouseConfig: PerpV2ClearingHouseConfig;
    quoter: PerpV2Quoter;
    exchange: PerpV2Exchange;
    vault: PerpV2Vault;
    insuranceFund: PerpV2InsuranceFund;
    uniV3Factory: UniswapV3Factory;
    vETHPool: UniswapV3Pool;
    vBTCPool: UniswapV3Pool;
    vETH: PerpV2BaseToken;
    vBTC: PerpV2BaseToken;
    ethPriceFeed: ChainlinkAggregatorMock;
    btcPriceFeed: ChainlinkAggregatorMock;
    vQuote: PerpV2QuoteToken;
    feeTierPercent: BigNumber;
    constructor(provider: providers.Web3Provider | providers.JsonRpcProvider, ownerAddress: Address);
    initialize(_maker: Account, _otherTrader: Account): Promise<void>;
    deposit(sender: Account, amount: BigNumber, token: StandardTokenMock): Promise<void>;
    initializePoolWithLiquidityWide(baseToken: PerpV2BaseToken, baseTokenAmount: BigNumberish, quoteTokenAmount: BigNumberish): Promise<void>;
    initializePoolWithLiquidityWithinTicks(baseToken: PerpV2BaseToken, baseTokenAmount: BigNumberish, quoteTokenAmount: BigNumberish, lowerTick: number, upperTick: number): Promise<void>;
    setBaseTokenOraclePrice(baseToken: PerpV2BaseToken, price: BigNumber): Promise<void>;
    getSpotPrice(_baseToken: Address): Promise<BigNumber>;
    getSwapQuote(baseToken: Address, baseQuantityUnits: BigNumber, isBuy: boolean): Promise<{
        deltaBase: BigNumber;
        deltaQuote: BigNumber;
    }>;
    getCurrentLeverage(_setToken: Address, _positionInfo: PositionInfo, _collateralBalance: BigNumber): Promise<BigNumber>;
    private _getMinTick;
    private _getMaxTick;
    private _encodePriceSqrt;
    _createQuoteTokenFixture(name: string, symbol: string): Promise<PerpV2QuoteToken>;
    _createBaseTokenFixture(name: string, symbol: string): Promise<BaseTokenFixture>;
    _tokensFixture(): Promise<TokensFixture>;
    private _isAscendingTokenOrder;
    _token0Fixture(token1Addr: string): Promise<BaseTokenFixture>;
}
