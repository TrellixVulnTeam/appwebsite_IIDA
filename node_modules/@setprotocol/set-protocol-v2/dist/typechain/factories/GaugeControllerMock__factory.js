"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GaugeControllerMock__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_gauge",
                type: "address",
            },
            {
                internalType: "int128",
                name: "_type",
                type: "int128",
            },
        ],
        name: "addGaugeType",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_gauge",
                type: "address",
            },
        ],
        name: "gauge_types",
        outputs: [
            {
                internalType: "int128",
                name: "",
                type: "int128",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var _bytecode = "0x608060405234801561001057600080fd5b5061019c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633f9095b71461003b578063a12f4e5b1461007a575b600080fd5b6100616004803603602081101561005157600080fd5b50356001600160a01b03166100ab565b60408051600f92830b90920b8252519081900360200190f35b6100a96004803603604081101561009057600080fd5b506001600160a01b038135169060200135600f0b610114565b005b6001600160a01b038116600090815260208190526040812054600f90810b9081900b61010a576040805162461bcd60e51b8152602060048201526009602482015268139bdd081d985b1a5960ba1b604482015290519081900360640190fd5b6000190192915050565b6001600160a01b03909116600090815260208190526040902080546001909201600f0b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1990921691909117905556fea26469706673582212204743a63168a0259aed3c76f17e21c94732ecd37468656545c9725d2e15a8dbe764736f6c634300060a0033";
var GaugeControllerMock__factory = /** @class */ (function (_super) {
    __extends(GaugeControllerMock__factory, _super);
    function GaugeControllerMock__factory(signer) {
        return _super.call(this, _abi, _bytecode, signer) || this;
    }
    GaugeControllerMock__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    GaugeControllerMock__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    GaugeControllerMock__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    GaugeControllerMock__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    GaugeControllerMock__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    GaugeControllerMock__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    GaugeControllerMock__factory.bytecode = _bytecode;
    GaugeControllerMock__factory.abi = _abi;
    return GaugeControllerMock__factory;
}(ethers_1.ContractFactory));
exports.GaugeControllerMock__factory = GaugeControllerMock__factory;
