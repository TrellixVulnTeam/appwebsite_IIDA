"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolDataProviderMock__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [],
        name: "getAllReservesTokens",
        outputs: [
            {
                components: [
                    {
                        internalType: "string",
                        name: "symbol",
                        type: "string",
                    },
                    {
                        internalType: "address",
                        name: "tokenAddress",
                        type: "address",
                    },
                ],
                internalType: "struct IProtocolDataProvider.TokenData[]",
                name: "",
                type: "tuple[]",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
var _bytecode = "0x608060405234801561001057600080fd5b506101a7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b316ff8914610030575b600080fd5b61003861004e565b604051610045919061009f565b60405180910390f35b60408051600080825260208201909252606091610081565b61006e610087565b8152602001906001900390816100665790505b50905090565b60408051808201909152606081526000602082015290565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561012a57888303603f190185528151805187855280516100e9818a8801610138565b6100f682828d8601610141565b928a01516001600160a01b0316958a01959095525094870194601f93909301601f19169290920191908601906001016100c3565b509098975050505050505050565b90815260200190565b60005b8381101561015c578181015183820152602001610144565b8381111561016b576000848401525b5050505056fea2646970667358221220c712cfd7a3c3fa1394b3a3244c4e463ad2597657ea7706574a09c5d80f28508b64736f6c634300060a0033";
var ProtocolDataProviderMock__factory = /** @class */ (function (_super) {
    __extends(ProtocolDataProviderMock__factory, _super);
    function ProtocolDataProviderMock__factory(signer) {
        return _super.call(this, _abi, _bytecode, signer) || this;
    }
    ProtocolDataProviderMock__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    ProtocolDataProviderMock__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    ProtocolDataProviderMock__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    ProtocolDataProviderMock__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    ProtocolDataProviderMock__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    ProtocolDataProviderMock__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    ProtocolDataProviderMock__factory.bytecode = _bytecode;
    ProtocolDataProviderMock__factory.abi = _abi;
    return ProtocolDataProviderMock__factory;
}(ethers_1.ContractFactory));
exports.ProtocolDataProviderMock__factory = ProtocolDataProviderMock__factory;
