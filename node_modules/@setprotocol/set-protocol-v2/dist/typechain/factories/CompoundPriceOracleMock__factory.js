"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompoundPriceOracleMock__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "assetToPrices",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_asset",
                type: "address",
            },
        ],
        name: "getUnderlyingPrice",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_token",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_newPrice",
                type: "uint256",
            },
        ],
        name: "setUnderlyingPrice",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
var _bytecode = "0x608060405234801561001057600080fd5b50610151806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063127ffda014610046578063b4ba21c814610074578063fc57d4df146100ac575b600080fd5b6100726004803603604081101561005c57600080fd5b506001600160a01b0381351690602001356100d2565b005b61009a6004803603602081101561008a57600080fd5b50356001600160a01b03166100ee565b60408051918252519081900360200190f35b61009a600480360360208110156100c257600080fd5b50356001600160a01b0316610100565b6001600160a01b03909116600090815260208190526040902055565b60006020819052908152604090205481565b6001600160a01b03166000908152602081905260409020549056fea2646970667358221220194848e24759330686dafe368ee34659436ba858115eb6f531cea038975f2e8b64736f6c634300060a0033";
var CompoundPriceOracleMock__factory = /** @class */ (function (_super) {
    __extends(CompoundPriceOracleMock__factory, _super);
    function CompoundPriceOracleMock__factory(signer) {
        return _super.call(this, _abi, _bytecode, signer) || this;
    }
    CompoundPriceOracleMock__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    CompoundPriceOracleMock__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    CompoundPriceOracleMock__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    CompoundPriceOracleMock__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    CompoundPriceOracleMock__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    CompoundPriceOracleMock__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    CompoundPriceOracleMock__factory.bytecode = _bytecode;
    CompoundPriceOracleMock__factory.abi = _abi;
    return CompoundPriceOracleMock__factory;
}(ethers_1.ContractFactory));
exports.CompoundPriceOracleMock__factory = CompoundPriceOracleMock__factory;
