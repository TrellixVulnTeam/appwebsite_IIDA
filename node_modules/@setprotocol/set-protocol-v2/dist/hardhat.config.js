"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv").config();
var chalk_1 = __importDefault(require("chalk"));
var wallets_1 = require("./utils/wallets");
require("@nomiclabs/hardhat-waffle");
require("@typechain/hardhat");
require("solidity-coverage");
require("./tasks");
var forkingConfig = {
    url: "https://eth-mainnet.alchemyapi.io/v2/" + process.env.ALCHEMY_TOKEN,
    blockNumber: 12198000,
};
var mochaConfig = {
    grep: "@forked-mainnet",
    invert: (process.env.FORK) ? false : true,
    timeout: (process.env.FORK) ? 100000 : 40000,
};
checkForkedProviderEnvironment();
var config = {
    solidity: {
        version: "0.6.10",
        settings: {
            optimizer: { enabled: true, runs: 200 },
        },
    },
    networks: {
        hardhat: {
            forking: (process.env.FORK) ? forkingConfig : undefined,
            accounts: getHardhatPrivateKeys(),
        },
        localhost: {
            url: "http://127.0.0.1:8545",
            timeout: 200000,
            gas: 12000000,
            blockGasLimit: 12000000
        },
        kovan: {
            url: "https://kovan.infura.io/v3/" + process.env.INFURA_TOKEN,
            // @ts-ignore
            accounts: ["0x" + process.env.KOVAN_DEPLOY_PRIVATE_KEY],
        },
        staging_mainnet: {
            url: "https://mainnet.infura.io/v3/" + process.env.INFURA_TOKEN,
            // @ts-ignore
            accounts: ["0x" + process.env.STAGING_MAINNET_DEPLOY_PRIVATE_KEY],
        },
        production: {
            url: "https://mainnet.infura.io/v3/" + process.env.INFURA_TOKEN,
            // @ts-ignore
            accounts: ["0x" + process.env.PRODUCTION_MAINNET_DEPLOY_PRIVATE_KEY],
        },
        // To update coverage network configuration got o .solcover.js and update param in providerOptions field
        coverage: {
            url: "http://127.0.0.1:8555",
            timeout: 200000,
        },
    },
    // @ts-ignore
    typechain: {
        outDir: "typechain",
        target: "ethers-v5",
        externalArtifacts: ["external/**/*.json"],
    },
    mocha: mochaConfig,
    // These are external artifacts we don't compile but would like to improve
    // test performance for by hardcoding the gas into the abi at runtime
    // @ts-ignore
    externalGasMods: [
        "external/abi/perp",
    ],
};
function getHardhatPrivateKeys() {
    return wallets_1.privateKeys.map(function (key) {
        var ONE_MILLION_ETH = "1000000000000000000000000";
        return {
            privateKey: key,
            balance: ONE_MILLION_ETH,
        };
    });
}
function checkForkedProviderEnvironment() {
    if (process.env.FORK &&
        (!process.env.ALCHEMY_TOKEN || process.env.ALCHEMY_TOKEN === "fake_alchemy_token")) {
        console.log(chalk_1.default.red("You are running forked provider tests with invalid Alchemy credentials.\n" +
            "Update your ALCHEMY_TOKEN settings in the `.env` file."));
        process.exit(1);
    }
}
exports.default = config;
