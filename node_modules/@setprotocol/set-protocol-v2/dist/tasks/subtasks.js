"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = __importDefault(require("fs-extra"));
var task_names_1 = require("hardhat/builtin-tasks/task-names");
var constants_1 = require("@typechain/hardhat/dist/constants");
var config_1 = require("hardhat/config");
var tasks_1 = require("../utils/tasks");
// Injects network block limit (minus 1 million) in the abi so
// ethers uses it instead of running gas estimation.
(0, config_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_ARTIFACT_FROM_COMPILATION_OUTPUT)
    .setAction(function (_, _a, runSuper) {
    var network = _a.network;
    return __awaiter(void 0, void 0, void 0, function () {
        var artifact;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, runSuper()];
                case 1:
                    artifact = _b.sent();
                    // These changes should be skipped when publishing to npm.
                    // They override ethers' gas  estimation
                    if (!process.env.SKIP_ABI_GAS_MODS) {
                        artifact.abi = (0, tasks_1.addGasToAbiMethods)(network.config, artifact.abi);
                    }
                    return [2 /*return*/, artifact];
            }
        });
    });
});
// Hooks into the typechain task to inject hardcoded gas into external ABIs (and run them fast)
// ABIs picked up by this task need their location listed in the externalGasMods array
// in `hardhat.config.json`. Temporarily rewrites artifact so typechain picks up the network
// specific gas requirement without introducing any git changes.
(0, config_1.subtask)(constants_1.TASK_TYPECHAIN_GENERATE_TYPES)
    .setAction(function (_, env, runSuper) { return __awaiter(void 0, void 0, void 0, function () {
    var artifacts, _i, _a, project, files, _b, files_1, file, artifactPath, artifact, _c, artifacts_1, item;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                artifacts = [];
                for (_i = 0, _a = env.config.externalGasMods; _i < _a.length; _i++) {
                    project = _a[_i];
                    files = fs_extra_1.default.readdirSync(project);
                    for (_b = 0, files_1 = files; _b < files_1.length; _b++) {
                        file = files_1[_b];
                        artifactPath = process.cwd() + "/" + project + "/" + file;
                        artifact = require(artifactPath);
                        artifact.abi = (0, tasks_1.addGasToAbiMethods)(env.network.config, artifact.abi);
                        fs_extra_1.default.outputFileSync(artifactPath, JSON.stringify(artifact, undefined, "  "));
                        artifacts.push({ artifact: artifact, artifactPath: artifactPath });
                    }
                }
                return [4 /*yield*/, runSuper()];
            case 1:
                _d.sent();
                for (_c = 0, artifacts_1 = artifacts; _c < artifacts_1.length; _c++) {
                    item = artifacts_1[_c];
                    item.artifact.abi = (0, tasks_1.removeGasFromAbiMethods)(item.artifact.abi);
                    fs_extra_1.default.outputFileSync(item.artifactPath, JSON.stringify(item.artifact, undefined, "  "));
                }
                return [2 /*return*/];
        }
    });
}); });
