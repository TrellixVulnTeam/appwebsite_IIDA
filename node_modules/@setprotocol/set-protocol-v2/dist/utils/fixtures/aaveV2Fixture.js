"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AaveV2Fixture = void 0;
var deploys_1 = __importDefault(require("../deploys"));
var ethers_1 = require("ethers");
var common_1 = require("../common");
var constants_1 = require("../constants");
var dependencies_1 = __importDefault(require("../deploys/dependencies"));
var AaveV2Fixture = /** @class */ (function () {
    function AaveV2Fixture(provider, ownerAddress) {
        this._ownerSigner = provider.getSigner(ownerAddress);
        this._deployer = new deploys_1.default(this._ownerSigner);
    }
    AaveV2Fixture.prototype.initialize = function (weth, dai, marketId, daiPriceInEth // 1 DAI = 0.001 ETH
    ) {
        if (marketId === void 0) { marketId = "Commons"; }
        if (daiPriceInEth === void 0) { daiPriceInEth = (0, common_1.ether)(0.001); }
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, proxyPool, proxyConfigurator, _q, oneRay, _r, _s;
            return __generator(this, function (_t) {
                switch (_t.label) {
                    case 0:
                        this.marketId = marketId;
                        // deploy libraries
                        _a = this;
                        return [4 /*yield*/, this._deployer.external.deployGeneralLogic()];
                    case 1:
                        // deploy libraries
                        _a.genericLogicLibraryAddress = (_t.sent()).address;
                        _b = this;
                        return [4 /*yield*/, this._deployer.external.deployReserveLogic()];
                    case 2:
                        _b.reserveLogicAddress = (_t.sent()).address;
                        _c = this;
                        return [4 /*yield*/, this._deployer.external.deployValidationLogic(this.genericLogicLibraryAddress)];
                    case 3:
                        _c.validationLogicAddress = (_t.sent()).address;
                        // deploy contracts
                        _d = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2LendingPoolConfigurator()];
                    case 4:
                        // deploy contracts
                        _d.lendingPoolConfigurator = _t.sent();
                        _e = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2LendingPoolCollateralManager()];
                    case 5:
                        _e.lendingPoolCollateralManager = _t.sent();
                        _f = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2LendingPool(this.validationLogicAddress, this.reserveLogicAddress)];
                    case 6:
                        _f.lendingPool = _t.sent();
                        _g = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2LendingPoolAddressesProvider(this.marketId)];
                    case 7:
                        _g.lendingPoolAddressesProvider = _t.sent();
                        _h = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2ProtocolDataProvider(this.lendingPoolAddressesProvider.address)];
                    case 8:
                        _h.protocolDataProvider = _t.sent();
                        _j = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2DefaultReserveInterestRateStrategy(this.lendingPoolAddressesProvider.address)];
                    case 9:
                        _j.reserveInterestRateStrategy = _t.sent();
                        // deploy oracles
                        _k = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2LendingRateOracle()];
                    case 10:
                        // deploy oracles
                        _k.lendingRateOracle = _t.sent();
                        // Aave V2 oracle relies on Chainlink oracle and their fallback oracle. For fixture, we would be deploying a mock fallback oracle
                        // with ability to set asset prices on it, which is comparitively easier than deploying multiple chainlink aggregators.
                        _l = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2PriceOracle()];
                    case 11:
                        // Aave V2 oracle relies on Chainlink oracle and their fallback oracle. For fixture, we would be deploying a mock fallback oracle
                        // with ability to set asset prices on it, which is comparitively easier than deploying multiple chainlink aggregators.
                        _l.fallbackOracle = _t.sent();
                        _m = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2Oracle([], [], this.fallbackOracle.address, weth)];
                    case 12:
                        _m.priceOracle = _t.sent();
                        // set addresses in LendingPoolAddressProvider
                        return [4 /*yield*/, this.lendingPoolAddressesProvider.setPriceOracle(this.priceOracle.address)];
                    case 13:
                        // set addresses in LendingPoolAddressProvider
                        _t.sent();
                        return [4 /*yield*/, this.lendingPoolAddressesProvider.setLendingRateOracle(this.lendingRateOracle.address)];
                    case 14:
                        _t.sent();
                        _p = (_o = this.lendingPoolAddressesProvider).setPoolAdmin;
                        return [4 /*yield*/, this._ownerSigner.getAddress()];
                    case 15: return [4 /*yield*/, _p.apply(_o, [_t.sent()])];
                    case 16:
                        _t.sent();
                        return [4 /*yield*/, this.lendingPoolAddressesProvider.setLendingPoolCollateralManager(this.lendingPoolCollateralManager.address)];
                    case 17:
                        _t.sent();
                        // Set the protocol data provider to the 0x1 ID. Use the raw input here vs converting to bytes32 to match Aave configuration
                        return [4 /*yield*/, this.lendingPoolAddressesProvider.setAddress("0x0100000000000000000000000000000000000000000000000000000000000000", this.protocolDataProvider.address)];
                    case 18:
                        // Set the protocol data provider to the 0x1 ID. Use the raw input here vs converting to bytes32 to match Aave configuration
                        _t.sent();
                        // LendingPoolAddressProvider creates a new proxy contract and sets the passed in address as the implementation.
                        // We then fetch the proxy's address and attach it to the contract object, which allows us to use the contract object
                        // to call functions on the proxy
                        return [4 /*yield*/, this.lendingPoolAddressesProvider.setLendingPoolImpl(this.lendingPool.address)];
                    case 19:
                        // LendingPoolAddressProvider creates a new proxy contract and sets the passed in address as the implementation.
                        // We then fetch the proxy's address and attach it to the contract object, which allows us to use the contract object
                        // to call functions on the proxy
                        _t.sent();
                        return [4 /*yield*/, this.lendingPoolAddressesProvider.getLendingPool()];
                    case 20:
                        proxyPool = _t.sent();
                        this.lendingPool = this.lendingPool.attach(proxyPool);
                        return [4 /*yield*/, this.lendingPoolAddressesProvider.setLendingPoolConfiguratorImpl(this.lendingPoolConfigurator.address)];
                    case 21:
                        _t.sent();
                        return [4 /*yield*/, this.lendingPoolAddressesProvider.getLendingPoolConfigurator()];
                    case 22:
                        proxyConfigurator = _t.sent();
                        this.lendingPoolConfigurator = this.lendingPoolConfigurator.attach(proxyConfigurator);
                        _q = this;
                        return [4 /*yield*/, (0, common_1.getRandomAddress)()];
                    case 23:
                        _q.treasuryAddress = _t.sent(); // Tokens are minted to the treasury, so it can't be zero address
                        this.incentivesControllerAddress = constants_1.ADDRESS_ZERO;
                        // set initial asset prices in ETH
                        return [4 /*yield*/, this.setAssetPriceInOracle(dai, daiPriceInEth)];
                    case 24:
                        // set initial asset prices in ETH
                        _t.sent();
                        oneRay = ethers_1.BigNumber.from(10).pow(27);
                        // set initial market rates (R_0)
                        return [4 /*yield*/, this.setMarketBorrowRate(weth, oneRay.mul(3).div(100))];
                    case 25:
                        // set initial market rates (R_0)
                        _t.sent();
                        return [4 /*yield*/, this.setMarketBorrowRate(dai, oneRay.mul(39).div(1000))];
                    case 26:
                        _t.sent();
                        // Deploy and configure WETH reserve
                        _r = this;
                        return [4 /*yield*/, this.createAndEnableReserve(weth, "WETH", ethers_1.BigNumber.from(18), ethers_1.BigNumber.from(8000), // base LTV: 80%
                            ethers_1.BigNumber.from(8250), // liquidation threshold: 82.5%
                            ethers_1.BigNumber.from(10500), // liquidation bonus: 105.00%
                            ethers_1.BigNumber.from(1000), // reserve factor: 10%
                            true, // enable borrowing on reserve
                            true // enable stable debts
                            )];
                    case 27:
                        // Deploy and configure WETH reserve
                        _r.wethReserveTokens = _t.sent();
                        // Deploy and configure DAI reserve
                        _s = this;
                        return [4 /*yield*/, this.createAndEnableReserve(dai, "DAI", ethers_1.BigNumber.from(18), ethers_1.BigNumber.from(7500), // base LTV: 75%
                            ethers_1.BigNumber.from(8000), // liquidation threshold: 80%
                            ethers_1.BigNumber.from(10500), // liquidation bonus: 105.00%
                            ethers_1.BigNumber.from(1000), // reserve factor: 10%
                            true, // enable borrowing on reserve
                            true // enable stable debts
                            )];
                    case 28:
                        // Deploy and configure DAI reserve
                        _s.daiReserveTokens = _t.sent();
                        // Initialize governance
                        return [4 /*yield*/, this.initializeGovernance()];
                    case 29:
                        // Initialize governance
                        _t.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AaveV2Fixture.prototype.createAndEnableReserve = function (underlyingAsset, underlyingAssetSymbol, underlyingAssetDecimals, baseLTV, liquidationThreshold, liquidationBonus, reserveFactor, borrowingEnabled, stableBorrowingEnabled, treasuryAddress, incentivesControllerAddress, interestRateStrategyAddress) {
        if (treasuryAddress === void 0) { treasuryAddress = this.treasuryAddress; }
        if (incentivesControllerAddress === void 0) { incentivesControllerAddress = this.incentivesControllerAddress; }
        if (interestRateStrategyAddress === void 0) { interestRateStrategyAddress = this.reserveInterestRateStrategy.address; }
        return __awaiter(this, void 0, void 0, function () {
            var aToken, stableDebtToken, variableDebtToken, _a, aTokenProxy, stableDebtTokenProxy, variableDebtTokenProxy;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._deployer.external.deployAaveV2AToken()];
                    case 1:
                        aToken = _b.sent();
                        return [4 /*yield*/, this._deployer.external.deployAaveV2StableDebtToken()];
                    case 2:
                        stableDebtToken = _b.sent();
                        return [4 /*yield*/, this._deployer.external.deployAaveV2VariableDebtToken()];
                    case 3:
                        variableDebtToken = _b.sent();
                        // init reserve
                        return [4 /*yield*/, this.lendingPoolConfigurator.batchInitReserve([
                                {
                                    "aTokenImpl": aToken.address,
                                    "stableDebtTokenImpl": stableDebtToken.address,
                                    "variableDebtTokenImpl": variableDebtToken.address,
                                    "underlyingAssetDecimals": underlyingAssetDecimals,
                                    "interestRateStrategyAddress": interestRateStrategyAddress,
                                    "underlyingAsset": underlyingAsset,
                                    "treasury": treasuryAddress,
                                    "incentivesController": incentivesControllerAddress,
                                    "underlyingAssetName": underlyingAssetSymbol,
                                    "aTokenName": "Aave interest bearing " + underlyingAssetSymbol,
                                    "aTokenSymbol": "a" + underlyingAssetSymbol,
                                    "variableDebtTokenName": "Aave variable debt bearing " + underlyingAssetSymbol,
                                    "variableDebtTokenSymbol": "variableDebt" + underlyingAssetSymbol,
                                    "stableDebtTokenName": "Aave stable debt bearing " + underlyingAssetSymbol,
                                    "stableDebtTokenSymbol": "stableDebt" + underlyingAssetSymbol,
                                    "params": "0x",
                                },
                            ])];
                    case 4:
                        // init reserve
                        _b.sent();
                        // configure reserve
                        return [4 /*yield*/, this.lendingPoolConfigurator.configureReserveAsCollateral(underlyingAsset, baseLTV, liquidationThreshold, liquidationBonus)];
                    case 5:
                        // configure reserve
                        _b.sent();
                        if (!borrowingEnabled) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.lendingPoolConfigurator.enableBorrowingOnReserve(underlyingAsset, stableBorrowingEnabled)];
                    case 6:
                        _b.sent();
                        _b.label = 7;
                    case 7: return [4 /*yield*/, this.lendingPoolConfigurator.setReserveFactor(underlyingAsset, reserveFactor)];
                    case 8:
                        _b.sent();
                        return [4 /*yield*/, this.protocolDataProvider.getReserveTokensAddresses(underlyingAsset)];
                    case 9:
                        _a = _b.sent(), aTokenProxy = _a[0], stableDebtTokenProxy = _a[1], variableDebtTokenProxy = _a[2];
                        aToken = aToken.attach(aTokenProxy);
                        stableDebtToken = stableDebtToken.attach(stableDebtTokenProxy);
                        variableDebtToken = variableDebtToken.attach(variableDebtTokenProxy);
                        return [2 /*return*/, { aToken: aToken, stableDebtToken: stableDebtToken, variableDebtToken: variableDebtToken }];
                }
            });
        });
    };
    AaveV2Fixture.prototype.setAssetPriceInOracle = function (asset, priceInEth) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fallbackOracle.setAssetPrice(asset, priceInEth)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AaveV2Fixture.prototype.setMarketBorrowRate = function (asset, rate) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.lendingRateOracle.setMarketBorrowRate(asset, rate);
                return [2 /*return*/];
            });
        });
    };
    AaveV2Fixture.prototype.getForkedAaveLendingPoolAddressesProvider = function () {
        return this._deployer.external.getForkedAaveLendingPoolAddressesProvider(dependencies_1.default.AAVE_LENDING_POOL_ADDRESSES_PROVIDER[1]);
    };
    AaveV2Fixture.prototype.getForkedAaveV2ProtocolDataProvider = function () {
        return this._deployer.external.getForkedAaveV2ProtocolDataProvider(dependencies_1.default.AAVE_PROTOCOL_DATA_PROVIDER[1]);
    };
    AaveV2Fixture.prototype.initializeGovernance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
            return __generator(this, function (_v) {
                switch (_v.label) {
                    case 0:
                        // Deploy Executor
                        _a = this;
                        _c = (_b = this._deployer.external).deployExecutor;
                        return [4 /*yield*/, this._ownerSigner.getAddress()];
                    case 1: return [4 /*yield*/, _c.apply(_b, [_v.sent(), ethers_1.BigNumber.from(0),
                            ethers_1.BigNumber.from(0),
                            ethers_1.BigNumber.from(0),
                            constants_1.MAX_UINT_256,
                            ethers_1.BigNumber.from(50),
                            ethers_1.BigNumber.from(100),
                            ethers_1.BigNumber.from(50),
                            (0, common_1.ether)(100)])];
                    case 2:
                        // Deploy Executor
                        _a.executor = _v.sent();
                        // Deploy Aave and stkAave
                        _d = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveTokenV2Mintable()];
                    case 3:
                        // Deploy Aave and stkAave
                        _d.aaveToken = _v.sent();
                        _f = (_e = this.aaveToken).mint;
                        return [4 /*yield*/, this._ownerSigner.getAddress()];
                    case 4: return [4 /*yield*/, _f.apply(_e, [_v.sent(), (0, common_1.ether)(100000)])];
                    case 5:
                        _v.sent();
                        _g = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveTokenV2Mintable()];
                    case 6:
                        _g.stkAaveToken = _v.sent();
                        _j = (_h = this.stkAaveToken).mint;
                        return [4 /*yield*/, this._ownerSigner.getAddress()];
                    case 7: return [4 /*yield*/, _j.apply(_h, [_v.sent(), (0, common_1.ether)(100000)])];
                    case 8:
                        _v.sent();
                        // Deploy core gov contracts
                        _k = this;
                        return [4 /*yield*/, this._deployer.external.deployGovernanceStrategy(this.aaveToken.address, this.stkAaveToken.address)];
                    case 9:
                        // Deploy core gov contracts
                        _k.governanceStrategy = _v.sent();
                        _l = this;
                        _o = (_m = this._deployer.external).deployAaveGovernanceV2;
                        _p = [this.governanceStrategy.address,
                            ethers_1.BigNumber.from(0)];
                        return [4 /*yield*/, this._ownerSigner.getAddress()];
                    case 10: return [4 /*yield*/, _o.apply(_m, _p.concat([_v.sent(), [this.executor.address]]))];
                    case 11:
                        _l.aaveGovernanceV2 = _v.sent();
                        // send some aave and stkAave to random addresses to initialize the vote snapshots
                        _r = (_q = this.aaveToken.connect(this._ownerSigner)).transfer;
                        return [4 /*yield*/, (0, common_1.getRandomAddress)()];
                    case 12:
                        // send some aave and stkAave to random addresses to initialize the vote snapshots
                        _r.apply(_q, [_v.sent(), 100]);
                        _t = (_s = this.stkAaveToken.connect(this._ownerSigner)).transfer;
                        return [4 /*yield*/, (0, common_1.getRandomAddress)()];
                    case 13:
                        _t.apply(_s, [_v.sent(), 100]);
                        // Deploy inventive controller
                        return [4 /*yield*/, this._deployer.external.deployAaveV2StakedTokenIncentivesController(this.stkAaveToken.address, this.executor.address)];
                    case 14:
                        // Deploy inventive controller
                        _v.sent();
                        _u = this;
                        return [4 /*yield*/, this._deployer.external.deployAaveV2StakedTokenIncentivesController(this.stkAaveToken.address, this.executor.address)];
                    case 15:
                        _u.incentivesControllerAddress = (_v.sent()).address;
                        return [2 /*return*/];
                }
            });
        });
    };
    return AaveV2Fixture;
}());
exports.AaveV2Fixture = AaveV2Fixture;
