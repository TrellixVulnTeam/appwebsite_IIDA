"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurveFixture = void 0;
var deploys_1 = __importDefault(require("../deploys"));
var common_1 = require("../common");
var CurveFixture = /** @class */ (function () {
    function CurveFixture(provider, ownerAddress) {
        this._ownerSigner = provider.getSigner(ownerAddress);
        this._deployer = new deploys_1.default(this._ownerSigner);
    }
    /**
     * Initializes a pool.
     *
     * @param _tokens Expects 4 tokens
     */
    CurveFixture.prototype.initializePool = function (_tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this._deployer.external.deployCurvePoolERC20("Curve.fi DAI/USDC/USDT/sUSD", "crvUSD", 18, 0)];
                    case 1:
                        _a.poolToken = _d.sent();
                        _b = this;
                        return [4 /*yield*/, this._deployer.external.deployStableswap(_tokens, _tokens, this.poolToken.address)];
                    case 2:
                        _b.stableSwap = _d.sent();
                        _c = this;
                        return [4 /*yield*/, this._deployer.external.deployCurveDeposit(_tokens, _tokens, this.stableSwap.address, this.poolToken.address)];
                    case 3:
                        _c.deposit = _d.sent();
                        return [4 /*yield*/, this.poolToken.set_minter(this.stableSwap.address)];
                    case 4:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Initializes contracts for staking LP tokens and generate CRV token.
     */
    CurveFixture.prototype.initializeDAO = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this._deployer.external.deployCrvToken("Curve DAO Token", "CRV")];
                    case 1:
                        _a.crvToken = _d.sent();
                        _b = this;
                        return [4 /*yield*/, this._deployer.external.deployGaugeController(this.crvToken.address, this.crvToken.address)];
                    case 2:
                        _b.gaugeController = _d.sent();
                        return [4 /*yield*/, this.gaugeController["add_type(string,uint256)"]("Liquidity", (0, common_1.ether)(0.5))];
                    case 3:
                        _d.sent();
                        _c = this;
                        return [4 /*yield*/, this._deployer.external.deployMinter(this.crvToken.address, this.gaugeController.address)];
                    case 4:
                        _c.minter = _d.sent();
                        return [4 /*yield*/, this.crvToken.set_minter(this.minter.address)];
                    case 5:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Initializes a gauge.
     */
    CurveFixture.prototype.initializeGauge = function (_lpToken) {
        return __awaiter(this, void 0, void 0, function () {
            var gauge;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._deployer.external.deployLiquidityGauge(_lpToken, this.minter.address)];
                    case 1:
                        gauge = _a.sent();
                        return [4 /*yield*/, this.gaugeController.functions["add_gauge(address,int128,uint256)"](gauge.address, 0, (0, common_1.ether)(1))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, gauge];
                }
            });
        });
    };
    /**
     * Initializes a gauge with rewards for a LP token on external protocol contracts.
     */
    CurveFixture.prototype.initializeGaugeRewards = function (_lpToken, _rewardContract, _rewardedToken) {
        return __awaiter(this, void 0, void 0, function () {
            var gauge;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._deployer.external.deployLiquidityGaugeReward(_lpToken, this.minter.address, _rewardContract, _rewardedToken)];
                    case 1:
                        gauge = _a.sent();
                        return [4 /*yield*/, this.gaugeController["add_gauge(address,int128,uint256)"](gauge.address, 0, (0, common_1.ether)(1))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, gauge];
                }
            });
        });
    };
    return CurveFixture;
}());
exports.CurveFixture = CurveFixture;
