"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerpV2Fixture = void 0;
var ethers_1 = require("ethers");
var v3_sdk_1 = require("@uniswap/v3-sdk");
var jsbi_1 = __importDefault(require("jsbi"));
var common_1 = require("../common");
var deploys_1 = __importDefault(require("../deploys"));
var constants_1 = require("../constants");
var ONE_MILLION = "1000000";
var PerpV2Fixture = /** @class */ (function () {
    function PerpV2Fixture(provider, ownerAddress) {
        this._feeTier = 10000; // From perp fixtures: 1%
        this._priceFeeds = {};
        this._pools = {};
        this.feeTierPercent = (0, common_1.ether)(.01); // 1%
        this._ownerAddress = ownerAddress;
        this._ownerSigner = provider.getSigner(ownerAddress);
        this._deployer = new deploys_1.default(this._ownerSigner);
    }
    PerpV2Fixture.prototype.initialize = function (_maker, _otherTrader) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, vETH, vQuote, ethPriceFeed, _c, vBTC, btcPriceFeed, _d, _e, _f, _g, _h, _j, _k, _l, poolAddrA, poolAddrB, _m, _o, _p, _q, makerCollateralAmount, otherCollateralAmount;
            return __generator(this, function (_r) {
                switch (_r.label) {
                    case 0:
                        this.maker = _maker;
                        this.otherTrader = _otherTrader;
                        _a = this;
                        return [4 /*yield*/, this._deployer.mocks.deployTokenMock(this._ownerAddress, (0, common_1.ether)("100000000000000"), 6)];
                    case 1:
                        _a.usdc = _r.sent();
                        this._usdcDecimals = 6;
                        return [4 /*yield*/, this._tokensFixture()];
                    case 2:
                        _b = _r.sent(), vETH = _b.token0, vQuote = _b.token1, ethPriceFeed = _b.mockAggregator0;
                        return [4 /*yield*/, this._token0Fixture(vQuote.address)];
                    case 3:
                        _c = _r.sent(), vBTC = _c.baseToken, btcPriceFeed = _c.mockAggregator;
                        // we assume (base, quote) == (token0, token1)
                        this.vETH = vETH;
                        this.vBTC = vBTC;
                        this.vQuote = vQuote;
                        this.ethPriceFeed = ethPriceFeed;
                        this.btcPriceFeed = btcPriceFeed;
                        this._priceFeeds[this.vETH.address] = this.ethPriceFeed;
                        this._priceFeeds[this.vBTC.address] = this.btcPriceFeed;
                        // deploy UniV3 factory
                        _d = this;
                        return [4 /*yield*/, this._deployer.external.deployUniswapV3Factory()];
                    case 4:
                        // deploy UniV3 factory
                        _d.uniV3Factory = _r.sent();
                        _e = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2ClearingHouseConfig()];
                    case 5:
                        _e.clearingHouseConfig = _r.sent();
                        return [4 /*yield*/, this.clearingHouseConfig.initialize()];
                    case 6:
                        _r.sent();
                        // prepare uniswap factories
                        return [4 /*yield*/, this.uniV3Factory.createPool(this.vETH.address, this.vQuote.address, this._feeTier)];
                    case 7:
                        // prepare uniswap factories
                        _r.sent();
                        return [4 /*yield*/, this.uniV3Factory.createPool(this.vBTC.address, this.vQuote.address, this._feeTier)];
                    case 8:
                        _r.sent();
                        _f = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2MarketRegistry()];
                    case 9:
                        _f.marketRegistry = _r.sent();
                        return [4 /*yield*/, this.marketRegistry.initialize(this.uniV3Factory.address, this.vQuote.address)];
                    case 10:
                        _r.sent();
                        _g = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2OrderBook()];
                    case 11:
                        _g.orderBook = _r.sent();
                        return [4 /*yield*/, this.orderBook.initialize(this.marketRegistry.address)];
                    case 12:
                        _r.sent();
                        _h = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2InsuranceFund()];
                    case 13:
                        _h.insuranceFund = _r.sent();
                        return [4 /*yield*/, this.insuranceFund.initialize(this.usdc.address)];
                    case 14:
                        _r.sent();
                        _j = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2AccountBalance()];
                    case 15:
                        _j.accountBalance = _r.sent();
                        _k = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2Exchange()];
                    case 16:
                        _k.exchange = _r.sent();
                        // deploy exchange
                        return [4 /*yield*/, this.exchange.initialize(this.marketRegistry.address, this.orderBook.address, this.clearingHouseConfig.address, this.insuranceFund.address)];
                    case 17:
                        // deploy exchange
                        _r.sent();
                        this.exchange.setAccountBalance(this.accountBalance.address);
                        return [4 /*yield*/, this.orderBook.setExchange(this.exchange.address)];
                    case 18:
                        _r.sent();
                        return [4 /*yield*/, this.accountBalance.initialize(this.clearingHouseConfig.address, this.exchange.address)];
                    case 19:
                        _r.sent();
                        _l = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2Vault()];
                    case 20:
                        _l.vault = _r.sent();
                        return [4 /*yield*/, this.vault.initialize(this.insuranceFund.address, this.clearingHouseConfig.address, this.accountBalance.address, this.exchange.address)];
                    case 21:
                        _r.sent();
                        return [4 /*yield*/, this.insuranceFund.setBorrower(this.vault.address)];
                    case 22:
                        _r.sent();
                        return [4 /*yield*/, this.accountBalance.setVault(this.vault.address)];
                    case 23:
                        _r.sent();
                        return [4 /*yield*/, this.uniV3Factory.getPool(this.vETH.address, this.vQuote.address, this._feeTier)];
                    case 24:
                        poolAddrA = _r.sent();
                        return [4 /*yield*/, this.uniV3Factory.getPool(this.vBTC.address, this.vQuote.address, this._feeTier)];
                    case 25:
                        poolAddrB = _r.sent();
                        _m = this;
                        return [4 /*yield*/, this._deployer.external.getUniswapV3PoolInstance(poolAddrA)];
                    case 26:
                        _m.vETHPool = _r.sent();
                        _o = this;
                        return [4 /*yield*/, this._deployer.external.getUniswapV3PoolInstance(poolAddrB)];
                    case 27:
                        _o.vBTCPool = _r.sent();
                        this._pools[vETH.address] = this.vETHPool;
                        this._pools[vBTC.address] = this.vBTCPool;
                        return [4 /*yield*/, this.vETH.addWhitelist(poolAddrA)];
                    case 28:
                        _r.sent();
                        return [4 /*yield*/, this.vBTC.addWhitelist(poolAddrB)];
                    case 29:
                        _r.sent();
                        return [4 /*yield*/, this.vQuote.addWhitelist(poolAddrA)];
                    case 30:
                        _r.sent();
                        return [4 /*yield*/, this.vQuote.addWhitelist(poolAddrB)];
                    case 31:
                        _r.sent();
                        // deploy clearingHouse
                        _p = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2ClearingHouse()];
                    case 32:
                        // deploy clearingHouse
                        _p.clearingHouse = _r.sent();
                        return [4 /*yield*/, this.clearingHouse.initialize(this.clearingHouseConfig.address, this.vault.address, this.vQuote.address, this.uniV3Factory.address, this.exchange.address, this.accountBalance.address)];
                    case 33:
                        _r.sent();
                        return [4 /*yield*/, this.vault.setClearingHouse(this.clearingHouse.address)];
                    case 34:
                        _r.sent();
                        _q = this;
                        return [4 /*yield*/, this._deployer.external.deployPerpV2Quoter()];
                    case 35:
                        _q.quoter = _r.sent();
                        return [4 /*yield*/, this.quoter.initialize(this.marketRegistry.address)];
                    case 36:
                        _r.sent();
                        return [4 /*yield*/, this.vQuote.mintMaximumTo(this.clearingHouse.address)];
                    case 37:
                        _r.sent();
                        return [4 /*yield*/, this.vETH.mintMaximumTo(this.clearingHouse.address)];
                    case 38:
                        _r.sent();
                        return [4 /*yield*/, this.vBTC.mintMaximumTo(this.clearingHouse.address)];
                    case 39:
                        _r.sent();
                        return [4 /*yield*/, this.vQuote.addWhitelist(this.clearingHouse.address)];
                    case 40:
                        _r.sent();
                        return [4 /*yield*/, this.vETH.addWhitelist(this.clearingHouse.address)];
                    case 41:
                        _r.sent();
                        return [4 /*yield*/, this.vBTC.addWhitelist(this.clearingHouse.address)];
                    case 42:
                        _r.sent();
                        return [4 /*yield*/, this.marketRegistry.setClearingHouse(this.clearingHouse.address)];
                    case 43:
                        _r.sent();
                        return [4 /*yield*/, this.orderBook.setClearingHouse(this.clearingHouse.address)];
                    case 44:
                        _r.sent();
                        return [4 /*yield*/, this.exchange.setClearingHouse(this.clearingHouse.address)];
                    case 45:
                        _r.sent();
                        return [4 /*yield*/, this.accountBalance.setClearingHouse(this.clearingHouse.address)];
                    case 46:
                        _r.sent();
                        makerCollateralAmount = ethers_1.utils.parseUnits(ONE_MILLION, this._usdcDecimals);
                        return [4 /*yield*/, this.usdc.mint(this.maker.address, makerCollateralAmount)];
                    case 47:
                        _r.sent();
                        return [4 /*yield*/, this.deposit(this.maker, ethers_1.BigNumber.from(ONE_MILLION), this.usdc)];
                    case 48:
                        _r.sent();
                        otherCollateralAmount = ethers_1.utils.parseUnits(ONE_MILLION, this._usdcDecimals);
                        return [4 /*yield*/, this.usdc.mint(this.otherTrader.address, otherCollateralAmount)];
                    case 49:
                        _r.sent();
                        return [4 /*yield*/, this.deposit(this.otherTrader, ethers_1.BigNumber.from(ONE_MILLION), this.usdc)];
                    case 50:
                        _r.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PerpV2Fixture.prototype.deposit = function (sender, amount, token) {
        return __awaiter(this, void 0, void 0, function () {
            var decimals, parsedAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, token.decimals()];
                    case 1:
                        decimals = _a.sent();
                        parsedAmount = ethers_1.utils.parseUnits(amount.toString(), decimals);
                        return [4 /*yield*/, token.connect(sender.wallet).approve(this.vault.address, parsedAmount)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.vault.connect(sender.wallet).deposit(token.address, parsedAmount)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PerpV2Fixture.prototype.initializePoolWithLiquidityWide = function (baseToken, baseTokenAmount, quoteTokenAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var pool, tickSpacing, lowerTick, upperTick;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pool = this._pools[baseToken.address];
                        return [4 /*yield*/, pool.initialize(this._encodePriceSqrt(quoteTokenAmount, baseTokenAmount))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, pool.increaseObservationCardinalityNext((2 ^ 16) - 1)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, pool.tickSpacing()];
                    case 3:
                        tickSpacing = _a.sent();
                        lowerTick = this._getMinTick(tickSpacing);
                        upperTick = this._getMaxTick(tickSpacing);
                        return [4 /*yield*/, this.marketRegistry.addPool(baseToken.address, this._feeTier)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.marketRegistry.setFeeRatio(baseToken.address, this._feeTier)];
                    case 5:
                        _a.sent();
                        // maker add liquidity at ratio
                        return [4 /*yield*/, this.clearingHouse.connect(this.maker.wallet).addLiquidity({
                                baseToken: baseToken.address,
                                base: baseTokenAmount,
                                quote: quoteTokenAmount,
                                lowerTick: lowerTick,
                                upperTick: upperTick,
                                minBase: 0,
                                minQuote: 0,
                                useTakerBalance: false,
                                deadline: ethers_1.constants.MaxUint256,
                            })];
                    case 6:
                        // maker add liquidity at ratio
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PerpV2Fixture.prototype.initializePoolWithLiquidityWithinTicks = function (baseToken, baseTokenAmount, quoteTokenAmount, lowerTick, upperTick) {
        return __awaiter(this, void 0, void 0, function () {
            var pool;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pool = this._pools[baseToken.address];
                        return [4 /*yield*/, pool.initialize(this._encodePriceSqrt(quoteTokenAmount, baseTokenAmount))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, pool.increaseObservationCardinalityNext((2 ^ 16) - 1)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.marketRegistry.addPool(baseToken.address, this._feeTier)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.marketRegistry.setFeeRatio(baseToken.address, this._feeTier)];
                    case 4:
                        _a.sent();
                        // maker add liquidity at ratio
                        return [4 /*yield*/, this.clearingHouse.connect(this.maker.wallet).addLiquidity({
                                baseToken: baseToken.address,
                                base: baseTokenAmount,
                                quote: quoteTokenAmount,
                                lowerTick: lowerTick,
                                upperTick: upperTick,
                                minBase: 0,
                                minQuote: 0,
                                useTakerBalance: false,
                                deadline: ethers_1.constants.MaxUint256,
                            })];
                    case 5:
                        // maker add liquidity at ratio
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PerpV2Fixture.prototype.setBaseTokenOraclePrice = function (baseToken, price) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._priceFeeds[baseToken.address].setRoundData(0, price, 0, 0, 0)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PerpV2Fixture.prototype.getSpotPrice = function (_baseToken) {
        return __awaiter(this, void 0, void 0, function () {
            var pool, sqrtPriceX96, priceX86, squaredPrice, decimalsRatio, denominator, scaledPrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pool = this._pools[_baseToken];
                        return [4 /*yield*/, pool.slot0()];
                    case 1:
                        sqrtPriceX96 = (_a.sent()).sqrtPriceX96;
                        priceX86 = jsbi_1.default.BigInt(sqrtPriceX96.toString());
                        squaredPrice = jsbi_1.default.multiply(priceX86, priceX86);
                        decimalsRatio = 1e18;
                        denominator = jsbi_1.default.exponentiate(jsbi_1.default.BigInt(2), jsbi_1.default.BigInt(192));
                        scaledPrice = jsbi_1.default.multiply(squaredPrice, jsbi_1.default.BigInt(decimalsRatio));
                        return [2 /*return*/, ethers_1.BigNumber.from(jsbi_1.default.divide(scaledPrice, denominator).toString())];
                }
            });
        });
    };
    PerpV2Fixture.prototype.getSwapQuote = function (baseToken, baseQuantityUnits, isBuy) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, deltaBase, deltaQuote;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.clearingHouse
                            .connect(this.otherTrader.wallet)
                            .callStatic
                            .openPosition({
                            baseToken: baseToken,
                            isBaseToQuote: !isBuy,
                            isExactInput: !isBuy,
                            amount: baseQuantityUnits,
                            oppositeAmountBound: constants_1.ZERO,
                            deadline: constants_1.MAX_UINT_256,
                            sqrtPriceLimitX96: constants_1.ZERO,
                            referralCode: constants_1.ZERO_BYTES
                        })];
                    case 1:
                        _a = _b.sent(), deltaBase = _a.deltaBase, deltaQuote = _a.deltaQuote;
                        return [2 /*return*/, { deltaBase: deltaBase, deltaQuote: deltaQuote }];
                }
            });
        });
    };
    PerpV2Fixture.prototype.getCurrentLeverage = function (_setToken, _positionInfo, _collateralBalance) {
        return __awaiter(this, void 0, void 0, function () {
            var price, basePositionAbsoluteValue, basePositionNetValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSpotPrice(_positionInfo.baseToken)];
                    case 1:
                        price = _a.sent();
                        basePositionAbsoluteValue = (0, common_1.preciseMul)(_positionInfo.baseBalance, price).abs();
                        basePositionNetValue = (0, common_1.preciseMul)(_positionInfo.baseBalance, price);
                        return [2 /*return*/, (0, common_1.preciseDiv)(basePositionAbsoluteValue, basePositionNetValue
                                .add(_positionInfo.quoteBalance)
                                .add(_collateralBalance))];
                }
            });
        });
    };
    // UniV3 AddLiquidity helpers
    PerpV2Fixture.prototype._getMinTick = function (tickSpacing) {
        return Math.ceil(-887272 / tickSpacing) * tickSpacing;
    };
    PerpV2Fixture.prototype._getMaxTick = function (tickSpacing) {
        return Math.floor(887272 / tickSpacing) * tickSpacing;
    };
    PerpV2Fixture.prototype._encodePriceSqrt = function (token1Amount, token0Amount) {
        return ethers_1.BigNumber.from((0, v3_sdk_1.encodeSqrtRatioX96)(token1Amount.toString(), token0Amount.toString()).toString());
    };
    // Base & Quote token helpers
    PerpV2Fixture.prototype._createQuoteTokenFixture = function (name, symbol) {
        return __awaiter(this, void 0, void 0, function () {
            var quoteToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._deployer.external.deployPerpV2QuoteToken()];
                    case 1:
                        quoteToken = _a.sent();
                        return [4 /*yield*/, quoteToken.initialize(name, symbol)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, quoteToken];
                }
            });
        });
    };
    PerpV2Fixture.prototype._createBaseTokenFixture = function (name, symbol) {
        return __awaiter(this, void 0, void 0, function () {
            var mockAggregator, chainlinkPriceFeed, baseToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._deployer.mocks.deployChainlinkAggregatorMock(6)];
                    case 1:
                        mockAggregator = _a.sent();
                        return [4 /*yield*/, this._deployer.external.deployPerpV2ChainlinkPriceFeed()];
                    case 2:
                        chainlinkPriceFeed = _a.sent();
                        return [4 /*yield*/, chainlinkPriceFeed.initialize(mockAggregator.address)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this._deployer.external.deployPerpV2BaseToken()];
                    case 4:
                        baseToken = _a.sent();
                        return [4 /*yield*/, baseToken.initialize(name, symbol, chainlinkPriceFeed.address)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, { baseToken: baseToken, mockAggregator: mockAggregator }];
                }
            });
        });
    };
    PerpV2Fixture.prototype._tokensFixture = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, randomToken0, randomMockAggregator0, _b, randomToken1, randomMockAggregator1, token0, token1, mockAggregator0, mockAggregator1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this._createBaseTokenFixture("RandomTestToken0", "randomToken0")];
                    case 1:
                        _a = _c.sent(), randomToken0 = _a.baseToken, randomMockAggregator0 = _a.mockAggregator;
                        return [4 /*yield*/, this._createBaseTokenFixture("RandomTestToken1", "randomToken1")];
                    case 2:
                        _b = _c.sent(), randomToken1 = _b.baseToken, randomMockAggregator1 = _b.mockAggregator;
                        if (this._isAscendingTokenOrder(randomToken0.address, randomToken1.address)) {
                            token0 = randomToken0;
                            mockAggregator0 = randomMockAggregator0;
                            token1 = randomToken1;
                            mockAggregator1 = randomMockAggregator1;
                        }
                        else {
                            token0 = randomToken1;
                            mockAggregator0 = randomMockAggregator1;
                            token1 = randomToken0;
                            mockAggregator1 = randomMockAggregator0;
                        }
                        return [2 /*return*/, {
                                token0: token0,
                                mockAggregator0: mockAggregator0,
                                token1: token1,
                                mockAggregator1: mockAggregator1,
                            }];
                }
            });
        });
    };
    PerpV2Fixture.prototype._isAscendingTokenOrder = function (addr0, addr1) {
        return addr0.toLowerCase() < addr1.toLowerCase();
    };
    PerpV2Fixture.prototype._token0Fixture = function (token1Addr) {
        return __awaiter(this, void 0, void 0, function () {
            var token0Fixture;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!token0Fixture || !this._isAscendingTokenOrder(token0Fixture.baseToken.address, token1Addr))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._createBaseTokenFixture("RandomTestToken0", "randomToken0")];
                    case 1:
                        token0Fixture = _a.sent();
                        return [3 /*break*/, 0];
                    case 2: return [2 /*return*/, token0Fixture];
                }
            });
        });
    };
    return PerpV2Fixture;
}());
exports.PerpV2Fixture = PerpV2Fixture;
