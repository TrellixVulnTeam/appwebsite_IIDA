"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeForkedTokens = exports.getForkedTokens = exports.getWallets = exports.getEthBalance = exports.getRandomAccount = exports.getAccounts = void 0;
var hardhat_1 = require("hardhat");
var dependencies_1 = __importDefault(require("../deploys/dependencies"));
var typechain_1 = require("../../typechain");
var common_1 = require("../common");
var provider = hardhat_1.ethers.provider;
var getAccounts = function () { return __awaiter(void 0, void 0, void 0, function () {
    var accounts, wallets, i, _a, _b;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                accounts = [];
                return [4 /*yield*/, (0, exports.getWallets)()];
            case 1:
                wallets = _d.sent();
                i = 0;
                _d.label = 2;
            case 2:
                if (!(i < wallets.length)) return [3 /*break*/, 5];
                _b = (_a = accounts).push;
                _c = {
                    wallet: wallets[i]
                };
                return [4 /*yield*/, wallets[i].getAddress()];
            case 3:
                _b.apply(_a, [(_c.address = _d.sent(),
                        _c)]);
                _d.label = 4;
            case 4:
                i++;
                return [3 /*break*/, 2];
            case 5: return [2 /*return*/, accounts];
        }
    });
}); };
exports.getAccounts = getAccounts;
// Use the last wallet to ensure it has Ether
var getRandomAccount = function () { return __awaiter(void 0, void 0, void 0, function () {
    var accounts;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.getAccounts)()];
            case 1:
                accounts = _a.sent();
                return [2 /*return*/, accounts[accounts.length - 1]];
        }
    });
}); };
exports.getRandomAccount = getRandomAccount;
var getEthBalance = function (account) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, provider.getBalance(account)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.getEthBalance = getEthBalance;
// NOTE ethers.signers may be a hardhat specific function
var getWallets = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, hardhat_1.ethers.getSigners()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.getWallets = getWallets;
var getForkedDependencyAddresses = function () {
    return {
        whales: [
            dependencies_1.default.DAI_WHALE,
            dependencies_1.default.WETH_WHALE,
            dependencies_1.default.WBTC_WHALE,
            dependencies_1.default.USDC_WHALE,
        ],
        tokens: [
            dependencies_1.default.DAI[1],
            dependencies_1.default.WETH[1],
            dependencies_1.default.WBTC[1],
            dependencies_1.default.USDC[1],
        ],
    };
};
// Mainnet token instances connected their impersonated
// top holders to enable approval / transfer etc.
var getForkedTokens = function () {
    var _a = getForkedDependencyAddresses(), whales = _a.whales, tokens = _a.tokens;
    var forkedTokens = {
        dai: typechain_1.IERC20__factory.connect(tokens[0 /* DAI */], provider.getSigner(whales[0 /* DAI */])),
        weth: typechain_1.IERC20__factory.connect(tokens[1 /* WETH */], provider.getSigner(whales[1 /* WETH */])),
        wbtc: typechain_1.IERC20__factory.connect(tokens[2 /* WBTC */], provider.getSigner(whales[2 /* WBTC */])),
        usdc: typechain_1.IERC20__factory.connect(tokens[3 /* USDC */], provider.getSigner(whales[3 /* USDC */])),
    };
    return forkedTokens;
};
exports.getForkedTokens = getForkedTokens;
var initializeForkedTokens = function (deployer) { return __awaiter(void 0, void 0, void 0, function () {
    var whales, _i, whales_1, whale, funder;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                whales = getForkedDependencyAddresses().whales;
                _i = 0, whales_1 = whales;
                _a.label = 1;
            case 1:
                if (!(_i < whales_1.length)) return [3 /*break*/, 6];
                whale = whales_1[_i];
                return [4 /*yield*/, hardhat_1.network.provider.request({
                        method: "hardhat_impersonateAccount",
                        params: [whale]
                    })];
            case 2:
                _a.sent();
                return [4 /*yield*/, deployer.mocks.deployForceFunderMock()];
            case 3:
                funder = _a.sent();
                return [4 /*yield*/, funder.fund(whale, { value: (0, common_1.ether)(100) })];
            case 4:
                _a.sent(); // Gas money
                _a.label = 5;
            case 5:
                _i++;
                return [3 /*break*/, 1];
            case 6: return [2 /*return*/];
        }
    });
}); };
exports.initializeForkedTokens = initializeForkedTokens;
