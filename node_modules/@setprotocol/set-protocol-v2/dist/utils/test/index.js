"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomAddress = exports.cacheBeforeEach = exports.mineBlockAsync = exports.increaseTimeAsync = exports.getWaffleExpect = exports.getTransactionTimestamp = exports.getProvider = exports.getLastBlockTimestamp = exports.addSnapshotBeforeRestoreAfterEach = exports.initializeForkedTokens = exports.getForkedTokens = exports.getRandomAccount = exports.getEthBalance = exports.getAccounts = exports.getPerpV2Fixture = exports.getUniswapV3Fixture = exports.getYearnFixture = exports.getUniswapFixture = exports.getKyberV3DMMFixture = exports.getCompoundFixture = exports.getCurveFixture = exports.getBalancerFixture = exports.getAaveV2Fixture = exports.getAaveFixture = exports.getBlockchainUtils = exports.getProtocolUtils = exports.getSystemFixture = void 0;
// These utils will be provider-aware of the hardhat interface
var hardhat_1 = require("hardhat");
var fixtures_1 = require("../fixtures");
var common_1 = require("../common");
// Hardhat-Provider Aware Exports
var provider = hardhat_1.ethers.provider;
var getSystemFixture = function (ownerAddress) { return new fixtures_1.SystemFixture(provider, ownerAddress); };
exports.getSystemFixture = getSystemFixture;
var getProtocolUtils = function () { return new common_1.ProtocolUtils(provider); };
exports.getProtocolUtils = getProtocolUtils;
var getBlockchainUtils = function () { return new common_1.Blockchain(provider); };
exports.getBlockchainUtils = getBlockchainUtils;
var getAaveFixture = function (ownerAddress) { return new fixtures_1.AaveFixture(provider, ownerAddress); };
exports.getAaveFixture = getAaveFixture;
var getAaveV2Fixture = function (ownerAdderss) { return new fixtures_1.AaveV2Fixture(provider, ownerAdderss); };
exports.getAaveV2Fixture = getAaveV2Fixture;
var getBalancerFixture = function (ownerAddress) { return new fixtures_1.BalancerFixture(provider, ownerAddress); };
exports.getBalancerFixture = getBalancerFixture;
var getCurveFixture = function (ownerAddress) { return new fixtures_1.CurveFixture(provider, ownerAddress); };
exports.getCurveFixture = getCurveFixture;
var getCompoundFixture = function (ownerAddress) { return new fixtures_1.CompoundFixture(provider, ownerAddress); };
exports.getCompoundFixture = getCompoundFixture;
var getKyberV3DMMFixture = function (ownerAddress) { return new fixtures_1.KyberV3DMMFixture(provider, ownerAddress); };
exports.getKyberV3DMMFixture = getKyberV3DMMFixture;
var getUniswapFixture = function (ownerAddress) { return new fixtures_1.UniswapFixture(provider, ownerAddress); };
exports.getUniswapFixture = getUniswapFixture;
var getYearnFixture = function (ownerAddress) { return new fixtures_1.YearnFixture(provider, ownerAddress); };
exports.getYearnFixture = getYearnFixture;
var getUniswapV3Fixture = function (ownerAddress) { return new fixtures_1.UniswapV3Fixture(provider, ownerAddress); };
exports.getUniswapV3Fixture = getUniswapV3Fixture;
var getPerpV2Fixture = function (ownerAddress) { return new fixtures_1.PerpV2Fixture(provider, ownerAddress); };
exports.getPerpV2Fixture = getPerpV2Fixture;
var accountUtils_1 = require("./accountUtils");
Object.defineProperty(exports, "getAccounts", { enumerable: true, get: function () { return accountUtils_1.getAccounts; } });
Object.defineProperty(exports, "getEthBalance", { enumerable: true, get: function () { return accountUtils_1.getEthBalance; } });
Object.defineProperty(exports, "getRandomAccount", { enumerable: true, get: function () { return accountUtils_1.getRandomAccount; } });
Object.defineProperty(exports, "getForkedTokens", { enumerable: true, get: function () { return accountUtils_1.getForkedTokens; } });
Object.defineProperty(exports, "initializeForkedTokens", { enumerable: true, get: function () { return accountUtils_1.initializeForkedTokens; } });
var testingUtils_1 = require("./testingUtils");
Object.defineProperty(exports, "addSnapshotBeforeRestoreAfterEach", { enumerable: true, get: function () { return testingUtils_1.addSnapshotBeforeRestoreAfterEach; } });
Object.defineProperty(exports, "getLastBlockTimestamp", { enumerable: true, get: function () { return testingUtils_1.getLastBlockTimestamp; } });
Object.defineProperty(exports, "getProvider", { enumerable: true, get: function () { return testingUtils_1.getProvider; } });
Object.defineProperty(exports, "getTransactionTimestamp", { enumerable: true, get: function () { return testingUtils_1.getTransactionTimestamp; } });
Object.defineProperty(exports, "getWaffleExpect", { enumerable: true, get: function () { return testingUtils_1.getWaffleExpect; } });
Object.defineProperty(exports, "increaseTimeAsync", { enumerable: true, get: function () { return testingUtils_1.increaseTimeAsync; } });
Object.defineProperty(exports, "mineBlockAsync", { enumerable: true, get: function () { return testingUtils_1.mineBlockAsync; } });
Object.defineProperty(exports, "cacheBeforeEach", { enumerable: true, get: function () { return testingUtils_1.cacheBeforeEach; } });
var common_2 = require("../common");
Object.defineProperty(exports, "getRandomAddress", { enumerable: true, get: function () { return common_2.getRandomAddress; } });
