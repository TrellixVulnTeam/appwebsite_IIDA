"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.min = exports.getReservesSafe = exports.calculateTokensInReserve = exports.calculateRebalanceQuantity = exports.calculateRebalanceFlows = exports.calculateEngageQuantities = exports.calculateLPTokensIssued = void 0;
var ethers_1 = require("ethers");
var constants_1 = require("../constants");
var index_1 = require("../index");
var mathUtils_1 = require("./mathUtils");
var MINIMUM_LIQUIDITY = ethers_1.BigNumber.from(1000);
var calculateLPTokensIssued = function (pool, amountOne, amountTwo) { return __awaiter(void 0, void 0, void 0, function () {
    var reserves, totalSupply, liquidity;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, pool.getReserves()];
            case 1:
                reserves = _a.sent();
                return [4 /*yield*/, pool.totalSupply()];
            case 2:
                totalSupply = _a.sent();
                if (totalSupply == constants_1.ZERO) {
                    liquidity = sqrt(amountOne.mul(amountTwo)).sub(MINIMUM_LIQUIDITY);
                }
                else {
                    liquidity = (0, exports.min)(amountOne.mul(totalSupply).div(reserves._reserve0), amountTwo.mul(totalSupply).div(reserves._reserve1));
                }
                return [2 /*return*/, liquidity];
        }
    });
}); };
exports.calculateLPTokensIssued = calculateLPTokensIssued;
var calculateEngageQuantities = function (setToken, assetOne, assetTwo, lpToken, stakingRewards, reservePercentage, extraAssetOne, extraAssetTwo) {
    if (extraAssetOne === void 0) { extraAssetOne = constants_1.ZERO; }
    if (extraAssetTwo === void 0) { extraAssetTwo = constants_1.ZERO; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, reserveOne, reserveTwo, balanceOnTokenAssetOne, balanceOnTokenAssetTwo;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, (0, exports.calculateTokensInReserve)(setToken, assetOne, assetTwo, lpToken, stakingRewards)];
                case 1:
                    _a = _b.sent(), reserveOne = _a[0], reserveTwo = _a[1];
                    return [4 /*yield*/, assetOne.balanceOf(setToken.address)];
                case 2:
                    balanceOnTokenAssetOne = (_b.sent()).add(extraAssetOne);
                    return [4 /*yield*/, assetTwo.balanceOf(setToken.address)];
                case 3:
                    balanceOnTokenAssetTwo = (_b.sent()).add(extraAssetTwo);
                    return [2 /*return*/, [
                            (0, index_1.preciseMul)(reserveOne, reservePercentage).sub((0, index_1.preciseMul)(balanceOnTokenAssetOne, (0, index_1.ether)(1).sub(reservePercentage))),
                            (0, index_1.preciseMul)(reserveTwo, reservePercentage).sub((0, index_1.preciseMul)(balanceOnTokenAssetTwo, (0, index_1.ether)(1).sub(reservePercentage))),
                        ]];
            }
        });
    });
};
exports.calculateEngageQuantities = calculateEngageQuantities;
var calculateRebalanceFlows = function (setToken, router, sellTokenQuantity, assetOne, assetTwo, assetOneToTwoPrice, extraAssetOne, extraAssetTwo) {
    if (extraAssetOne === void 0) { extraAssetOne = constants_1.ZERO; }
    if (extraAssetTwo === void 0) { extraAssetTwo = constants_1.ZERO; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, quantityToSell, assetToSell, assetToBuy;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, (0, exports.calculateRebalanceQuantity)(sellTokenQuantity, setToken, assetOne, assetTwo, assetOneToTwoPrice, extraAssetOne, extraAssetTwo)];
                case 1:
                    _a = _b.sent(), quantityToSell = _a[0], assetToSell = _a[1], assetToBuy = _a[2];
                    return [4 /*yield*/, router.getAmountsOut(quantityToSell, [assetToSell, assetToBuy])];
                case 2: return [2 /*return*/, _b.sent()];
            }
        });
    });
};
exports.calculateRebalanceFlows = calculateRebalanceFlows;
var calculateRebalanceQuantity = function (sellTokenQuantity, setToken, assetOne, assetTwo, assetOneToTwoPrice, extraAssetOne, extraAssetTwo) {
    if (extraAssetOne === void 0) { extraAssetOne = constants_1.ZERO; }
    if (extraAssetTwo === void 0) { extraAssetTwo = constants_1.ZERO; }
    return __awaiter(void 0, void 0, void 0, function () {
        var balanceAssetOne, balanceAssetTwo, valueAssetTwoDenomOne, quantityToSell, assetToSell, assetToBuy;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, assetOne.balanceOf(setToken.address)];
                case 1:
                    balanceAssetOne = (_a.sent()).add(extraAssetOne);
                    return [4 /*yield*/, assetTwo.balanceOf(setToken.address)];
                case 2:
                    balanceAssetTwo = (_a.sent()).add(extraAssetTwo);
                    valueAssetTwoDenomOne = (0, mathUtils_1.preciseDiv)(balanceAssetTwo, assetOneToTwoPrice);
                    if (balanceAssetOne.gt(valueAssetTwoDenomOne)) {
                        quantityToSell = balanceAssetOne.sub(valueAssetTwoDenomOne).div(2);
                        assetToSell = assetOne.address;
                        assetToBuy = assetTwo.address;
                    }
                    else {
                        quantityToSell = (0, index_1.preciseMul)(valueAssetTwoDenomOne.sub(balanceAssetOne).div(2), assetOneToTwoPrice);
                        assetToSell = assetTwo.address;
                        assetToBuy = assetOne.address;
                    }
                    if (sellTokenQuantity > constants_1.ZERO) {
                        quantityToSell = sellTokenQuantity;
                    }
                    return [2 /*return*/, [quantityToSell, assetToSell, assetToBuy]];
            }
        });
    });
};
exports.calculateRebalanceQuantity = calculateRebalanceQuantity;
var calculateTokensInReserve = function (setToken, assetOne, assetTwo, lpToken, stakingRewards) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, reserveOne, reserveTwo, totalSupply, lpTokenBalance;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, (0, exports.getReservesSafe)(assetOne.address, assetTwo.address, lpToken)];
            case 1:
                _a = _b.sent(), reserveOne = _a[0], reserveTwo = _a[1];
                return [4 /*yield*/, lpToken.totalSupply()];
            case 2:
                totalSupply = _b.sent();
                return [4 /*yield*/, stakingRewards.balanceOf(setToken.address)];
            case 3:
                lpTokenBalance = _b.sent();
                return [2 /*return*/, [
                        (0, index_1.preciseMul)((0, mathUtils_1.preciseDiv)(reserveOne, totalSupply), lpTokenBalance),
                        (0, index_1.preciseMul)((0, mathUtils_1.preciseDiv)(reserveTwo, totalSupply), lpTokenBalance),
                    ]];
        }
    });
}); };
exports.calculateTokensInReserve = calculateTokensInReserve;
var getReservesSafe = function (assetOne, assetTwo, lpToken) { return __awaiter(void 0, void 0, void 0, function () {
    var firstAsset, reserves;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                firstAsset = assetOne < assetTwo ? assetOne : assetTwo;
                return [4 /*yield*/, lpToken.getReserves()];
            case 1:
                reserves = _a.sent();
                return [2 /*return*/, assetOne == firstAsset ? [reserves._reserve0, reserves._reserve1] : [reserves._reserve1, reserves._reserve0]];
        }
    });
}); };
exports.getReservesSafe = getReservesSafe;
var sqrt = function (value) {
    var z = value;
    if (value > ethers_1.BigNumber.from(3)) {
        var x = value.div(2).add(1);
        while (x < z) {
            z = x;
            x = value.div(x).add(x).div(2);
        }
    }
    else if (value != constants_1.ZERO) {
        z = ethers_1.BigNumber.from(1);
    }
    return z;
};
var min = function (valueOne, valueTwo) {
    return valueOne < valueTwo ? valueOne : valueTwo;
};
exports.min = min;
