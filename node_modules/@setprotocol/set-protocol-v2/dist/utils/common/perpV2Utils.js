"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateExternalPositionUnit = exports.calculateUSDCTransferOut = exports.calculateUSDCTransferIn = exports.leverUp = exports.toUSDCDecimals = void 0;
var ethers_1 = require("ethers");
var index_1 = require("../index");
var constants_1 = require("../constants");
// Converts PRECISE_UNIT value into USDC decimals value
function toUSDCDecimals(quantity) {
    return quantity.div(ethers_1.BigNumber.from(10).pow(12));
}
exports.toUSDCDecimals = toUSDCDecimals;
// Allocates all deposited collateral to a levered position. Returns new baseToken position unit
function leverUp(setToken, module, fixture, owner, baseToken, leverageRatio, slippagePercentage, isLong) {
    return __awaiter(this, void 0, void 0, function () {
        var spotPrice, totalSupply, collateralBalance, baseTradeQuantityNotional, baseTradeQuantityUnit, estimatedQuoteQuantityNotional, allowedSlippage, slippageAdjustedQuoteQuanitityNotional, receiveQuoteQuantityUnit;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fixture.getSpotPrice(baseToken)];
                case 1:
                    spotPrice = _a.sent();
                    return [4 /*yield*/, setToken.totalSupply()];
                case 2:
                    totalSupply = _a.sent();
                    return [4 /*yield*/, module.getAccountInfo(setToken.address)];
                case 3:
                    collateralBalance = (_a.sent()).collateralBalance;
                    baseTradeQuantityNotional = (0, index_1.preciseDiv)(collateralBalance.mul(leverageRatio), spotPrice);
                    baseTradeQuantityUnit = (isLong)
                        ? (0, index_1.preciseDiv)(baseTradeQuantityNotional, totalSupply)
                        : (0, index_1.preciseDiv)(baseTradeQuantityNotional, totalSupply).mul(-1);
                    estimatedQuoteQuantityNotional = (0, index_1.preciseMul)(baseTradeQuantityNotional, spotPrice).abs();
                    allowedSlippage = (0, index_1.preciseMul)(estimatedQuoteQuantityNotional, (0, index_1.ether)(.02));
                    slippageAdjustedQuoteQuanitityNotional = (isLong)
                        ? estimatedQuoteQuantityNotional.add(allowedSlippage)
                        : estimatedQuoteQuantityNotional.sub(allowedSlippage);
                    receiveQuoteQuantityUnit = (0, index_1.preciseDiv)(slippageAdjustedQuoteQuanitityNotional, totalSupply);
                    return [4 /*yield*/, module.connect(owner.wallet).trade(setToken.address, baseToken, baseTradeQuantityUnit, receiveQuoteQuantityUnit)];
                case 4:
                    _a.sent();
                    return [2 /*return*/, baseTradeQuantityUnit];
            }
        });
    });
}
exports.leverUp = leverUp;
// Returns notional amount of USDC to transfer in on issue. Handles multiple positions, long and short.
function calculateUSDCTransferIn(setToken, setQuantity, module, fixture) {
    return __awaiter(this, void 0, void 0, function () {
        var accountInfo, totalCollateralValue, totalSupply, usdcAmountIn, allPositionInfo, _i, allPositionInfo_1, positionInfo, baseTradeQuantityNotional, isLong, deltaQuote, idealQuote, _a, _b, expectedSlippage;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, module.getAccountInfo(setToken.address)];
                case 1:
                    accountInfo = _c.sent();
                    totalCollateralValue = accountInfo.collateralBalance
                        .add(accountInfo.owedRealizedPnl)
                        .add(accountInfo.pendingFundingPayments)
                        .add(accountInfo.netQuoteBalance);
                    return [4 /*yield*/, setToken.totalSupply()];
                case 2:
                    totalSupply = _c.sent();
                    usdcAmountIn = (0, index_1.preciseMul)((0, index_1.preciseDiv)(totalCollateralValue, totalSupply), setQuantity);
                    return [4 /*yield*/, module.getPositionUnitInfo(setToken.address)];
                case 3:
                    allPositionInfo = _c.sent();
                    _i = 0, allPositionInfo_1 = allPositionInfo;
                    _c.label = 4;
                case 4:
                    if (!(_i < allPositionInfo_1.length)) return [3 /*break*/, 8];
                    positionInfo = allPositionInfo_1[_i];
                    baseTradeQuantityNotional = (0, index_1.preciseMul)(positionInfo.baseUnit, setQuantity);
                    isLong = (baseTradeQuantityNotional.gte(constants_1.ZERO));
                    return [4 /*yield*/, fixture.getSwapQuote(positionInfo.baseToken, baseTradeQuantityNotional.abs(), isLong)];
                case 5:
                    deltaQuote = (_c.sent()).deltaQuote;
                    _a = index_1.preciseMul;
                    _b = [baseTradeQuantityNotional];
                    return [4 /*yield*/, fixture.getSpotPrice(positionInfo.baseToken)];
                case 6:
                    idealQuote = _a.apply(void 0, _b.concat([_c.sent()]));
                    expectedSlippage = isLong
                        ? deltaQuote.sub(idealQuote)
                        : idealQuote.abs().sub(deltaQuote);
                    usdcAmountIn = usdcAmountIn.add(idealQuote).add(expectedSlippage);
                    _c.label = 7;
                case 7:
                    _i++;
                    return [3 /*break*/, 4];
                case 8: return [2 /*return*/, toUSDCDecimals(usdcAmountIn)];
            }
        });
    });
}
exports.calculateUSDCTransferIn = calculateUSDCTransferIn;
// Returns notional amount of USDC to transfer on redeem. Handles multiple positions, long and short
function calculateUSDCTransferOut(setToken, setQuantity, module, fixture) {
    return __awaiter(this, void 0, void 0, function () {
        var totalRealizedPnl, allPositionInfo, collateralBalance, collateralPositionUnit, _a, _b, collateralQuantityNotional, _i, allPositionInfo_2, positionInfo, basePositionUnit, _c, _d, baseTradeQuantityNotional, isLong, closeRatio, reducedOpenNotional, deltaQuote, realizedPnl;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    totalRealizedPnl = ethers_1.BigNumber.from(0);
                    return [4 /*yield*/, module.getPositionNotionalInfo(setToken.address)];
                case 1:
                    allPositionInfo = _e.sent();
                    return [4 /*yield*/, module.getAccountInfo(setToken.address)];
                case 2:
                    collateralBalance = (_e.sent()).collateralBalance;
                    _a = index_1.preciseDiv;
                    _b = [collateralBalance];
                    return [4 /*yield*/, setToken.totalSupply()];
                case 3:
                    collateralPositionUnit = _a.apply(void 0, _b.concat([_e.sent()]));
                    collateralQuantityNotional = (0, index_1.preciseMul)(collateralPositionUnit, setQuantity);
                    _i = 0, allPositionInfo_2 = allPositionInfo;
                    _e.label = 4;
                case 4:
                    if (!(_i < allPositionInfo_2.length)) return [3 /*break*/, 8];
                    positionInfo = allPositionInfo_2[_i];
                    _c = index_1.preciseDiv;
                    _d = [positionInfo.baseBalance];
                    return [4 /*yield*/, setToken.totalSupply()];
                case 5:
                    basePositionUnit = _c.apply(void 0, _d.concat([_e.sent()]));
                    baseTradeQuantityNotional = (0, index_1.preciseMul)(basePositionUnit, setQuantity);
                    isLong = (basePositionUnit.gte(constants_1.ZERO));
                    closeRatio = (0, index_1.preciseDiv)(baseTradeQuantityNotional.abs(), positionInfo.baseBalance.abs());
                    reducedOpenNotional = (0, index_1.preciseMul)(positionInfo.quoteBalance, closeRatio);
                    return [4 /*yield*/, fixture.getSwapQuote(positionInfo.baseToken, baseTradeQuantityNotional.abs(), !isLong)];
                case 6:
                    deltaQuote = (_e.sent()).deltaQuote;
                    realizedPnl = (isLong)
                        ? reducedOpenNotional.add(deltaQuote)
                        : reducedOpenNotional.sub(deltaQuote);
                    totalRealizedPnl = totalRealizedPnl.add(realizedPnl);
                    _e.label = 7;
                case 7:
                    _i++;
                    return [3 /*break*/, 4];
                case 8: return [2 /*return*/, toUSDCDecimals(collateralQuantityNotional.add(totalRealizedPnl).abs())];
            }
        });
    });
}
exports.calculateUSDCTransferOut = calculateUSDCTransferOut;
function calculateExternalPositionUnit(setToken, module, fixture) {
    return __awaiter(this, void 0, void 0, function () {
        var totalPositionValue, allPositionInfo, _i, allPositionInfo_3, positionInfo, spotPrice, _a, collateralBalance, pendingFundingPayments, owedRealizedPnl, netQuoteBalance, numerator, _b, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    totalPositionValue = ethers_1.BigNumber.from(0);
                    return [4 /*yield*/, module.getPositionNotionalInfo(setToken.address)];
                case 1:
                    allPositionInfo = _e.sent();
                    _i = 0, allPositionInfo_3 = allPositionInfo;
                    _e.label = 2;
                case 2:
                    if (!(_i < allPositionInfo_3.length)) return [3 /*break*/, 5];
                    positionInfo = allPositionInfo_3[_i];
                    return [4 /*yield*/, fixture.getSpotPrice(positionInfo.baseToken)];
                case 3:
                    spotPrice = _e.sent();
                    totalPositionValue = totalPositionValue.add((0, index_1.preciseMul)(positionInfo.baseBalance, spotPrice));
                    _e.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 2];
                case 5: return [4 /*yield*/, module.getAccountInfo(setToken.address)];
                case 6:
                    _a = _e.sent(), collateralBalance = _a.collateralBalance, pendingFundingPayments = _a.pendingFundingPayments, owedRealizedPnl = _a.owedRealizedPnl, netQuoteBalance = _a.netQuoteBalance;
                    numerator = totalPositionValue
                        .add(collateralBalance)
                        .add(netQuoteBalance)
                        .add(pendingFundingPayments)
                        .add(owedRealizedPnl);
                    _b = toUSDCDecimals;
                    _c = index_1.preciseDiv;
                    _d = [numerator];
                    return [4 /*yield*/, setToken.totalSupply()];
                case 7: return [2 /*return*/, _b.apply(void 0, [_c.apply(void 0, _d.concat([_e.sent()]))])];
            }
        });
    });
}
exports.calculateExternalPositionUnit = calculateExternalPositionUnit;
