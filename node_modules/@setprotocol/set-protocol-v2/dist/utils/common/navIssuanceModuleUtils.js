"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExpectedRedeemPositionUnit = exports.getExpectedRedeemPositionMultiplier = exports.getExpectedReserveRedeemQuantity = exports.getExpectedPostFeeQuantity = exports.getExpectedIssuePositionUnit = exports.getExpectedSetTokenIssueQuantity = exports.getExpectedIssuePositionMultiplier = void 0;
var mathUtils_1 = require("./mathUtils");
var constants_1 = require("../constants");
var getExpectedIssuePositionMultiplier = function (previousPositionMultiplier, previousSupply, currentSupply) {
    // Inflation = (currentSupply - previousSupply) / currentSupply
    var inflation = (0, mathUtils_1.preciseDivCeil)(currentSupply.sub(previousSupply), currentSupply);
    // previousPositionMultiplier * (1 - inflation %)
    return (0, mathUtils_1.preciseMul)(previousPositionMultiplier, constants_1.PRECISE_UNIT.sub(inflation));
};
exports.getExpectedIssuePositionMultiplier = getExpectedIssuePositionMultiplier;
var getExpectedSetTokenIssueQuantity = function (setToken, setValuer, reserveAsset, reserveAssetBaseUnits, reserveAssetQuantity, managerFeePercentage, protocolDirectFeePercentage, premiumPercentage) { return __awaiter(void 0, void 0, void 0, function () {
    var setTokenValuation, setTokenSupply, reserveQuantitySubFees, reserveQuantitySubFeesAndPremium, normalizedReserveQuantitySubFees, normalizedReserveQuantitySubFeesAndPremium, denominator;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, setValuer.calculateSetTokenValuation(setToken.address, reserveAsset)];
            case 1:
                setTokenValuation = _a.sent();
                return [4 /*yield*/, setToken.totalSupply()];
            case 2:
                setTokenSupply = _a.sent();
                reserveQuantitySubFees = (0, exports.getExpectedPostFeeQuantity)(reserveAssetQuantity, managerFeePercentage, protocolDirectFeePercentage);
                reserveQuantitySubFeesAndPremium = reserveQuantitySubFees.sub((0, mathUtils_1.preciseMul)(reserveQuantitySubFees, premiumPercentage));
                normalizedReserveQuantitySubFees = (0, mathUtils_1.preciseDiv)(reserveQuantitySubFees, reserveAssetBaseUnits);
                normalizedReserveQuantitySubFeesAndPremium = (0, mathUtils_1.preciseDiv)(reserveQuantitySubFeesAndPremium, reserveAssetBaseUnits);
                denominator = (0, mathUtils_1.preciseMul)(setTokenSupply, setTokenValuation)
                    .add(normalizedReserveQuantitySubFees)
                    .sub(normalizedReserveQuantitySubFeesAndPremium);
                return [2 /*return*/, (0, mathUtils_1.preciseDiv)((0, mathUtils_1.preciseMul)(normalizedReserveQuantitySubFeesAndPremium, setTokenSupply), denominator)];
        }
    });
}); };
exports.getExpectedSetTokenIssueQuantity = getExpectedSetTokenIssueQuantity;
var getExpectedIssuePositionUnit = function (previousUnits, issueQuantity, previousSupply, currentSupply, newPositionMultiplier, managerFeePercentage, protocolDirectFeePercentage) {
    // Account for fees
    var issueQuantitySubFees = (0, exports.getExpectedPostFeeQuantity)(issueQuantity, managerFeePercentage, protocolDirectFeePercentage);
    // (Previous supply * previous units + issueQuantitySubFees) / current supply
    var numerator = (0, mathUtils_1.preciseMul)(previousSupply, previousUnits).add(issueQuantitySubFees);
    var newPositionUnit = (0, mathUtils_1.preciseDiv)(numerator, currentSupply);
    // Adjust for rounding on the contracts when converting between real and virtual units
    var roundDownPositionUnit = (0, mathUtils_1.preciseMul)(newPositionUnit, newPositionMultiplier);
    return (0, mathUtils_1.preciseDiv)(roundDownPositionUnit, newPositionMultiplier);
};
exports.getExpectedIssuePositionUnit = getExpectedIssuePositionUnit;
var getExpectedPostFeeQuantity = function (quantity, managerFeePercentage, protocolDirectFeePercentage) {
    var managerFees = (0, mathUtils_1.preciseMul)(quantity, managerFeePercentage);
    var protocolDirectFees = (0, mathUtils_1.preciseMul)(quantity, protocolDirectFeePercentage);
    return quantity.sub(managerFees).sub(protocolDirectFees);
};
exports.getExpectedPostFeeQuantity = getExpectedPostFeeQuantity;
var getExpectedReserveRedeemQuantity = function (setTokenQuantityToRedeem, setTokenValuation, reserveAssetBaseUnits, managerFeePercentage, protocolDirectFeePercentage, premiumPercentage) {
    var totalNotionalReserveQuantity = (0, mathUtils_1.preciseMul)(setTokenValuation, setTokenQuantityToRedeem);
    var totalPremium = (0, mathUtils_1.preciseMulCeil)(totalNotionalReserveQuantity, premiumPercentage);
    var totalNotionalReserveQuantitySubFees = (0, exports.getExpectedPostFeeQuantity)(totalNotionalReserveQuantity.sub(totalPremium), managerFeePercentage, protocolDirectFeePercentage);
    return (0, mathUtils_1.preciseMul)(totalNotionalReserveQuantitySubFees, reserveAssetBaseUnits);
};
exports.getExpectedReserveRedeemQuantity = getExpectedReserveRedeemQuantity;
var getExpectedRedeemPositionMultiplier = function (previousPositionMultiplier, previousSupply, currentSupply) {
    // Inflation = (previousSupply - currentSupply) / currentSupply
    var deflation = (0, mathUtils_1.preciseDiv)(previousSupply.sub(currentSupply), currentSupply);
    // previousPositionMultiplier * (1 + deflation %)
    return (0, mathUtils_1.preciseMul)(previousPositionMultiplier, constants_1.PRECISE_UNIT.add(deflation));
};
exports.getExpectedRedeemPositionMultiplier = getExpectedRedeemPositionMultiplier;
var getExpectedRedeemPositionUnit = function (previousUnits, setTokenQuantityToRedeem, setTokenValuation, reserveAssetBaseUnits, previousSupply, currentSupply, newPositionMultiplier, managerFeePercentage, protocolDirectFeePercentage, premiumPercentage) {
    var totalNotionalReserveQuantity = (0, mathUtils_1.preciseMul)(setTokenValuation, setTokenQuantityToRedeem);
    var totalPremium = (0, mathUtils_1.preciseMulCeil)(totalNotionalReserveQuantity, premiumPercentage);
    var totalReserveBalance = (0, mathUtils_1.preciseMul)(totalNotionalReserveQuantity.sub(totalPremium), reserveAssetBaseUnits);
    // (Previous supply * previous units - reserveQuantityToRedeem) / current supply
    var numerator = (0, mathUtils_1.preciseMul)(previousSupply, previousUnits).sub(totalReserveBalance);
    var newPositionUnit = (0, mathUtils_1.preciseDiv)(numerator, currentSupply);
    // Adjust for rounding on the contracts when converting between real and virtual units
    var roundDownPositionUnit = (0, mathUtils_1.preciseMul)(newPositionUnit, newPositionMultiplier);
    return (0, mathUtils_1.preciseDiv)(roundDownPositionUnit, newPositionMultiplier);
};
exports.getExpectedRedeemPositionUnit = getExpectedRedeemPositionUnit;
