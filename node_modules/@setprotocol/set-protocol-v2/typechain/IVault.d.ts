/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IVaultInterface extends ethers.utils.Interface {
  functions: {
    "decimals()": FunctionFragment;
    "getAccountBalance()": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getClearingHouse()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getFreeCollateral(address)": FunctionFragment;
    "getFreeCollateralByRatio(address,uint24)": FunctionFragment;
    "getLiquidateMarginRequirement(address)": FunctionFragment;
    "getSettlementToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getClearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateralByRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidateMarginRequirement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateralByRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateMarginRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultInterface;

  functions: {
    decimals(overrides?: CallOverrides): Promise<[number]>;

    getAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    getBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClearingHouse(overrides?: CallOverrides): Promise<[string]>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getFreeCollateral(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFreeCollateralByRatio(
      trader: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiquidateMarginRequirement(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSettlementToken(overrides?: CallOverrides): Promise<[string]>;
  };

  decimals(overrides?: CallOverrides): Promise<number>;

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getClearingHouse(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getFreeCollateral(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFreeCollateralByRatio(
    trader: string,
    ratio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidateMarginRequirement(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSettlementToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    decimals(overrides?: CallOverrides): Promise<number>;

    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClearingHouse(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getFreeCollateral(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByRatio(
      trader: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidateMarginRequirement(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getFreeCollateral(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByRatio(
      trader: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidateMarginRequirement(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFreeCollateral(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateralByRatio(
      trader: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidateMarginRequirement(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
