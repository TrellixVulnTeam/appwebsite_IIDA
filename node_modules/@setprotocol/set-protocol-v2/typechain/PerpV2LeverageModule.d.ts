/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PerpV2LeverageModuleInterface extends ethers.utils.Interface {
  functions: {
    "allowedSetTokens(address)": FunctionFragment;
    "anySetAllowed()": FunctionFragment;
    "collateralDecimals()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "componentIssueHook(address,uint256,address,bool)": FunctionFragment;
    "componentRedeemHook(address,uint256,address,bool)": FunctionFragment;
    "controller()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getAMMSpotPrice(address)": FunctionFragment;
    "getAccountInfo(address)": FunctionFragment;
    "getIssuanceAdjustments(address,uint256)": FunctionFragment;
    "getPositionNotionalInfo(address)": FunctionFragment;
    "getPositionUnitInfo(address)": FunctionFragment;
    "getRedemptionAdjustments(address,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "moduleIssueHook(address,uint256)": FunctionFragment;
    "moduleRedeemHook(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "perpAccountBalance()": FunctionFragment;
    "perpClearingHouse()": FunctionFragment;
    "perpExchange()": FunctionFragment;
    "perpMarketRegistry()": FunctionFragment;
    "perpQuoter()": FunctionFragment;
    "perpVault()": FunctionFragment;
    "positions(address,uint256)": FunctionFragment;
    "registerToModule(address,address)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "trade(address,address,int256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllowedSetToken(address,bool)": FunctionFragment;
    "updateAnySetAllowed(bool)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowedSetTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "anySetAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "componentIssueHook",
    values: [string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "componentRedeemHook",
    values: [string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAMMSpotPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuanceAdjustments",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionNotionalInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionUnitInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionAdjustments",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "moduleIssueHook",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleRedeemHook",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "perpAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perpClearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perpExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perpMarketRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perpQuoter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "perpVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedSetToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnySetAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedSetTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySetAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "componentIssueHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "componentRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAMMSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuanceAdjustments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionNotionalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionUnitInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionAdjustments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleIssueHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "perpAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perpClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perpExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perpMarketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "perpQuoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perpVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerToModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedSetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnySetAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AnySetAllowedUpdated(bool)": EventFragment;
    "CollateralDeposited(address,address,uint256)": EventFragment;
    "CollateralWithdrawn(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PerpTrade(address,address,uint256,uint256,uint256,bool)": EventFragment;
    "SetTokenStatusUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnySetAllowedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerpTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenStatusUpdated"): EventFragment;
}

export class PerpV2LeverageModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PerpV2LeverageModuleInterface;

  functions: {
    allowedSetTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    anySetAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    collateralDecimals(overrides?: CallOverrides): Promise<[number]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    componentIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      _isEquity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    componentRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      _isEquity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _setToken: string,
      _collateralQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAMMSpotPrice(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getAccountInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          collateralBalance: BigNumber;
          owedRealizedPnl: BigNumber;
          pendingFundingPayments: BigNumber;
          netQuoteBalance: BigNumber;
        }
      ] & {
        accountInfo: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          collateralBalance: BigNumber;
          owedRealizedPnl: BigNumber;
          pendingFundingPayments: BigNumber;
          netQuoteBalance: BigNumber;
        };
      }
    >;

    getIssuanceAdjustments(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPositionNotionalInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          baseToken: string;
          baseBalance: BigNumber;
          quoteBalance: BigNumber;
        })[]
      ]
    >;

    getPositionUnitInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          baseToken: string;
          baseUnit: BigNumber;
          quoteUnit: BigNumber;
        })[]
      ]
    >;

    getRedemptionAdjustments(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moduleIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moduleRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    perpAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    perpClearingHouse(overrides?: CallOverrides): Promise<[string]>;

    perpExchange(overrides?: CallOverrides): Promise<[string]>;

    perpMarketRegistry(overrides?: CallOverrides): Promise<[string]>;

    perpQuoter(overrides?: CallOverrides): Promise<[string]>;

    perpVault(overrides?: CallOverrides): Promise<[string]>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerToModule(
      _setToken: string,
      _debtIssuanceModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trade(
      _setToken: string,
      _baseToken: string,
      _baseQuantityUnits: BigNumberish,
      _receiveQuoteQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAllowedSetToken(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAnySetAllowed(
      _anySetAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _setToken: string,
      _collateralQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowedSetTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  anySetAllowed(overrides?: CallOverrides): Promise<boolean>;

  collateralDecimals(overrides?: CallOverrides): Promise<number>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  componentIssueHook(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    _component: string,
    _isEquity: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  componentRedeemHook(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    _component: string,
    _isEquity: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  deposit(
    _setToken: string,
    _collateralQuantityUnits: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAMMSpotPrice(
    _baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountInfo(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      collateralBalance: BigNumber;
      owedRealizedPnl: BigNumber;
      pendingFundingPayments: BigNumber;
      netQuoteBalance: BigNumber;
    }
  >;

  getIssuanceAdjustments(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPositionNotionalInfo(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      baseToken: string;
      baseBalance: BigNumber;
      quoteBalance: BigNumber;
    })[]
  >;

  getPositionUnitInfo(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      baseToken: string;
      baseUnit: BigNumber;
      quoteUnit: BigNumber;
    })[]
  >;

  getRedemptionAdjustments(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moduleIssueHook(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moduleRedeemHook(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  perpAccountBalance(overrides?: CallOverrides): Promise<string>;

  perpClearingHouse(overrides?: CallOverrides): Promise<string>;

  perpExchange(overrides?: CallOverrides): Promise<string>;

  perpMarketRegistry(overrides?: CallOverrides): Promise<string>;

  perpQuoter(overrides?: CallOverrides): Promise<string>;

  perpVault(overrides?: CallOverrides): Promise<string>;

  positions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  registerToModule(
    _setToken: string,
    _debtIssuanceModule: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trade(
    _setToken: string,
    _baseToken: string,
    _baseQuantityUnits: BigNumberish,
    _receiveQuoteQuantityUnits: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAllowedSetToken(
    _setToken: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAnySetAllowed(
    _anySetAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _setToken: string,
    _collateralQuantityUnits: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowedSetTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    anySetAllowed(overrides?: CallOverrides): Promise<boolean>;

    collateralDecimals(overrides?: CallOverrides): Promise<number>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    componentIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      _isEquity: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    componentRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      _isEquity: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    deposit(
      _setToken: string,
      _collateralQuantityUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAMMSpotPrice(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        collateralBalance: BigNumber;
        owedRealizedPnl: BigNumber;
        pendingFundingPayments: BigNumber;
        netQuoteBalance: BigNumber;
      }
    >;

    getIssuanceAdjustments(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getPositionNotionalInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        baseToken: string;
        baseBalance: BigNumber;
        quoteBalance: BigNumber;
      })[]
    >;

    getPositionUnitInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        baseToken: string;
        baseUnit: BigNumber;
        quoteUnit: BigNumber;
      })[]
    >;

    getRedemptionAdjustments(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]] & { _: BigNumber[] }>;

    initialize(_setToken: string, overrides?: CallOverrides): Promise<void>;

    moduleIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    moduleRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    perpAccountBalance(overrides?: CallOverrides): Promise<string>;

    perpClearingHouse(overrides?: CallOverrides): Promise<string>;

    perpExchange(overrides?: CallOverrides): Promise<string>;

    perpMarketRegistry(overrides?: CallOverrides): Promise<string>;

    perpQuoter(overrides?: CallOverrides): Promise<string>;

    perpVault(overrides?: CallOverrides): Promise<string>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    registerToModule(
      _setToken: string,
      _debtIssuanceModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    trade(
      _setToken: string,
      _baseToken: string,
      _baseQuantityUnits: BigNumberish,
      _receiveQuoteQuantityUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowedSetToken(
      _setToken: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAnySetAllowed(
      _anySetAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _setToken: string,
      _collateralQuantityUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AnySetAllowedUpdated(
      _anySetAllowed?: boolean | null
    ): TypedEventFilter<[boolean], { _anySetAllowed: boolean }>;

    CollateralDeposited(
      _setToken?: string | null,
      _collateralToken?: null,
      _amountDeposited?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {
        _setToken: string;
        _collateralToken: string;
        _amountDeposited: BigNumber;
      }
    >;

    CollateralWithdrawn(
      _setToken?: string | null,
      _collateralToken?: null,
      _amountWithdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {
        _setToken: string;
        _collateralToken: string;
        _amountWithdrawn: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PerpTrade(
      _setToken?: string | null,
      _baseToken?: string | null,
      _deltaBase?: null,
      _deltaQuote?: null,
      _protocolFee?: null,
      _isBuy?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, boolean],
      {
        _setToken: string;
        _baseToken: string;
        _deltaBase: BigNumber;
        _deltaQuote: BigNumber;
        _protocolFee: BigNumber;
        _isBuy: boolean;
      }
    >;

    SetTokenStatusUpdated(
      _setToken?: string | null,
      _added?: boolean | null
    ): TypedEventFilter<
      [string, boolean],
      { _setToken: string; _added: boolean }
    >;
  };

  estimateGas: {
    allowedSetTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anySetAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    collateralDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    componentIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      _isEquity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    componentRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      _isEquity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _setToken: string,
      _collateralQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAMMSpotPrice(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuanceAdjustments(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPositionNotionalInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionUnitInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAdjustments(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moduleIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moduleRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    perpAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    perpClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    perpExchange(overrides?: CallOverrides): Promise<BigNumber>;

    perpMarketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    perpQuoter(overrides?: CallOverrides): Promise<BigNumber>;

    perpVault(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerToModule(
      _setToken: string,
      _debtIssuanceModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trade(
      _setToken: string,
      _baseToken: string,
      _baseQuantityUnits: BigNumberish,
      _receiveQuoteQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAllowedSetToken(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAnySetAllowed(
      _anySetAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _setToken: string,
      _collateralQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedSetTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anySetAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    componentIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      _isEquity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    componentRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      _isEquity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _setToken: string,
      _collateralQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAMMSpotPrice(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuanceAdjustments(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPositionNotionalInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionUnitInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionAdjustments(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moduleIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moduleRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpAccountBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    perpClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpMarketRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    perpQuoter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerToModule(
      _setToken: string,
      _debtIssuanceModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trade(
      _setToken: string,
      _baseToken: string,
      _baseQuantityUnits: BigNumberish,
      _receiveQuoteQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAllowedSetToken(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAnySetAllowed(
      _anySetAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _setToken: string,
      _collateralQuantityUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
