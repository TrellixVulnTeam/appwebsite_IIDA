/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AirdropModuleInterface extends ethers.utils.Interface {
  functions: {
    "AIRDROP_MODULE_PROTOCOL_FEE_INDEX()": FunctionFragment;
    "absorb(address,address)": FunctionFragment;
    "addAirdrop(address,address)": FunctionFragment;
    "airdropSettings(address)": FunctionFragment;
    "batchAbsorb(address,address[])": FunctionFragment;
    "controller()": FunctionFragment;
    "getAirdrops(address)": FunctionFragment;
    "initialize(address,tuple)": FunctionFragment;
    "isAirdrop(address,address)": FunctionFragment;
    "isAirdropToken(address,address)": FunctionFragment;
    "removeAirdrop(address,address)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "updateAirdropFee(address,uint256)": FunctionFragment;
    "updateAnyoneAbsorb(address,bool)": FunctionFragment;
    "updateFeeRecipient(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AIRDROP_MODULE_PROTOCOL_FEE_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "absorb",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAirdrop",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropSettings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAbsorb",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAirdrops", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      {
        airdrops: string[];
        feeRecipient: string;
        airdropFee: BigNumberish;
        anyoneAbsorb: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAirdrop",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAirdropToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAirdrop",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAirdropFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnyoneAbsorb",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "AIRDROP_MODULE_PROTOCOL_FEE_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "absorb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAirdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "airdropSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAbsorb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAirdrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAirdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAirdropToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAirdropFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnyoneAbsorb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;

  events: {
    "AirdropComponentAdded(address,address)": EventFragment;
    "AirdropComponentRemoved(address,address)": EventFragment;
    "AirdropFeeUpdated(address,uint256)": EventFragment;
    "AnyoneAbsorbUpdated(address,bool)": EventFragment;
    "ComponentAbsorbed(address,address,uint256,uint256,uint256)": EventFragment;
    "FeeRecipientUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropComponentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AirdropComponentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AirdropFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnyoneAbsorbUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComponentAbsorbed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientUpdated"): EventFragment;
}

export class AirdropModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AirdropModuleInterface;

  functions: {
    AIRDROP_MODULE_PROTOCOL_FEE_INDEX(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    absorb(
      _setToken: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAirdrop(
      _setToken: string,
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        feeRecipient: string;
        airdropFee: BigNumber;
        anyoneAbsorb: boolean;
      }
    >;

    batchAbsorb(
      _setToken: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    getAirdrops(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialize(
      _setToken: string,
      _airdropSettings: {
        airdrops: string[];
        feeRecipient: string;
        airdropFee: BigNumberish;
        anyoneAbsorb: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAirdrop(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAirdropToken(
      _setToken: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeAirdrop(
      _setToken: string,
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAirdropFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAnyoneAbsorb(
      _setToken: string,
      _anyoneAbsorb: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AIRDROP_MODULE_PROTOCOL_FEE_INDEX(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  absorb(
    _setToken: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAirdrop(
    _setToken: string,
    _airdrop: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropSettings(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      feeRecipient: string;
      airdropFee: BigNumber;
      anyoneAbsorb: boolean;
    }
  >;

  batchAbsorb(
    _setToken: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  getAirdrops(_setToken: string, overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _setToken: string,
    _airdropSettings: {
      airdrops: string[];
      feeRecipient: string;
      airdropFee: BigNumberish;
      anyoneAbsorb: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAirdrop(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAirdropToken(
    _setToken: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeAirdrop(
    _setToken: string,
    _airdrop: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAirdropFee(
    _setToken: string,
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAnyoneAbsorb(
    _setToken: string,
    _anyoneAbsorb: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeRecipient(
    _setToken: string,
    _newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AIRDROP_MODULE_PROTOCOL_FEE_INDEX(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    absorb(
      _setToken: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addAirdrop(
      _setToken: string,
      _airdrop: string,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        feeRecipient: string;
        airdropFee: BigNumber;
        anyoneAbsorb: boolean;
      }
    >;

    batchAbsorb(
      _setToken: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    getAirdrops(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(
      _setToken: string,
      _airdropSettings: {
        airdrops: string[];
        feeRecipient: string;
        airdropFee: BigNumberish;
        anyoneAbsorb: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    isAirdrop(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAirdropToken(
      _setToken: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAirdrop(
      _setToken: string,
      _airdrop: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    updateAirdropFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAnyoneAbsorb(
      _setToken: string,
      _anyoneAbsorb: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AirdropComponentAdded(
      _setToken?: string | null,
      _component?: string | null
    ): TypedEventFilter<
      [string, string],
      { _setToken: string; _component: string }
    >;

    AirdropComponentRemoved(
      _setToken?: string | null,
      _component?: string | null
    ): TypedEventFilter<
      [string, string],
      { _setToken: string; _component: string }
    >;

    AirdropFeeUpdated(
      _setToken?: string | null,
      _newFee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _setToken: string; _newFee: BigNumber }
    >;

    AnyoneAbsorbUpdated(
      _setToken?: string | null,
      _anyoneAbsorb?: null
    ): TypedEventFilter<
      [string, boolean],
      { _setToken: string; _anyoneAbsorb: boolean }
    >;

    ComponentAbsorbed(
      _setToken?: string | null,
      _absorbedToken?: string | null,
      _absorbedQuantity?: null,
      _managerFee?: null,
      _protocolFee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        _setToken: string;
        _absorbedToken: string;
        _absorbedQuantity: BigNumber;
        _managerFee: BigNumber;
        _protocolFee: BigNumber;
      }
    >;

    FeeRecipientUpdated(
      _setToken?: string | null,
      _newFeeRecipient?: null
    ): TypedEventFilter<
      [string, string],
      { _setToken: string; _newFeeRecipient: string }
    >;
  };

  estimateGas: {
    AIRDROP_MODULE_PROTOCOL_FEE_INDEX(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    absorb(
      _setToken: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAirdrop(
      _setToken: string,
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchAbsorb(
      _setToken: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    getAirdrops(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _airdropSettings: {
        airdrops: string[];
        feeRecipient: string;
        airdropFee: BigNumberish;
        anyoneAbsorb: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAirdrop(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAirdropToken(
      _setToken: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAirdrop(
      _setToken: string,
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAirdropFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAnyoneAbsorb(
      _setToken: string,
      _anyoneAbsorb: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AIRDROP_MODULE_PROTOCOL_FEE_INDEX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    absorb(
      _setToken: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAirdrop(
      _setToken: string,
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchAbsorb(
      _setToken: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAirdrops(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      _airdropSettings: {
        airdrops: string[];
        feeRecipient: string;
        airdropFee: BigNumberish;
        anyoneAbsorb: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAirdrop(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAirdropToken(
      _setToken: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAirdrop(
      _setToken: string,
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAirdropFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAnyoneAbsorb(
      _setToken: string,
      _anyoneAbsorb: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
