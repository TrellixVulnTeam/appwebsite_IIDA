/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GovernanceModuleInterface extends ethers.utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "delegate(address,string,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "propose(address,string,bytes)": FunctionFragment;
    "register(address,string)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "revoke(address,string)": FunctionFragment;
    "vote(address,string,uint256,bool,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, string, BigNumberish, boolean, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "ProposalCreated(address,address,bytes)": EventFragment;
    "ProposalVoted(address,address,uint256,bool)": EventFragment;
    "RegistrationRevoked(address,address)": EventFragment;
    "RegistrationSubmitted(address,address)": EventFragment;
    "VoteDelegated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteDelegated"): EventFragment;
}

export class GovernanceModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernanceModuleInterface;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    delegate(
      _setToken: string,
      _governanceName: string,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    propose(
      _setToken: string,
      _governanceName: string,
      _proposalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    register(
      _setToken: string,
      _governanceName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _setToken: string,
      _governanceName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      _setToken: string,
      _governanceName: string,
      _proposalId: BigNumberish,
      _support: boolean,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  delegate(
    _setToken: string,
    _governanceName: string,
    _delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  propose(
    _setToken: string,
    _governanceName: string,
    _proposalData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  register(
    _setToken: string,
    _governanceName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _setToken: string,
    _governanceName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    _setToken: string,
    _governanceName: string,
    _proposalId: BigNumberish,
    _support: boolean,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    delegate(
      _setToken: string,
      _governanceName: string,
      _delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_setToken: string, overrides?: CallOverrides): Promise<void>;

    propose(
      _setToken: string,
      _governanceName: string,
      _proposalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    register(
      _setToken: string,
      _governanceName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    revoke(
      _setToken: string,
      _governanceName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      _setToken: string,
      _governanceName: string,
      _proposalId: BigNumberish,
      _support: boolean,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ProposalCreated(
      _setToken?: string | null,
      _governanceAdapter?: string | null,
      _proposalData?: null
    ): TypedEventFilter<
      [string, string, string],
      { _setToken: string; _governanceAdapter: string; _proposalData: string }
    >;

    ProposalVoted(
      _setToken?: string | null,
      _governanceAdapter?: string | null,
      _proposalId?: BigNumberish | null,
      _support?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      {
        _setToken: string;
        _governanceAdapter: string;
        _proposalId: BigNumber;
        _support: boolean;
      }
    >;

    RegistrationRevoked(
      _setToken?: string | null,
      _governanceAdapter?: string | null
    ): TypedEventFilter<
      [string, string],
      { _setToken: string; _governanceAdapter: string }
    >;

    RegistrationSubmitted(
      _setToken?: string | null,
      _governanceAdapter?: string | null
    ): TypedEventFilter<
      [string, string],
      { _setToken: string; _governanceAdapter: string }
    >;

    VoteDelegated(
      _setToken?: string | null,
      _governanceAdapter?: string | null,
      _delegatee?: null
    ): TypedEventFilter<
      [string, string, string],
      { _setToken: string; _governanceAdapter: string; _delegatee: string }
    >;
  };

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      _setToken: string,
      _governanceName: string,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    propose(
      _setToken: string,
      _governanceName: string,
      _proposalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    register(
      _setToken: string,
      _governanceName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      _setToken: string,
      _governanceName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      _setToken: string,
      _governanceName: string,
      _proposalId: BigNumberish,
      _support: boolean,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      _setToken: string,
      _governanceName: string,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    propose(
      _setToken: string,
      _governanceName: string,
      _proposalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    register(
      _setToken: string,
      _governanceName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _setToken: string,
      _governanceName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _setToken: string,
      _governanceName: string,
      _proposalId: BigNumberish,
      _support: boolean,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
