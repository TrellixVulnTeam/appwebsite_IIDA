/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "adapters(uint256)": FunctionFragment;
    "addAdapter(address)": FunctionFragment;
    "addPair(address,address,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "editMasterQuoteAsset(address)": FunctionFragment;
    "editPair(address,address,address)": FunctionFragment;
    "getAdapters()": FunctionFragment;
    "getPrice(address,address)": FunctionFragment;
    "masterQuoteAsset()": FunctionFragment;
    "oracles(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAdapter(address)": FunctionFragment;
    "removePair(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adapters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addAdapter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addPair",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editMasterQuoteAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "editPair",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterQuoteAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdapter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "adapters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editMasterQuoteAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterQuoteAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removePair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AdapterAdded(address)": EventFragment;
    "AdapterRemoved(address)": EventFragment;
    "MasterQuoteAssetEdited(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PairAdded(address,address,address)": EventFragment;
    "PairEdited(address,address,address)": EventFragment;
    "PairRemoved(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdapterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdapterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterQuoteAssetEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairRemoved"): EventFragment;
}

export class PriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PriceOracleInterface;

  functions: {
    adapters(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    addAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPair(
      _assetOne: string,
      _assetTwo: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    editMasterQuoteAsset(
      _newMasterQuoteAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editPair(
      _assetOne: string,
      _assetTwo: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdapters(overrides?: CallOverrides): Promise<[string[]]>;

    getPrice(
      _assetOne: string,
      _assetTwo: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    masterQuoteAsset(overrides?: CallOverrides): Promise<[string]>;

    oracles(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePair(
      _assetOne: string,
      _assetTwo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  adapters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  addAdapter(
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPair(
    _assetOne: string,
    _assetTwo: string,
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  editMasterQuoteAsset(
    _newMasterQuoteAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editPair(
    _assetOne: string,
    _assetTwo: string,
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdapters(overrides?: CallOverrides): Promise<string[]>;

  getPrice(
    _assetOne: string,
    _assetTwo: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  masterQuoteAsset(overrides?: CallOverrides): Promise<string>;

  oracles(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAdapter(
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePair(
    _assetOne: string,
    _assetTwo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adapters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    addAdapter(_adapter: string, overrides?: CallOverrides): Promise<void>;

    addPair(
      _assetOne: string,
      _assetTwo: string,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    editMasterQuoteAsset(
      _newMasterQuoteAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editPair(
      _assetOne: string,
      _assetTwo: string,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdapters(overrides?: CallOverrides): Promise<string[]>;

    getPrice(
      _assetOne: string,
      _assetTwo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterQuoteAsset(overrides?: CallOverrides): Promise<string>;

    oracles(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAdapter(_adapter: string, overrides?: CallOverrides): Promise<void>;

    removePair(
      _assetOne: string,
      _assetTwo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdapterAdded(
      _adapter?: null
    ): TypedEventFilter<[string], { _adapter: string }>;

    AdapterRemoved(
      _adapter?: null
    ): TypedEventFilter<[string], { _adapter: string }>;

    MasterQuoteAssetEdited(
      _newMasterQuote?: null
    ): TypedEventFilter<[string], { _newMasterQuote: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PairAdded(
      _assetOne?: string | null,
      _assetTwo?: string | null,
      _oracle?: null
    ): TypedEventFilter<
      [string, string, string],
      { _assetOne: string; _assetTwo: string; _oracle: string }
    >;

    PairEdited(
      _assetOne?: string | null,
      _assetTwo?: string | null,
      _newOracle?: null
    ): TypedEventFilter<
      [string, string, string],
      { _assetOne: string; _assetTwo: string; _newOracle: string }
    >;

    PairRemoved(
      _assetOne?: string | null,
      _assetTwo?: string | null,
      _oracle?: null
    ): TypedEventFilter<
      [string, string, string],
      { _assetOne: string; _assetTwo: string; _oracle: string }
    >;
  };

  estimateGas: {
    adapters(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPair(
      _assetOne: string,
      _assetTwo: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    editMasterQuoteAsset(
      _newMasterQuoteAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editPair(
      _assetOne: string,
      _assetTwo: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdapters(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _assetOne: string,
      _assetTwo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterQuoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

    oracles(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePair(
      _assetOne: string,
      _assetTwo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPair(
      _assetOne: string,
      _assetTwo: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editMasterQuoteAsset(
      _newMasterQuoteAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editPair(
      _assetOne: string,
      _assetTwo: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdapters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      _assetOne: string,
      _assetTwo: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterQuoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracles(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePair(
      _assetOne: string,
      _assetTwo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
