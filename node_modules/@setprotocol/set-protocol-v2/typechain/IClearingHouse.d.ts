/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IClearingHouseInterface extends ethers.utils.Interface {
  functions: {
    "closePosition(tuple)": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getNetQuoteBalance(address)": FunctionFragment;
    "getOpenNotional(address,address)": FunctionFragment;
    "getOwedRealizedPnl(address)": FunctionFragment;
    "getPositionSize(address,address)": FunctionFragment;
    "getPositionValue(address,address)": FunctionFragment;
    "getTotalInitialMarginRequirement(address)": FunctionFragment;
    "getTotalUnrealizedPnl(address)": FunctionFragment;
    "openPosition(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetQuoteBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenNotional",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwedRealizedPnl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionValue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalInitialMarginRequirement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnrealizedPnl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetQuoteBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalInitialMarginRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnrealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;

  events: {};
}

export class IClearingHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IClearingHouseInterface;

  functions: {
    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNetQuoteBalance(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwedRealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalInitialMarginRequirement(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalUnrealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  closePosition(
    params: {
      baseToken: string;
      sqrtPriceLimitX96: BigNumberish;
      oppositeAmountBound: BigNumberish;
      deadline: BigNumberish;
      referralCode: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNetQuoteBalance(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenNotional(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwedRealizedPnl(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionSize(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionValue(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalInitialMarginRequirement(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalUnrealizedPnl(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openPosition(
    params: {
      baseToken: string;
      isBaseToQuote: boolean;
      isExactInput: boolean;
      amount: BigNumberish;
      oppositeAmountBound: BigNumberish;
      deadline: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      referralCode: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { deltaBase: BigNumber; deltaQuote: BigNumber }
    >;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetQuoteBalance(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwedRealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalInitialMarginRequirement(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUnrealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { deltaBase: BigNumber; deltaQuote: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetQuoteBalance(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwedRealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalInitialMarginRequirement(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUnrealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetQuoteBalance(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwedRealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalInitialMarginRequirement(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUnrealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
