/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PerpV2Interface extends ethers.utils.Interface {
  functions: {
    "getDepositCalldata(IVault,IERC20,uint256)": FunctionFragment;
    "getOpenPositionCalldata(IClearingHouse,tuple)": FunctionFragment;
    "getSwapCalldata(IQuoter,tuple)": FunctionFragment;
    "getWithdrawCalldata(IVault,IERC20,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDepositCalldata",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenPositionCalldata",
    values: [
      string,
      {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapCalldata",
    values: [
      string,
      {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawCalldata",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDepositCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenPositionCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawCalldata",
    data: BytesLike
  ): Result;

  events: {};
}

export class PerpV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PerpV2Interface;

  functions: {
    getDepositCalldata(
      _vault: string,
      _asset: string,
      _amountNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getOpenPositionCalldata(
      _clearingHouse: string,
      _params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getSwapCalldata(
      _quoter: string,
      _params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getWithdrawCalldata(
      _vault: string,
      _asset: string,
      _amountNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;
  };

  getDepositCalldata(
    _vault: string,
    _asset: string,
    _amountNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getOpenPositionCalldata(
    _clearingHouse: string,
    _params: {
      baseToken: string;
      isBaseToQuote: boolean;
      isExactInput: boolean;
      amount: BigNumberish;
      oppositeAmountBound: BigNumberish;
      deadline: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      referralCode: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getSwapCalldata(
    _quoter: string,
    _params: {
      baseToken: string;
      isBaseToQuote: boolean;
      isExactInput: boolean;
      amount: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getWithdrawCalldata(
    _vault: string,
    _asset: string,
    _amountNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  callStatic: {
    getDepositCalldata(
      _vault: string,
      _asset: string,
      _amountNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getOpenPositionCalldata(
      _clearingHouse: string,
      _params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getSwapCalldata(
      _quoter: string,
      _params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getWithdrawCalldata(
      _vault: string,
      _asset: string,
      _amountNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;
  };

  filters: {};

  estimateGas: {
    getDepositCalldata(
      _vault: string,
      _asset: string,
      _amountNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenPositionCalldata(
      _clearingHouse: string,
      _params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapCalldata(
      _quoter: string,
      _params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawCalldata(
      _vault: string,
      _asset: string,
      _amountNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDepositCalldata(
      _vault: string,
      _asset: string,
      _amountNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenPositionCalldata(
      _clearingHouse: string,
      _params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapCalldata(
      _quoter: string,
      _params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawCalldata(
      _vault: string,
      _asset: string,
      _amountNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
