/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OneInchExchangeMockInterface extends ethers.utils.Interface {
  functions: {
    "addSetTokenAddress(address)": FunctionFragment;
    "mockReceiveAmount()": FunctionFragment;
    "mockReceiveToken()": FunctionFragment;
    "mockSendAmount()": FunctionFragment;
    "mockSendToken()": FunctionFragment;
    "setTokenAddress()": FunctionFragment;
    "swap(address,address,uint256,uint256,uint256,address,address[],bytes,uint256[],uint256[])": FunctionFragment;
    "updateReceiveAmount(uint256)": FunctionFragment;
    "updateSendAmount(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSetTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mockReceiveAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockReceiveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSendAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSendToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string[],
      BytesLike,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReceiveAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSendAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSetTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockReceiveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockReceiveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSendAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSendToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReceiveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSendAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export class OneInchExchangeMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OneInchExchangeMockInterface;

  functions: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockReceiveToken(overrides?: CallOverrides): Promise<[string]>;

    mockSendAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockSendToken(overrides?: CallOverrides): Promise<[string]>;

    setTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    swap(
      _fromToken: string,
      _toToken: string,
      _fromTokenAmount: BigNumberish,
      _minReturnAmount: BigNumberish,
      _guaranteedAmount: BigNumberish,
      _referrer: string,
      _callAddresses: string[],
      _callDataConcat: BytesLike,
      _starts: BigNumberish[],
      _gasLimitsAndValues: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReceiveAmount(
      _newReceiveAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSendAmount(
      _newSendAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSetTokenAddress(
    _setTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mockReceiveToken(overrides?: CallOverrides): Promise<string>;

  mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mockSendToken(overrides?: CallOverrides): Promise<string>;

  setTokenAddress(overrides?: CallOverrides): Promise<string>;

  swap(
    _fromToken: string,
    _toToken: string,
    _fromTokenAmount: BigNumberish,
    _minReturnAmount: BigNumberish,
    _guaranteedAmount: BigNumberish,
    _referrer: string,
    _callAddresses: string[],
    _callDataConcat: BytesLike,
    _starts: BigNumberish[],
    _gasLimitsAndValues: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReceiveAmount(
    _newReceiveAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSendAmount(
    _newSendAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockReceiveToken(overrides?: CallOverrides): Promise<string>;

    mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendToken(overrides?: CallOverrides): Promise<string>;

    setTokenAddress(overrides?: CallOverrides): Promise<string>;

    swap(
      _fromToken: string,
      _toToken: string,
      _fromTokenAmount: BigNumberish,
      _minReturnAmount: BigNumberish,
      _guaranteedAmount: BigNumberish,
      _referrer: string,
      _callAddresses: string[],
      _callDataConcat: BytesLike,
      _starts: BigNumberish[],
      _gasLimitsAndValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateReceiveAmount(
      _newReceiveAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSendAmount(
      _newSendAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockReceiveToken(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendToken(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _fromToken: string,
      _toToken: string,
      _fromTokenAmount: BigNumberish,
      _minReturnAmount: BigNumberish,
      _guaranteedAmount: BigNumberish,
      _referrer: string,
      _callAddresses: string[],
      _callDataConcat: BytesLike,
      _starts: BigNumberish[],
      _gasLimitsAndValues: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReceiveAmount(
      _newReceiveAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSendAmount(
      _newSendAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockReceiveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSendAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSendToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      _fromToken: string,
      _toToken: string,
      _fromTokenAmount: BigNumberish,
      _minReturnAmount: BigNumberish,
      _guaranteedAmount: BigNumberish,
      _referrer: string,
      _callAddresses: string[],
      _callDataConcat: BytesLike,
      _starts: BigNumberish[],
      _gasLimitsAndValues: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReceiveAmount(
      _newReceiveAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSendAmount(
      _newSendAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
