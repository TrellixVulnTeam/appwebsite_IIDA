/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KyberNetworkProxyMockInterface extends ethers.utils.Interface {
  functions: {
    "addToken(address,uint256,uint256)": FunctionFragment;
    "getExpectedRate(address,address,uint256)": FunctionFragment;
    "mockWethAddress()": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "trade(address,uint256,address,address,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedRate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockWethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockWethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;

  events: {};
}

export class KyberNetworkProxyMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KyberNetworkProxyMockInterface;

  functions: {
    addToken(
      _token: string,
      _rate: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExpectedRate(
      _src: string,
      _dest: string,
      _srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expectedRate: BigNumber;
        slippageRate: BigNumber;
      }
    >;

    mockWethAddress(overrides?: CallOverrides): Promise<[string]>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        rate: BigNumber;
        decimals: BigNumber;
      }
    >;

    trade(
      _src: string,
      _srcAmount: BigNumberish,
      _dest: string,
      _destAddress: string,
      _maxDestAmount: BigNumberish,
      arg5: BigNumberish,
      arg6: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToken(
    _token: string,
    _rate: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExpectedRate(
    _src: string,
    _dest: string,
    _srcQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      expectedRate: BigNumber;
      slippageRate: BigNumber;
    }
  >;

  mockWethAddress(overrides?: CallOverrides): Promise<string>;

  tokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      exists: boolean;
      rate: BigNumber;
      decimals: BigNumber;
    }
  >;

  trade(
    _src: string,
    _srcAmount: BigNumberish,
    _dest: string,
    _destAddress: string,
    _maxDestAmount: BigNumberish,
    arg5: BigNumberish,
    arg6: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToken(
      _token: string,
      _rate: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getExpectedRate(
      _src: string,
      _dest: string,
      _srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expectedRate: BigNumber;
        slippageRate: BigNumber;
      }
    >;

    mockWethAddress(overrides?: CallOverrides): Promise<string>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        rate: BigNumber;
        decimals: BigNumber;
      }
    >;

    trade(
      _src: string,
      _srcAmount: BigNumberish,
      _dest: string,
      _destAddress: string,
      _maxDestAmount: BigNumberish,
      arg5: BigNumberish,
      arg6: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addToken(
      _token: string,
      _rate: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExpectedRate(
      _src: string,
      _dest: string,
      _srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockWethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    trade(
      _src: string,
      _srcAmount: BigNumberish,
      _dest: string,
      _destAddress: string,
      _maxDestAmount: BigNumberish,
      arg5: BigNumberish,
      arg6: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken(
      _token: string,
      _rate: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExpectedRate(
      _src: string,
      _dest: string,
      _srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockWethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trade(
      _src: string,
      _srcAmount: BigNumberish,
      _dest: string,
      _destAddress: string,
      _maxDestAmount: BigNumberish,
      arg5: BigNumberish,
      arg6: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
