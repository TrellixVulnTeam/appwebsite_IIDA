/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveStakingAdapter,
  CurveStakingAdapterInterface,
} from "../CurveStakingAdapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IGaugeController",
        name: "_gaugeController",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "gaugeController",
    outputs: [
      {
        internalType: "contract IGaugeController",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingContract",
        type: "address",
      },
    ],
    name: "getSpenderAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_notionalAmount",
        type: "uint256",
      },
    ],
    name: "getStakeCallData",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_notionalAmount",
        type: "uint256",
      },
    ],
    name: "getUnstakeCallData",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516104413803806104418339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166103d561006c600039806102ca52806102f052506103d56000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d697603146100515780630e8edd86146101155780639971c1651461015757806399eecb3b14610183575b600080fd5b61007d6004803603604081101561006757600080fd5b506001600160a01b03813516906020013561018b565b60405180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156100d85781810151838201526020016100c0565b50505050905090810190601f1680156101055780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b61013b6004803603602081101561012b57600080fd5b50356001600160a01b0316610226565b604080516001600160a01b039092168252519081900360200190f35b61007d6004803603604081101561016d57600080fd5b506001600160a01b03813516906020013561022d565b61013b6102c8565b6000806060610199856102ec565b6101e5576040805162461bcd60e51b8152602060048201526018602482015277125b9d985b1a59081cdd185ada5b99c818dbdb9d1c9858dd60421b604482015290519081900360640190fd5b505060408051602480820194909452815180820390940184526044019052506020810180516001600160e01b031663b6b55f2560e01b179052909160009190565b805b919050565b600080606061023b856102ec565b610287576040805162461bcd60e51b8152602060048201526018602482015277125b9d985b1a59081cdd185ada5b99c818dbdb9d1c9858dd60421b604482015290519081900360640190fd5b505060408051602480820194909452815180820390940184526044019052506020810180516001600160e01b0316632e1a7d4d60e01b179052909160009190565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f9095b7836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561036457600080fd5b505afa92505050801561038957506040513d602081101561038457600080fd5b505160015b61039557506000610228565b506001905061022856fea264697066735822122076450764a990bd31f35d1a5047f7a83b85c3f5ad94ed680f384e38afbbe8716664736f6c634300060a0033";

export class CurveStakingAdapter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _gaugeController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CurveStakingAdapter> {
    return super.deploy(
      _gaugeController,
      overrides || {}
    ) as Promise<CurveStakingAdapter>;
  }
  getDeployTransaction(
    _gaugeController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gaugeController, overrides || {});
  }
  attach(address: string): CurveStakingAdapter {
    return super.attach(address) as CurveStakingAdapter;
  }
  connect(signer: Signer): CurveStakingAdapter__factory {
    return super.connect(signer) as CurveStakingAdapter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveStakingAdapterInterface {
    return new utils.Interface(_abi) as CurveStakingAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveStakingAdapter {
    return new Contract(address, _abi, signerOrProvider) as CurveStakingAdapter;
  }
}
