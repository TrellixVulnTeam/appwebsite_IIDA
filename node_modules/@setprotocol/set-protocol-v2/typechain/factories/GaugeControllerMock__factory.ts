/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GaugeControllerMock,
  GaugeControllerMockInterface,
} from "../GaugeControllerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gauge",
        type: "address",
      },
      {
        internalType: "int128",
        name: "_type",
        type: "int128",
      },
    ],
    name: "addGaugeType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gauge",
        type: "address",
      },
    ],
    name: "gauge_types",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061019c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633f9095b71461003b578063a12f4e5b1461007a575b600080fd5b6100616004803603602081101561005157600080fd5b50356001600160a01b03166100ab565b60408051600f92830b90920b8252519081900360200190f35b6100a96004803603604081101561009057600080fd5b506001600160a01b038135169060200135600f0b610114565b005b6001600160a01b038116600090815260208190526040812054600f90810b9081900b61010a576040805162461bcd60e51b8152602060048201526009602482015268139bdd081d985b1a5960ba1b604482015290519081900360640190fd5b6000190192915050565b6001600160a01b03909116600090815260208190526040902080546001909201600f0b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1990921691909117905556fea26469706673582212204743a63168a0259aed3c76f17e21c94732ecd37468656545c9725d2e15a8dbe764736f6c634300060a0033";

export class GaugeControllerMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GaugeControllerMock> {
    return super.deploy(overrides || {}) as Promise<GaugeControllerMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GaugeControllerMock {
    return super.attach(address) as GaugeControllerMock;
  }
  connect(signer: Signer): GaugeControllerMock__factory {
    return super.connect(signer) as GaugeControllerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GaugeControllerMockInterface {
    return new utils.Interface(_abi) as GaugeControllerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GaugeControllerMock {
    return new Contract(address, _abi, signerOrProvider) as GaugeControllerMock;
  }
}
