/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AaveLendingPoolMock,
  AaveLendingPoolMockInterface,
} from "../AaveLendingPoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_core",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "core",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516100f83803806100f88339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556094806100646000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f2f4eb2614602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6000546001600160a01b03168156fea26469706673582212202770e11cee65114c1fad82f77bd8aad7f5b023aff897b6de044384d9d07c42bc64736f6c634300060a0033";

export class AaveLendingPoolMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _core: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AaveLendingPoolMock> {
    return super.deploy(_core, overrides || {}) as Promise<AaveLendingPoolMock>;
  }
  getDeployTransaction(
    _core: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_core, overrides || {});
  }
  attach(address: string): AaveLendingPoolMock {
    return super.attach(address) as AaveLendingPoolMock;
  }
  connect(signer: Signer): AaveLendingPoolMock__factory {
    return super.connect(signer) as AaveLendingPoolMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AaveLendingPoolMockInterface {
    return new utils.Interface(_abi) as AaveLendingPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AaveLendingPoolMock {
    return new Contract(address, _abi, signerOrProvider) as AaveLendingPoolMock;
  }
}
