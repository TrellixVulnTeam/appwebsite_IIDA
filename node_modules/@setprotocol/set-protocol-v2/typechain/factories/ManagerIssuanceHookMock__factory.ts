/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ManagerIssuanceHookMock,
  ManagerIssuanceHookMockInterface,
} from "../ManagerIssuanceHookMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_issueQuantity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "invokePreIssueHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_redeemQuantity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "invokePreRedeemHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "retrievedIssueQuantity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "retrievedSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "retrievedSetToken",
    outputs: [
      {
        internalType: "contract ISetToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "retrievedTo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632c768798146100675780639b19c2bf1461008b578063a04580831461008b578063a7e38e8b146100c9578063c866b8b9146100d1578063cd724369146100d9575b600080fd5b61006f6100f3565b604080516001600160a01b039092168252519081900360200190f35b6100c7600480360360808110156100a157600080fd5b506001600160a01b03813581169160208101359160408201358116916060013516610102565b005b61006f610147565b61006f610156565b6100e1610165565b60408051918252519081900360200190f35b6002546001600160a01b031681565b600080546001600160a01b039586166001600160a01b031991821617909155600193909355600280549285169284169290921790915560038054919093169116179055565b6003546001600160a01b031681565b6000546001600160a01b031681565b6001548156fea26469706673582212202031fddf3103485ed14967f34ddf83f3be74e2ed82d293d618aac90c7e7c37af64736f6c634300060a0033";

export class ManagerIssuanceHookMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ManagerIssuanceHookMock> {
    return super.deploy(overrides || {}) as Promise<ManagerIssuanceHookMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ManagerIssuanceHookMock {
    return super.attach(address) as ManagerIssuanceHookMock;
  }
  connect(signer: Signer): ManagerIssuanceHookMock__factory {
    return super.connect(signer) as ManagerIssuanceHookMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ManagerIssuanceHookMockInterface {
    return new utils.Interface(_abi) as ManagerIssuanceHookMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ManagerIssuanceHookMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ManagerIssuanceHookMock;
  }
}
