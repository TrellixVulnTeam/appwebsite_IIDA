/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ChainlinkAggregatorMock,
  ChainlinkAggregatorMockInterface,
} from "../ChainlinkAggregatorMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnsweredInRound",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundId",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestStartedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestUpdatedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_latestAnswer",
        type: "int256",
      },
    ],
    name: "setLatestAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "_answeredInRound",
        type: "uint80",
      },
    ],
    name: "setRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161034e38038061034e8339818101604052602081101561003357600080fd5b50516004805460ff9092166a01000000000000000000000260ff60501b199092169190911790556102e5806100696000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806350d25bcd1161006657806350d25bcd14610160578063918e220d146101685780639a6fc8f514610170578063a53322af146101d2578063feaf968c146101da5761009e565b806304ea97b0146100a357806311a8f413146100c25780631c12940a146100e657806330e4574314610128578063313ce56714610142575b600080fd5b6100c0600480360360208110156100b957600080fd5b50356101e2565b005b6100ca6101e7565b604080516001600160501b039092168252519081900360200190f35b6100c0600480360360a08110156100fc57600080fd5b506001600160501b038135811691602081013591604082013591606081013591608090910135166101f6565b610130610236565b60408051918252519081900360200190f35b61014a61023c565b6040805160ff9092168252519081900360200190f35b61013061024c565b610130610252565b6101966004803603602081101561018657600080fd5b50356001600160501b0316610258565b604080516001600160501b0396871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b6100ca61027d565b61019661028c565b600055565b6001546001600160501b031681565b600180546001600160501b0396871669ffffffffffffffffffff199182161790915560009490945560029290925560035560048054919093169116179055565b60025481565b600454600160501b900460ff1681565b60005481565b60035481565b6001546000546002546003546004546001600160501b03948516941691939590929450565b6004546001600160501b031681565b6001546000546002546003546004546001600160501b039485169416909192939456fea264697066735822122042283b0c592955df2becede6cf88854de55b67eccf9fd6aa09fc6d19a949e90664736f6c634300060a0033";

export class ChainlinkAggregatorMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChainlinkAggregatorMock> {
    return super.deploy(
      _decimals,
      overrides || {}
    ) as Promise<ChainlinkAggregatorMock>;
  }
  getDeployTransaction(
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_decimals, overrides || {});
  }
  attach(address: string): ChainlinkAggregatorMock {
    return super.attach(address) as ChainlinkAggregatorMock;
  }
  connect(signer: Signer): ChainlinkAggregatorMock__factory {
    return super.connect(signer) as ChainlinkAggregatorMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainlinkAggregatorMockInterface {
    return new utils.Interface(_abi) as ChainlinkAggregatorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkAggregatorMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ChainlinkAggregatorMock;
  }
}
