/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ClaimModuleInterface extends ethers.utils.Interface {
  functions: {
    "addClaim(address,address,string)": FunctionFragment;
    "anyoneClaim(address)": FunctionFragment;
    "batchAddClaim(address,address[],string[])": FunctionFragment;
    "batchClaim(address,address[],string[])": FunctionFragment;
    "batchRemoveClaim(address,address[],string[])": FunctionFragment;
    "claim(address,address,string)": FunctionFragment;
    "claimSettings(address,address,uint256)": FunctionFragment;
    "claimSettingsStatus(address,address,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "getRewardPoolClaims(address,address)": FunctionFragment;
    "getRewardPools(address)": FunctionFragment;
    "getRewards(address,address,string)": FunctionFragment;
    "initialize(address,bool,address[],string[])": FunctionFragment;
    "isRewardPool(address,address)": FunctionFragment;
    "isRewardPoolClaim(address,address,string)": FunctionFragment;
    "removeClaim(address,address,string)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "rewardPoolList(address,uint256)": FunctionFragment;
    "rewardPoolStatus(address,address)": FunctionFragment;
    "updateAnyoneClaim(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addClaim",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "anyoneClaim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchAddClaim",
    values: [string, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchClaim",
    values: [string, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRemoveClaim",
    values: [string, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSettings",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSettingsStatus",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPoolClaims",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, boolean, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardPoolClaim",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeClaim",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPoolList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPoolStatus",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnyoneClaim",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anyoneClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAddClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRemoveClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSettingsStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPoolClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardPoolClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPoolList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPoolStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnyoneClaim",
    data: BytesLike
  ): Result;

  events: {
    "AnyoneClaimUpdated(address,bool)": EventFragment;
    "RewardClaimed(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnyoneClaimUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
}

export class ClaimModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClaimModuleInterface;

  functions: {
    addClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anyoneClaim(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    batchAddClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRemoveClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSettings(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimSettingsStatus(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    getRewardPoolClaims(
      _setToken: string,
      _rewardPool: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRewardPools(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRewards(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _setToken: string,
      _anyoneClaim: boolean,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRewardPool(
      _setToken: string,
      _rewardPool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRewardPoolClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPoolList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardPoolStatus(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateAnyoneClaim(
      _setToken: string,
      _anyoneClaim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addClaim(
    _setToken: string,
    _rewardPool: string,
    _integrationName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anyoneClaim(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  batchAddClaim(
    _setToken: string,
    _rewardPools: string[],
    _integrationNames: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchClaim(
    _setToken: string,
    _rewardPools: string[],
    _integrationNames: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRemoveClaim(
    _setToken: string,
    _rewardPools: string[],
    _integrationNames: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _setToken: string,
    _rewardPool: string,
    _integrationName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSettings(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  claimSettingsStatus(
    arg0: string,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  controller(overrides?: CallOverrides): Promise<string>;

  getRewardPoolClaims(
    _setToken: string,
    _rewardPool: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRewardPools(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRewards(
    _setToken: string,
    _rewardPool: string,
    _integrationName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _setToken: string,
    _anyoneClaim: boolean,
    _rewardPools: string[],
    _integrationNames: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRewardPool(
    _setToken: string,
    _rewardPool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRewardPoolClaim(
    _setToken: string,
    _rewardPool: string,
    _integrationName: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeClaim(
    _setToken: string,
    _rewardPool: string,
    _integrationName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPoolList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardPoolStatus(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateAnyoneClaim(
    _setToken: string,
    _anyoneClaim: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    anyoneClaim(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    batchAddClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchRemoveClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSettings(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    claimSettingsStatus(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    controller(overrides?: CallOverrides): Promise<string>;

    getRewardPoolClaims(
      _setToken: string,
      _rewardPool: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRewardPools(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRewards(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _anyoneClaim: boolean,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isRewardPool(
      _setToken: string,
      _rewardPool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRewardPoolClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    rewardPoolList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardPoolStatus(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAnyoneClaim(
      _setToken: string,
      _anyoneClaim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AnyoneClaimUpdated(
      _setToken?: string | null,
      _anyoneClaim?: null
    ): TypedEventFilter<
      [string, boolean],
      { _setToken: string; _anyoneClaim: boolean }
    >;

    RewardClaimed(
      _setToken?: string | null,
      _rewardPool?: string | null,
      _adapter?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _setToken: string;
        _rewardPool: string;
        _adapter: string;
        _amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    addClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anyoneClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchAddClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRemoveClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSettings(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimSettingsStatus(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPoolClaims(
      _setToken: string,
      _rewardPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardPools(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _anyoneClaim: boolean,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRewardPool(
      _setToken: string,
      _rewardPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRewardPoolClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPoolList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPoolStatus(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAnyoneClaim(
      _setToken: string,
      _anyoneClaim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anyoneClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchAddClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRemoveClaim(
      _setToken: string,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSettings(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimSettingsStatus(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardPoolClaims(
      _setToken: string,
      _rewardPool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardPools(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      _anyoneClaim: boolean,
      _rewardPools: string[],
      _integrationNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRewardPool(
      _setToken: string,
      _rewardPool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardPoolClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeClaim(
      _setToken: string,
      _rewardPool: string,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPoolList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPoolStatus(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAnyoneClaim(
      _setToken: string,
      _anyoneClaim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
