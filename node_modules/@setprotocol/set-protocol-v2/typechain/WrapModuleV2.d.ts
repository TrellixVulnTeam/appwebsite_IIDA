/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WrapModuleV2Interface extends ethers.utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "unwrap(address,address,address,uint256,string,bytes)": FunctionFragment;
    "unwrapWithEther(address,address,uint256,string,bytes)": FunctionFragment;
    "weth()": FunctionFragment;
    "wrap(address,address,address,uint256,string,bytes)": FunctionFragment;
    "wrapWithEther(address,address,uint256,string,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [string, string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWithEther",
    values: [string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [string, string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapWithEther",
    values: [string, string, BigNumberish, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWithEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapWithEther",
    data: BytesLike
  ): Result;

  events: {
    "ComponentUnwrapped(address,address,address,uint256,uint256,string)": EventFragment;
    "ComponentWrapped(address,address,address,uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ComponentUnwrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComponentWrapped"): EventFragment;
}

export class WrapModuleV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WrapModuleV2Interface;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      _unwrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      _unwrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    wrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      _wrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      _wrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  initialize(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrap(
    _setToken: string,
    _underlyingToken: string,
    _wrappedToken: string,
    _wrappedUnits: BigNumberish,
    _integrationName: string,
    _unwrapData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapWithEther(
    _setToken: string,
    _wrappedToken: string,
    _wrappedUnits: BigNumberish,
    _integrationName: string,
    _unwrapData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  wrap(
    _setToken: string,
    _underlyingToken: string,
    _wrappedToken: string,
    _underlyingUnits: BigNumberish,
    _integrationName: string,
    _wrapData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapWithEther(
    _setToken: string,
    _wrappedToken: string,
    _underlyingUnits: BigNumberish,
    _integrationName: string,
    _wrapData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    initialize(_setToken: string, overrides?: CallOverrides): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    unwrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      _unwrapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      _unwrapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    wrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      _wrapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      _wrapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ComponentUnwrapped(
      _setToken?: string | null,
      _underlyingToken?: string | null,
      _wrappedToken?: string | null,
      _underlyingQuantity?: null,
      _wrappedQuantity?: null,
      _integrationName?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        _setToken: string;
        _underlyingToken: string;
        _wrappedToken: string;
        _underlyingQuantity: BigNumber;
        _wrappedQuantity: BigNumber;
        _integrationName: string;
      }
    >;

    ComponentWrapped(
      _setToken?: string | null,
      _underlyingToken?: string | null,
      _wrappedToken?: string | null,
      _underlyingQuantity?: null,
      _wrappedQuantity?: null,
      _integrationName?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        _setToken: string;
        _underlyingToken: string;
        _wrappedToken: string;
        _underlyingQuantity: BigNumber;
        _wrappedQuantity: BigNumber;
        _integrationName: string;
      }
    >;
  };

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      _unwrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      _unwrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    wrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      _wrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      _wrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      _unwrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      _unwrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      _wrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      _wrapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
