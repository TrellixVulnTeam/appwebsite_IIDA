/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StreamingFeeModuleViewerInterface extends ethers.utils.Interface {
  functions: {
    "batchFetchStreamingFeeInfo(address,address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchFetchStreamingFeeInfo",
    values: [string, string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchFetchStreamingFeeInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export class StreamingFeeModuleViewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StreamingFeeModuleViewerInterface;

  functions: {
    batchFetchStreamingFeeInfo(
      _streamingFeeModule: string,
      _setTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          feeRecipient: string;
          streamingFeePercentage: BigNumber;
          unaccruedFees: BigNumber;
        })[]
      ]
    >;
  };

  batchFetchStreamingFeeInfo(
    _streamingFeeModule: string,
    _setTokens: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      feeRecipient: string;
      streamingFeePercentage: BigNumber;
      unaccruedFees: BigNumber;
    })[]
  >;

  callStatic: {
    batchFetchStreamingFeeInfo(
      _streamingFeeModule: string,
      _setTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        feeRecipient: string;
        streamingFeePercentage: BigNumber;
        unaccruedFees: BigNumber;
      })[]
    >;
  };

  filters: {};

  estimateGas: {
    batchFetchStreamingFeeInfo(
      _streamingFeeModule: string,
      _setTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchFetchStreamingFeeInfo(
      _streamingFeeModule: string,
      _setTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
