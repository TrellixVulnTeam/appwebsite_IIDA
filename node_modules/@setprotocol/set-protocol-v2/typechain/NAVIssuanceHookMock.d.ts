/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NAVIssuanceHookMockInterface extends ethers.utils.Interface {
  functions: {
    "invokePreIssueHook(address,address,uint256,address,address)": FunctionFragment;
    "invokePreRedeemHook(address,uint256,address,address)": FunctionFragment;
    "retrievedRedeemQuantity()": FunctionFragment;
    "retrievedReserveAsset()": FunctionFragment;
    "retrievedReserveAssetQuantity()": FunctionFragment;
    "retrievedSender()": FunctionFragment;
    "retrievedSetToken()": FunctionFragment;
    "retrievedTo()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "invokePreIssueHook",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "invokePreRedeemHook",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrievedRedeemQuantity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrievedReserveAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrievedReserveAssetQuantity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrievedSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrievedSetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrievedTo",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "invokePreIssueHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invokePreRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievedRedeemQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievedReserveAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievedReserveAssetQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievedSetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievedTo",
    data: BytesLike
  ): Result;

  events: {};
}

export class NAVIssuanceHookMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NAVIssuanceHookMockInterface;

  functions: {
    invokePreIssueHook(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      _sender: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invokePreRedeemHook(
      _setToken: string,
      _redeemQuantity: BigNumberish,
      _sender: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrievedRedeemQuantity(overrides?: CallOverrides): Promise<[BigNumber]>;

    retrievedReserveAsset(overrides?: CallOverrides): Promise<[string]>;

    retrievedReserveAssetQuantity(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    retrievedSender(overrides?: CallOverrides): Promise<[string]>;

    retrievedSetToken(overrides?: CallOverrides): Promise<[string]>;

    retrievedTo(overrides?: CallOverrides): Promise<[string]>;
  };

  invokePreIssueHook(
    _setToken: string,
    _reserveAsset: string,
    _reserveAssetQuantity: BigNumberish,
    _sender: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invokePreRedeemHook(
    _setToken: string,
    _redeemQuantity: BigNumberish,
    _sender: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrievedRedeemQuantity(overrides?: CallOverrides): Promise<BigNumber>;

  retrievedReserveAsset(overrides?: CallOverrides): Promise<string>;

  retrievedReserveAssetQuantity(overrides?: CallOverrides): Promise<BigNumber>;

  retrievedSender(overrides?: CallOverrides): Promise<string>;

  retrievedSetToken(overrides?: CallOverrides): Promise<string>;

  retrievedTo(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    invokePreIssueHook(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      _sender: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    invokePreRedeemHook(
      _setToken: string,
      _redeemQuantity: BigNumberish,
      _sender: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    retrievedRedeemQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    retrievedReserveAsset(overrides?: CallOverrides): Promise<string>;

    retrievedReserveAssetQuantity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrievedSender(overrides?: CallOverrides): Promise<string>;

    retrievedSetToken(overrides?: CallOverrides): Promise<string>;

    retrievedTo(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    invokePreIssueHook(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      _sender: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invokePreRedeemHook(
      _setToken: string,
      _redeemQuantity: BigNumberish,
      _sender: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrievedRedeemQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    retrievedReserveAsset(overrides?: CallOverrides): Promise<BigNumber>;

    retrievedReserveAssetQuantity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrievedSender(overrides?: CallOverrides): Promise<BigNumber>;

    retrievedSetToken(overrides?: CallOverrides): Promise<BigNumber>;

    retrievedTo(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    invokePreIssueHook(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      _sender: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invokePreRedeemHook(
      _setToken: string,
      _redeemQuantity: BigNumberish,
      _sender: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrievedRedeemQuantity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrievedReserveAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrievedReserveAssetQuantity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrievedSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrievedSetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrievedTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
