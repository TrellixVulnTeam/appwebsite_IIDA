/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AaveGovernanceAdapterInterface extends ethers.utils.Interface {
  functions: {
    "VOTE_AGAINST()": FunctionFragment;
    "VOTE_FOR()": FunctionFragment;
    "aaveProtoGovernance()": FunctionFragment;
    "aaveToken()": FunctionFragment;
    "getDelegateCalldata(address)": FunctionFragment;
    "getProposeCalldata(bytes)": FunctionFragment;
    "getRegisterCalldata(address)": FunctionFragment;
    "getRevokeCalldata()": FunctionFragment;
    "getVoteCalldata(uint256,bool,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "VOTE_AGAINST",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VOTE_FOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aaveProtoGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aaveToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDelegateCalldata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposeCalldata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisterCalldata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevokeCalldata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCalldata",
    values: [BigNumberish, boolean, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "VOTE_AGAINST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VOTE_FOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aaveProtoGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aaveToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposeCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisterCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevokeCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCalldata",
    data: BytesLike
  ): Result;

  events: {};
}

export class AaveGovernanceAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AaveGovernanceAdapterInterface;

  functions: {
    VOTE_AGAINST(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_FOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    aaveProtoGovernance(overrides?: CallOverrides): Promise<[string]>;

    aaveToken(overrides?: CallOverrides): Promise<[string]>;

    getDelegateCalldata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getProposeCalldata(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRegisterCalldata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRevokeCalldata(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getVoteCalldata(
      _proposalId: BigNumberish,
      _support: boolean,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;
  };

  VOTE_AGAINST(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_FOR(overrides?: CallOverrides): Promise<BigNumber>;

  aaveProtoGovernance(overrides?: CallOverrides): Promise<string>;

  aaveToken(overrides?: CallOverrides): Promise<string>;

  getDelegateCalldata(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getProposeCalldata(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRegisterCalldata(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRevokeCalldata(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getVoteCalldata(
    _proposalId: BigNumberish,
    _support: boolean,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  callStatic: {
    VOTE_AGAINST(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_FOR(overrides?: CallOverrides): Promise<BigNumber>;

    aaveProtoGovernance(overrides?: CallOverrides): Promise<string>;

    aaveToken(overrides?: CallOverrides): Promise<string>;

    getDelegateCalldata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getProposeCalldata(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRegisterCalldata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRevokeCalldata(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getVoteCalldata(
      _proposalId: BigNumberish,
      _support: boolean,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;
  };

  filters: {};

  estimateGas: {
    VOTE_AGAINST(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_FOR(overrides?: CallOverrides): Promise<BigNumber>;

    aaveProtoGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    aaveToken(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegateCalldata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposeCalldata(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisterCalldata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevokeCalldata(overrides?: CallOverrides): Promise<BigNumber>;

    getVoteCalldata(
      _proposalId: BigNumberish,
      _support: boolean,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VOTE_AGAINST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_FOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aaveProtoGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aaveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelegateCalldata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposeCalldata(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisterCalldata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevokeCalldata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoteCalldata(
      _proposalId: BigNumberish,
      _support: boolean,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
