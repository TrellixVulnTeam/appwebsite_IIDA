/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingModuleInterface extends ethers.utils.Interface {
  functions: {
    "componentIssueHook(address,uint256,address,bool)": FunctionFragment;
    "componentRedeemHook(address,uint256,address,bool)": FunctionFragment;
    "controller()": FunctionFragment;
    "getStakingContracts(address,address)": FunctionFragment;
    "getStakingPosition(address,address,address)": FunctionFragment;
    "getStakingPositionUnit(address,address,address)": FunctionFragment;
    "hasStakingPosition(address,address,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "moduleIssueHook(address,uint256)": FunctionFragment;
    "moduleRedeemHook(address,uint256)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "stake(address,address,address,string,uint256)": FunctionFragment;
    "unstake(address,address,address,string,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "componentIssueHook",
    values: [string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "componentRedeemHook",
    values: [string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingContracts",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPositionUnit",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStakingPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "moduleIssueHook",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleRedeemHook",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "componentIssueHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "componentRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPositionUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasStakingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleIssueHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "ComponentStaked(address,address,address,uint256,address)": EventFragment;
    "ComponentUnstaked(address,address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ComponentStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComponentUnstaked"): EventFragment;
}

export class StakingModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingModuleInterface;

  functions: {
    componentIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      arg3: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    componentRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      arg3: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    getStakingContracts(
      _setToken: string,
      _component: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getStakingPosition(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber] & {
          adapterHash: string;
          componentPositionUnits: BigNumber;
        }
      ]
    >;

    getStakingPositionUnit(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasStakingPosition(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moduleIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moduleRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _setToken: string,
      _stakeContract: string,
      _component: string,
      _adapterName: string,
      _componentPositionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _setToken: string,
      _stakeContract: string,
      _component: string,
      _adapterName: string,
      _componentPositionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  componentIssueHook(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    _component: string,
    arg3: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  componentRedeemHook(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    _component: string,
    arg3: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  getStakingContracts(
    _setToken: string,
    _component: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getStakingPosition(
    _setToken: string,
    _component: string,
    _stakeContract: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & {
      adapterHash: string;
      componentPositionUnits: BigNumber;
    }
  >;

  getStakingPositionUnit(
    _setToken: string,
    _component: string,
    _stakeContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasStakingPosition(
    _setToken: string,
    _component: string,
    _stakeContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moduleIssueHook(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moduleRedeemHook(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _setToken: string,
    _stakeContract: string,
    _component: string,
    _adapterName: string,
    _componentPositionUnits: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _setToken: string,
    _stakeContract: string,
    _component: string,
    _adapterName: string,
    _componentPositionUnits: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    componentIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    componentRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    getStakingContracts(
      _setToken: string,
      _component: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getStakingPosition(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        adapterHash: string;
        componentPositionUnits: BigNumber;
      }
    >;

    getStakingPositionUnit(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStakingPosition(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(_setToken: string, overrides?: CallOverrides): Promise<void>;

    moduleIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    moduleRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    stake(
      _setToken: string,
      _stakeContract: string,
      _component: string,
      _adapterName: string,
      _componentPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _setToken: string,
      _stakeContract: string,
      _component: string,
      _adapterName: string,
      _componentPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ComponentStaked(
      _setToken?: string | null,
      _component?: string | null,
      _stakingContract?: string | null,
      _componentPositionUnits?: null,
      _adapter?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        _setToken: string;
        _component: string;
        _stakingContract: string;
        _componentPositionUnits: BigNumber;
        _adapter: string;
      }
    >;

    ComponentUnstaked(
      _setToken?: string | null,
      _component?: string | null,
      _stakingContract?: string | null,
      _componentPositionUnits?: null,
      _adapter?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        _setToken: string;
        _component: string;
        _stakingContract: string;
        _componentPositionUnits: BigNumber;
        _adapter: string;
      }
    >;
  };

  estimateGas: {
    componentIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      arg3: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    componentRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      arg3: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingContracts(
      _setToken: string,
      _component: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingPosition(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingPositionUnit(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStakingPosition(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moduleIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moduleRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _setToken: string,
      _stakeContract: string,
      _component: string,
      _adapterName: string,
      _componentPositionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _setToken: string,
      _stakeContract: string,
      _component: string,
      _adapterName: string,
      _componentPositionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    componentIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      arg3: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    componentRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _component: string,
      arg3: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingContracts(
      _setToken: string,
      _component: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingPosition(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingPositionUnit(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasStakingPosition(
      _setToken: string,
      _component: string,
      _stakeContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moduleIssueHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moduleRedeemHook(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _setToken: string,
      _stakeContract: string,
      _component: string,
      _adapterName: string,
      _componentPositionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _setToken: string,
      _stakeContract: string,
      _component: string,
      _adapterName: string,
      _componentPositionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
