/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZeroExMockInterface extends ethers.utils.Interface {
  functions: {
    "addSetTokenAddress(address)": FunctionFragment;
    "batchFill(tuple,uint256)": FunctionFragment;
    "mockReceiveAmount()": FunctionFragment;
    "mockReceiveToken()": FunctionFragment;
    "mockSendAmount()": FunctionFragment;
    "mockSendToken()": FunctionFragment;
    "multiHopFill(tuple,uint256)": FunctionFragment;
    "multiplexBatchSellTokenForToken(address,address,tuple[],uint256,uint256)": FunctionFragment;
    "multiplexMultiHopSellTokenForToken(address[],tuple[],uint256,uint256)": FunctionFragment;
    "sellToLiquidityProvider(address,address,address,address,uint256,uint256,bytes)": FunctionFragment;
    "sellToUniswap(address[],uint256,uint256,bool)": FunctionFragment;
    "sellTokenForTokenToUniswapV3(bytes,uint256,uint256,address)": FunctionFragment;
    "setTokenAddress()": FunctionFragment;
    "transformERC20(address,address,uint256,uint256,tuple[])": FunctionFragment;
    "transformERC20Staging(address,address,uint256,uint256,tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSetTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFill",
    values: [
      {
        inputToken: string;
        outputToken: string;
        sellAmount: BigNumberish;
        calls: {
          selector: BytesLike;
          sellAmount: BigNumberish;
          data: BytesLike;
        }[];
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockReceiveAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockReceiveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSendAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSendToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiHopFill",
    values: [
      {
        tokens: string[];
        sellAmount: BigNumberish;
        calls: { selector: BytesLike; data: BytesLike }[];
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexBatchSellTokenForToken",
    values: [
      string,
      string,
      { subcall: BigNumberish; sellAmount: BigNumberish; data: BytesLike }[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexMultiHopSellTokenForToken",
    values: [
      string[],
      { subcall: BigNumberish; data: BytesLike }[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellToLiquidityProvider",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellToUniswap",
    values: [string[], BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForTokenToUniswapV3",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transformERC20",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      { deploymentNonce: BigNumberish; data: BytesLike }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transformERC20Staging",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      { deploymentNonce: BigNumberish; data: BytesLike }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSetTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchFill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockReceiveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockReceiveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSendAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSendToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiHopFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexBatchSellTokenForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexMultiHopSellTokenForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellToLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellToUniswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForTokenToUniswapV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformERC20Staging",
    data: BytesLike
  ): Result;

  events: {};
}

export class ZeroExMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZeroExMockInterface;

  functions: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchFill(
      arg0: {
        inputToken: string;
        outputToken: string;
        sellAmount: BigNumberish;
        calls: {
          selector: BytesLike;
          sellAmount: BigNumberish;
          data: BytesLike;
        }[];
      },
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockReceiveToken(overrides?: CallOverrides): Promise<[string]>;

    mockSendAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockSendToken(overrides?: CallOverrides): Promise<[string]>;

    multiHopFill(
      arg0: {
        tokens: string[];
        sellAmount: BigNumberish;
        calls: { selector: BytesLike; data: BytesLike }[];
      },
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexBatchSellTokenForToken(
      arg0: string,
      arg1: string,
      arg2: {
        subcall: BigNumberish;
        sellAmount: BigNumberish;
        data: BytesLike;
      }[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexMultiHopSellTokenForToken(
      arg0: string[],
      arg1: { subcall: BigNumberish; data: BytesLike }[],
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellToLiquidityProvider(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellToUniswap(
      arg0: string[],
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTokenForTokenToUniswapV3(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    transformERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transformERC20Staging(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSetTokenAddress(
    _setTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchFill(
    arg0: {
      inputToken: string;
      outputToken: string;
      sellAmount: BigNumberish;
      calls: {
        selector: BytesLike;
        sellAmount: BigNumberish;
        data: BytesLike;
      }[];
    },
    arg1: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mockReceiveToken(overrides?: CallOverrides): Promise<string>;

  mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mockSendToken(overrides?: CallOverrides): Promise<string>;

  multiHopFill(
    arg0: {
      tokens: string[];
      sellAmount: BigNumberish;
      calls: { selector: BytesLike; data: BytesLike }[];
    },
    arg1: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexBatchSellTokenForToken(
    arg0: string,
    arg1: string,
    arg2: {
      subcall: BigNumberish;
      sellAmount: BigNumberish;
      data: BytesLike;
    }[],
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexMultiHopSellTokenForToken(
    arg0: string[],
    arg1: { subcall: BigNumberish; data: BytesLike }[],
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellToLiquidityProvider(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellToUniswap(
    arg0: string[],
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTokenForTokenToUniswapV3(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAddress(overrides?: CallOverrides): Promise<string>;

  transformERC20(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transformERC20Staging(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchFill(
      arg0: {
        inputToken: string;
        outputToken: string;
        sellAmount: BigNumberish;
        calls: {
          selector: BytesLike;
          sellAmount: BigNumberish;
          data: BytesLike;
        }[];
      },
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockReceiveToken(overrides?: CallOverrides): Promise<string>;

    mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendToken(overrides?: CallOverrides): Promise<string>;

    multiHopFill(
      arg0: {
        tokens: string[];
        sellAmount: BigNumberish;
        calls: { selector: BytesLike; data: BytesLike }[];
      },
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexBatchSellTokenForToken(
      arg0: string,
      arg1: string,
      arg2: {
        subcall: BigNumberish;
        sellAmount: BigNumberish;
        data: BytesLike;
      }[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexMultiHopSellTokenForToken(
      arg0: string[],
      arg1: { subcall: BigNumberish; data: BytesLike }[],
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellToLiquidityProvider(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellToUniswap(
      arg0: string[],
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellTokenForTokenToUniswapV3(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTokenAddress(overrides?: CallOverrides): Promise<string>;

    transformERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transformERC20Staging(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchFill(
      arg0: {
        inputToken: string;
        outputToken: string;
        sellAmount: BigNumberish;
        calls: {
          selector: BytesLike;
          sellAmount: BigNumberish;
          data: BytesLike;
        }[];
      },
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockReceiveToken(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendToken(overrides?: CallOverrides): Promise<BigNumber>;

    multiHopFill(
      arg0: {
        tokens: string[];
        sellAmount: BigNumberish;
        calls: { selector: BytesLike; data: BytesLike }[];
      },
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexBatchSellTokenForToken(
      arg0: string,
      arg1: string,
      arg2: {
        subcall: BigNumberish;
        sellAmount: BigNumberish;
        data: BytesLike;
      }[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexMultiHopSellTokenForToken(
      arg0: string[],
      arg1: { subcall: BigNumberish; data: BytesLike }[],
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellToLiquidityProvider(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellToUniswap(
      arg0: string[],
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTokenForTokenToUniswapV3(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transformERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transformERC20Staging(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchFill(
      arg0: {
        inputToken: string;
        outputToken: string;
        sellAmount: BigNumberish;
        calls: {
          selector: BytesLike;
          sellAmount: BigNumberish;
          data: BytesLike;
        }[];
      },
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockReceiveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSendAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSendToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiHopFill(
      arg0: {
        tokens: string[];
        sellAmount: BigNumberish;
        calls: { selector: BytesLike; data: BytesLike }[];
      },
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexBatchSellTokenForToken(
      arg0: string,
      arg1: string,
      arg2: {
        subcall: BigNumberish;
        sellAmount: BigNumberish;
        data: BytesLike;
      }[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexMultiHopSellTokenForToken(
      arg0: string[],
      arg1: { subcall: BigNumberish; data: BytesLike }[],
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellToLiquidityProvider(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellToUniswap(
      arg0: string[],
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForTokenToUniswapV3(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transformERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transformERC20Staging(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: { deploymentNonce: BigNumberish; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
