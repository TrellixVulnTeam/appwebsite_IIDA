/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PerpV2AccountBalanceInterface extends ethers.utils.Interface {
  functions: {
    "addOwedRealizedPnl(address,int256)": FunctionFragment;
    "addTakerBalances(address,address,int256,int256)": FunctionFragment;
    "candidate()": FunctionFragment;
    "deregisterBaseToken(address,address)": FunctionFragment;
    "getAccountInfo(address,address)": FunctionFragment;
    "getBase(address,address)": FunctionFragment;
    "getBaseTokens(address)": FunctionFragment;
    "getClearingHouse()": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getMarginRequirementForLiquidation(address)": FunctionFragment;
    "getNetQuoteBalanceAndPendingFee(address)": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getPnlAndPendingFee(address)": FunctionFragment;
    "getQuote(address,address)": FunctionFragment;
    "getTakerOpenNotional(address,address)": FunctionFragment;
    "getTakerPositionSize(address,address)": FunctionFragment;
    "getTotalAbsPositionValue(address)": FunctionFragment;
    "getTotalDebtValue(address)": FunctionFragment;
    "getTotalOpenNotional(address,address)": FunctionFragment;
    "getTotalPositionSize(address,address)": FunctionFragment;
    "getTotalPositionValue(address,address)": FunctionFragment;
    "getVault()": FunctionFragment;
    "hasOrder(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerBaseToken(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setClearingHouse(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)": FunctionFragment;
    "settleOwedRealizedPnl(address)": FunctionFragment;
    "settleQuoteToPnl(address,address,int256)": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "updateTwPremiumGrowthGlobal(address,address,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOwedRealizedPnl",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTakerBalances",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deregisterBaseToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBase",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRequirementForLiquidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetQuoteBalanceAndPendingFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlAndPendingFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerOpenNotional",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAbsPositionValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebtValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOpenNotional",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionValue",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasOrder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerBaseToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClearingHouse",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "setVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "settleBalanceAndDeregister",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOwedRealizedPnl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleQuoteToPnl",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTwPremiumGrowthGlobal",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTakerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deregisterBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRequirementForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetQuoteBalanceAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTakerOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTakerPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAbsPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebtValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleBalanceAndDeregister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleQuoteToPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTwPremiumGrowthGlobal",
    data: BytesLike
  ): Result;

  events: {
    "ClearingHouseChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PnlRealized(address,int256)": EventFragment;
    "TakerBalancesChanged(address,address,int256,int256)": EventFragment;
    "VaultChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearingHouseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PnlRealized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerBalancesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultChanged"): EventFragment;
}

export class PerpV2AccountBalance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PerpV2AccountBalanceInterface;

  functions: {
    addOwedRealizedPnl(
      trader: string,
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTakerBalances(
      trader: string,
      baseToken: string,
      deltaTakerBase: BigNumberish,
      deltaTakerQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    deregisterBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          takerBaseBalance: BigNumber;
          takerQuoteBalance: BigNumber;
          lastTwPremiumGrowthGlobalX96: BigNumber;
        }
      ]
    >;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getClearingHouse(overrides?: CallOverrides): Promise<[string]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNetQuoteBalanceAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        netQuoteBalance: BigNumber;
        pendingFee: BigNumber;
      }
    >;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      clearingHouseConfigArg: string,
      exchangeArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVault(
      vaultArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleBalanceAndDeregister(
      maker: string,
      baseToken: string,
      deltaTakerBase: BigNumberish,
      deltaTakerQuote: BigNumberish,
      realizedPnl: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleOwedRealizedPnl(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleQuoteToPnl(
      trader: string,
      baseToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTwPremiumGrowthGlobal(
      trader: string,
      baseToken: string,
      lastTwPremiumGrowthGlobalX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOwedRealizedPnl(
    trader: string,
    delta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTakerBalances(
    trader: string,
    baseToken: string,
    deltaTakerBase: BigNumberish,
    deltaTakerQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  deregisterBaseToken(
    trader: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountInfo(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      takerBaseBalance: BigNumber;
      takerQuoteBalance: BigNumber;
      lastTwPremiumGrowthGlobalX96: BigNumber;
    }
  >;

  getBase(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseTokens(trader: string, overrides?: CallOverrides): Promise<string[]>;

  getClearingHouse(overrides?: CallOverrides): Promise<string>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getMarginRequirementForLiquidation(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNetQuoteBalanceAndPendingFee(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      netQuoteBalance: BigNumber;
      pendingFee: BigNumber;
    }
  >;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getPnlAndPendingFee(
    trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getQuote(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerOpenNotional(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerPositionSize(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAbsPositionValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDebtValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOpenNotional(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionSize(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionValue(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  hasOrder(trader: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    clearingHouseConfigArg: string,
    exchangeArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerBaseToken(
    trader: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClearingHouse(
    clearingHouseArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVault(
    vaultArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleBalanceAndDeregister(
    maker: string,
    baseToken: string,
    deltaTakerBase: BigNumberish,
    deltaTakerQuote: BigNumberish,
    realizedPnl: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleOwedRealizedPnl(
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleQuoteToPnl(
    trader: string,
    baseToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTwPremiumGrowthGlobal(
    trader: string,
    baseToken: string,
    lastTwPremiumGrowthGlobalX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOwedRealizedPnl(
      trader: string,
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTakerBalances(
      trader: string,
      baseToken: string,
      deltaTakerBase: BigNumberish,
      deltaTakerQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    deregisterBaseToken(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        takerBaseBalance: BigNumber;
        takerQuoteBalance: BigNumber;
        lastTwPremiumGrowthGlobalX96: BigNumber;
      }
    >;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(trader: string, overrides?: CallOverrides): Promise<string[]>;

    getClearingHouse(overrides?: CallOverrides): Promise<string>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetQuoteBalanceAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        netQuoteBalance: BigNumber;
        pendingFee: BigNumber;
      }
    >;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      clearingHouseConfigArg: string,
      exchangeArg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerBaseToken(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setVault(vaultArg: string, overrides?: CallOverrides): Promise<void>;

    settleBalanceAndDeregister(
      maker: string,
      baseToken: string,
      deltaTakerBase: BigNumberish,
      deltaTakerQuote: BigNumberish,
      realizedPnl: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleOwedRealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleQuoteToPnl(
      trader: string,
      baseToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    updateTwPremiumGrowthGlobal(
      trader: string,
      baseToken: string,
      lastTwPremiumGrowthGlobalX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ClearingHouseChanged(
      clearingHouse?: string | null
    ): TypedEventFilter<[string], { clearingHouse: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PnlRealized(
      trader?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { trader: string; amount: BigNumber }
    >;

    TakerBalancesChanged(
      trader?: string | null,
      baseToken?: string | null,
      deltaBase?: null,
      deltaQuote?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        trader: string;
        baseToken: string;
        deltaBase: BigNumber;
        deltaQuote: BigNumber;
      }
    >;

    VaultChanged(
      vault?: string | null
    ): TypedEventFilter<[string], { vault: string }>;
  };

  estimateGas: {
    addOwedRealizedPnl(
      trader: string,
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTakerBalances(
      trader: string,
      baseToken: string,
      deltaTakerBase: BigNumberish,
      deltaTakerQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetQuoteBalanceAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      clearingHouseConfigArg: string,
      exchangeArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVault(
      vaultArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleBalanceAndDeregister(
      maker: string,
      baseToken: string,
      deltaTakerBase: BigNumberish,
      deltaTakerQuote: BigNumberish,
      realizedPnl: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleOwedRealizedPnl(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleQuoteToPnl(
      trader: string,
      baseToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTwPremiumGrowthGlobal(
      trader: string,
      baseToken: string,
      lastTwPremiumGrowthGlobalX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOwedRealizedPnl(
      trader: string,
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTakerBalances(
      trader: string,
      baseToken: string,
      deltaTakerBase: BigNumberish,
      deltaTakerQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deregisterBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetQuoteBalanceAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasOrder(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      clearingHouseConfigArg: string,
      exchangeArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      vaultArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleBalanceAndDeregister(
      maker: string,
      baseToken: string,
      deltaTakerBase: BigNumberish,
      deltaTakerQuote: BigNumberish,
      realizedPnl: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleOwedRealizedPnl(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleQuoteToPnl(
      trader: string,
      baseToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTwPremiumGrowthGlobal(
      trader: string,
      baseToken: string,
      lastTwPremiumGrowthGlobalX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
