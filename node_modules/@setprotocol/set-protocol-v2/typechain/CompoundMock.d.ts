/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CompoundMockInterface extends ethers.utils.Interface {
  functions: {
    "initializeModuleOnSet(address)": FunctionFragment;
    "testGetBorrowCalldata(address,uint256)": FunctionFragment;
    "testGetEnterMarketsCalldata(address,address)": FunctionFragment;
    "testGetExitMarketCalldata(address,address)": FunctionFragment;
    "testGetMintCEtherCalldata(address,uint256)": FunctionFragment;
    "testGetMintCTokenCalldata(address,uint256)": FunctionFragment;
    "testGetRedeemCalldata(address,uint256)": FunctionFragment;
    "testGetRedeemUnderlyingCalldata(address,uint256)": FunctionFragment;
    "testGetRepayBorrowCEtherCalldata(address,uint256)": FunctionFragment;
    "testGetRepayBorrowCTokenCalldata(address,uint256)": FunctionFragment;
    "testInvokeBorrow(address,address,uint256)": FunctionFragment;
    "testInvokeEnterMarkets(address,address,address)": FunctionFragment;
    "testInvokeExitMarket(address,address,address)": FunctionFragment;
    "testInvokeMintCEther(address,address,uint256)": FunctionFragment;
    "testInvokeMintCToken(address,address,uint256)": FunctionFragment;
    "testInvokeRedeem(address,address,uint256)": FunctionFragment;
    "testInvokeRedeemUnderlying(address,address,uint256)": FunctionFragment;
    "testInvokeRepayBorrowCEther(address,address,uint256)": FunctionFragment;
    "testInvokeRepayBorrowCToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initializeModuleOnSet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetBorrowCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetEnterMarketsCalldata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetExitMarketCalldata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetMintCEtherCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetMintCTokenCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetRedeemCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetRedeemUnderlyingCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetRepayBorrowCEtherCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetRepayBorrowCTokenCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeEnterMarkets",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeExitMarket",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeMintCEther",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeMintCToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeRedeem",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeRedeemUnderlying",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeRepayBorrowCEther",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testInvokeRepayBorrowCToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeModuleOnSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetBorrowCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetEnterMarketsCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetExitMarketCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetMintCEtherCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetMintCTokenCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetRedeemCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetRedeemUnderlyingCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetRepayBorrowCEtherCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetRepayBorrowCTokenCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeEnterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeExitMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeMintCEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeMintCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeRedeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeRepayBorrowCEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvokeRepayBorrowCToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class CompoundMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CompoundMockInterface;

  functions: {
    initializeModuleOnSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testGetBorrowCalldata(
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetEnterMarketsCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetExitMarketCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetMintCEtherCalldata(
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetMintCTokenCalldata(
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetRedeemCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetRedeemUnderlyingCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetRepayBorrowCEtherCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetRepayBorrowCTokenCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testInvokeBorrow(
      _setToken: string,
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInvokeEnterMarkets(
      _setToken: string,
      _cToken: string,
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInvokeExitMarket(
      _setToken: string,
      _cToken: string,
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInvokeMintCEther(
      _setToken: string,
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInvokeMintCToken(
      _setToken: string,
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInvokeRedeem(
      _setToken: string,
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInvokeRedeemUnderlying(
      _setToken: string,
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInvokeRepayBorrowCEther(
      _setToken: string,
      _cEther: string,
      _repayNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInvokeRepayBorrowCToken(
      _setToken: string,
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  initializeModuleOnSet(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testGetBorrowCalldata(
    _cToken: string,
    _notionalBorrowQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testGetEnterMarketsCalldata(
    _cToken: string,
    _comptroller: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testGetExitMarketCalldata(
    _cToken: string,
    _comptroller: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testGetMintCEtherCalldata(
    _cEther: string,
    _mintNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testGetMintCTokenCalldata(
    _cToken: string,
    _mintNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testGetRedeemCalldata(
    _cToken: string,
    _redeemNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testGetRedeemUnderlyingCalldata(
    _cToken: string,
    _redeemNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testGetRepayBorrowCEtherCalldata(
    _cToken: string,
    _repayNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testGetRepayBorrowCTokenCalldata(
    _cToken: string,
    _repayNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  testInvokeBorrow(
    _setToken: string,
    _cToken: string,
    _notionalBorrowQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInvokeEnterMarkets(
    _setToken: string,
    _cToken: string,
    _comptroller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInvokeExitMarket(
    _setToken: string,
    _cToken: string,
    _comptroller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInvokeMintCEther(
    _setToken: string,
    _cEther: string,
    _mintNotional: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInvokeMintCToken(
    _setToken: string,
    _cToken: string,
    _mintNotional: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInvokeRedeem(
    _setToken: string,
    _cToken: string,
    _redeemNotional: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInvokeRedeemUnderlying(
    _setToken: string,
    _cToken: string,
    _redeemNotional: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInvokeRepayBorrowCEther(
    _setToken: string,
    _cEther: string,
    _repayNotional: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInvokeRepayBorrowCToken(
    _setToken: string,
    _cToken: string,
    _repayNotional: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initializeModuleOnSet(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testGetBorrowCalldata(
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetEnterMarketsCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetExitMarketCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetMintCEtherCalldata(
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetMintCTokenCalldata(
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetRedeemCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetRedeemUnderlyingCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetRepayBorrowCEtherCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testGetRepayBorrowCTokenCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    testInvokeBorrow(
      _setToken: string,
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testInvokeEnterMarkets(
      _setToken: string,
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testInvokeExitMarket(
      _setToken: string,
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testInvokeMintCEther(
      _setToken: string,
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testInvokeMintCToken(
      _setToken: string,
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testInvokeRedeem(
      _setToken: string,
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testInvokeRedeemUnderlying(
      _setToken: string,
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testInvokeRepayBorrowCEther(
      _setToken: string,
      _cEther: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testInvokeRepayBorrowCToken(
      _setToken: string,
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    initializeModuleOnSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testGetBorrowCalldata(
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetEnterMarketsCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetExitMarketCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetMintCEtherCalldata(
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetMintCTokenCalldata(
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetRedeemCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetRedeemUnderlyingCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetRepayBorrowCEtherCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetRepayBorrowCTokenCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testInvokeBorrow(
      _setToken: string,
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInvokeEnterMarkets(
      _setToken: string,
      _cToken: string,
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInvokeExitMarket(
      _setToken: string,
      _cToken: string,
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInvokeMintCEther(
      _setToken: string,
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInvokeMintCToken(
      _setToken: string,
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInvokeRedeem(
      _setToken: string,
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInvokeRedeemUnderlying(
      _setToken: string,
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInvokeRepayBorrowCEther(
      _setToken: string,
      _cEther: string,
      _repayNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInvokeRepayBorrowCToken(
      _setToken: string,
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeModuleOnSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testGetBorrowCalldata(
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetEnterMarketsCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetExitMarketCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetMintCEtherCalldata(
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetMintCTokenCalldata(
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetRedeemCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetRedeemUnderlyingCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetRepayBorrowCEtherCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetRepayBorrowCTokenCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testInvokeBorrow(
      _setToken: string,
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInvokeEnterMarkets(
      _setToken: string,
      _cToken: string,
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInvokeExitMarket(
      _setToken: string,
      _cToken: string,
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInvokeMintCEther(
      _setToken: string,
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInvokeMintCToken(
      _setToken: string,
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInvokeRedeem(
      _setToken: string,
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInvokeRedeemUnderlying(
      _setToken: string,
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInvokeRepayBorrowCEther(
      _setToken: string,
      _cEther: string,
      _repayNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInvokeRepayBorrowCToken(
      _setToken: string,
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
