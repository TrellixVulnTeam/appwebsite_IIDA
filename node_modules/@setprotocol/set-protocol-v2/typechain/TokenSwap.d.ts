/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenSwapInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "mainchainGateway()": FunctionFragment;
    "newToken()": FunctionFragment;
    "oldToken()": FunctionFragment;
    "removeAdmin()": FunctionFragment;
    "setGateway(address)": FunctionFragment;
    "swapAndBridge(address,uint256)": FunctionFragment;
    "swapAndBridgeAll(address)": FunctionFragment;
    "swapToken()": FunctionFragment;
    "withdrawToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mainchainGateway",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "oldToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setGateway", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapAndBridge",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridgeAll",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "swapToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainchainGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oldToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridgeAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AdminRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
}

export class TokenSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenSwapInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mainchainGateway(overrides?: CallOverrides): Promise<[string]>;

    newToken(overrides?: CallOverrides): Promise<[string]>;

    oldToken(overrides?: CallOverrides): Promise<[string]>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGateway(
      _mainchainGateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndBridge(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndBridgeAll(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  changeAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mainchainGateway(overrides?: CallOverrides): Promise<string>;

  newToken(overrides?: CallOverrides): Promise<string>;

  oldToken(overrides?: CallOverrides): Promise<string>;

  removeAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGateway(
    _mainchainGateway: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndBridge(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndBridgeAll(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    mainchainGateway(overrides?: CallOverrides): Promise<string>;

    newToken(overrides?: CallOverrides): Promise<string>;

    oldToken(overrides?: CallOverrides): Promise<string>;

    removeAdmin(overrides?: CallOverrides): Promise<void>;

    setGateway(
      _mainchainGateway: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndBridge(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndBridgeAll(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken(overrides?: CallOverrides): Promise<void>;

    withdrawToken(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AdminChanged(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAdmin: string; _newAdmin: string }
    >;

    AdminRemoved(
      _oldAdmin?: string | null
    ): TypedEventFilter<[string], { _oldAdmin: string }>;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mainchainGateway(overrides?: CallOverrides): Promise<BigNumber>;

    newToken(overrides?: CallOverrides): Promise<BigNumber>;

    oldToken(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGateway(
      _mainchainGateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndBridge(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndBridgeAll(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mainchainGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGateway(
      _mainchainGateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndBridge(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndBridgeAll(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
