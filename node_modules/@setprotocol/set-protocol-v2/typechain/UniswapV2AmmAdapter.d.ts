/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UniswapV2AmmAdapterInterface extends ethers.utils.Interface {
  functions: {
    "factory()": FunctionFragment;
    "getProvideLiquidityCalldata(address,address,address[],uint256[],uint256)": FunctionFragment;
    "getProvideLiquiditySingleAssetCalldata(address,address,address,uint256,uint256)": FunctionFragment;
    "getRemoveLiquidityCalldata(address,address,address[],uint256[],uint256)": FunctionFragment;
    "getRemoveLiquiditySingleAssetCalldata(address,address,address,uint256,uint256)": FunctionFragment;
    "getSpenderAddress(address)": FunctionFragment;
    "isValidPool(address,address[])": FunctionFragment;
    "router()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProvideLiquidityCalldata",
    values: [string, string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProvideLiquiditySingleAssetCalldata",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoveLiquidityCalldata",
    values: [string, string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoveLiquiditySingleAssetCalldata",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpenderAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPool",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProvideLiquidityCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProvideLiquiditySingleAssetCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoveLiquidityCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoveLiquiditySingleAssetCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;

  events: {};
}

export class UniswapV2AmmAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapV2AmmAdapterInterface;

  functions: {
    factory(overrides?: CallOverrides): Promise<[string]>;

    getProvideLiquidityCalldata(
      _setToken: string,
      _pool: string,
      _components: string[],
      _maxTokensIn: BigNumberish[],
      _minLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        target: string;
        value: BigNumber;
        data: string;
      }
    >;

    getProvideLiquiditySingleAssetCalldata(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRemoveLiquidityCalldata(
      _setToken: string,
      _pool: string,
      _components: string[],
      _minTokensOut: BigNumberish[],
      _liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        target: string;
        value: BigNumber;
        data: string;
      }
    >;

    getRemoveLiquiditySingleAssetCalldata(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getSpenderAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string] & { spender: string }>;

    isValidPool(
      _pool: string,
      _components: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    router(overrides?: CallOverrides): Promise<[string]>;
  };

  factory(overrides?: CallOverrides): Promise<string>;

  getProvideLiquidityCalldata(
    _setToken: string,
    _pool: string,
    _components: string[],
    _maxTokensIn: BigNumberish[],
    _minLiquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      target: string;
      value: BigNumber;
      data: string;
    }
  >;

  getProvideLiquiditySingleAssetCalldata(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRemoveLiquidityCalldata(
    _setToken: string,
    _pool: string,
    _components: string[],
    _minTokensOut: BigNumberish[],
    _liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      target: string;
      value: BigNumber;
      data: string;
    }
  >;

  getRemoveLiquiditySingleAssetCalldata(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getSpenderAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  isValidPool(
    _pool: string,
    _components: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  router(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    factory(overrides?: CallOverrides): Promise<string>;

    getProvideLiquidityCalldata(
      _setToken: string,
      _pool: string,
      _components: string[],
      _maxTokensIn: BigNumberish[],
      _minLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        target: string;
        value: BigNumber;
        data: string;
      }
    >;

    getProvideLiquiditySingleAssetCalldata(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRemoveLiquidityCalldata(
      _setToken: string,
      _pool: string,
      _components: string[],
      _minTokensOut: BigNumberish[],
      _liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        target: string;
        value: BigNumber;
        data: string;
      }
    >;

    getRemoveLiquiditySingleAssetCalldata(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getSpenderAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

    isValidPool(
      _pool: string,
      _components: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    router(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getProvideLiquidityCalldata(
      _setToken: string,
      _pool: string,
      _components: string[],
      _maxTokensIn: BigNumberish[],
      _minLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProvideLiquiditySingleAssetCalldata(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoveLiquidityCalldata(
      _setToken: string,
      _pool: string,
      _components: string[],
      _minTokensOut: BigNumberish[],
      _liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoveLiquiditySingleAssetCalldata(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpenderAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidPool(
      _pool: string,
      _components: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProvideLiquidityCalldata(
      _setToken: string,
      _pool: string,
      _components: string[],
      _maxTokensIn: BigNumberish[],
      _minLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProvideLiquiditySingleAssetCalldata(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemoveLiquidityCalldata(
      _setToken: string,
      _pool: string,
      _components: string[],
      _minTokensOut: BigNumberish[],
      _liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemoveLiquiditySingleAssetCalldata(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpenderAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidPool(
      _pool: string,
      _components: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
