/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AMMSplitterInterface extends ethers.utils.Interface {
  functions: {
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "sushiFactory()": FunctionFragment;
    "sushiRouter()": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "uniFactory()": FunctionFragment;
    "uniRouter()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sushiFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sushiRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uniRouter", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uniRouter", data: BytesLike): Result;

  events: {
    "TradeExactInputExecuted(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "TradeExactOutputExecuted(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TradeExactInputExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeExactOutputExecuted"): EventFragment;
}

export class AMMSplitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AMMSplitterInterface;

  functions: {
    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    sushiFactory(overrides?: CallOverrides): Promise<[string]>;

    sushiRouter(overrides?: CallOverrides): Promise<[string]>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniFactory(overrides?: CallOverrides): Promise<[string]>;

    uniRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  getAmountsIn(
    _amountOut: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    _amountIn: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  sushiFactory(overrides?: CallOverrides): Promise<string>;

  sushiRouter(overrides?: CallOverrides): Promise<string>;

  swapExactTokensForTokens(
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _path: string[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    _amountOut: BigNumberish,
    _amountInMax: BigNumberish,
    _path: string[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniFactory(overrides?: CallOverrides): Promise<string>;

  uniRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    sushiFactory(overrides?: CallOverrides): Promise<string>;

    sushiRouter(overrides?: CallOverrides): Promise<string>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniFactory(overrides?: CallOverrides): Promise<string>;

    uniRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    TradeExactInputExecuted(
      _sendToken?: string | null,
      _receiveToken?: string | null,
      _to?: string | null,
      _amountIn?: null,
      _amountOut?: null,
      _uniTradeSize?: null,
      _sushiTradeSize?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _sendToken: string;
        _receiveToken: string;
        _to: string;
        _amountIn: BigNumber;
        _amountOut: BigNumber;
        _uniTradeSize: BigNumber;
        _sushiTradeSize: BigNumber;
      }
    >;

    TradeExactOutputExecuted(
      _sendToken?: string | null,
      _receiveToken?: string | null,
      _to?: string | null,
      _amountIn?: null,
      _amountOut?: null,
      _uniTradeSize?: null,
      _sushiTradeSize?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _sendToken: string;
        _receiveToken: string;
        _to: string;
        _amountIn: BigNumber;
        _amountOut: BigNumber;
        _uniTradeSize: BigNumber;
        _sushiTradeSize: BigNumber;
      }
    >;
  };

  estimateGas: {
    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sushiFactory(overrides?: CallOverrides): Promise<BigNumber>;

    sushiRouter(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniFactory(overrides?: CallOverrides): Promise<BigNumber>;

    uniRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sushiFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sushiRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
