/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IAccountBalanceInterface extends ethers.utils.Interface {
  functions: {
    "getBase(address,address)": FunctionFragment;
    "getBaseTokens(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getMarginRequirementForLiquidation(address)": FunctionFragment;
    "getNetQuoteBalanceAndPendingFee(address)": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getPnlAndPendingFee(address)": FunctionFragment;
    "getPositionSize(address,address)": FunctionFragment;
    "getPositionValue(address,address)": FunctionFragment;
    "getQuote(address,address)": FunctionFragment;
    "getTotalAbsPositionValue(address)": FunctionFragment;
    "getTotalDebtValue(address)": FunctionFragment;
    "getVault()": FunctionFragment;
    "hasOrder(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBase",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRequirementForLiquidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetQuoteBalanceAndPendingFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlAndPendingFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionValue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAbsPositionValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebtValue",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasOrder", values: [string]): string;

  decodeFunctionResult(functionFragment: "getBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRequirementForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetQuoteBalanceAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAbsPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebtValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasOrder", data: BytesLike): Result;

  events: {};
}

export class IAccountBalance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAccountBalanceInterface;

  functions: {
    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNetQuoteBalanceAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  getBase(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseTokens(trader: string, overrides?: CallOverrides): Promise<string[]>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getMarginRequirementForLiquidation(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNetQuoteBalanceAndPendingFee(
    trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getPnlAndPendingFee(
    trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getPositionSize(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionValue(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuote(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAbsPositionValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDebtValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  hasOrder(trader: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(trader: string, overrides?: CallOverrides): Promise<string[]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetQuoteBalanceAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetQuoteBalanceAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetQuoteBalanceAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasOrder(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
