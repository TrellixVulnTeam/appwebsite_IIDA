/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ControllerInterface extends ethers.utils.Interface {
  functions: {
    "addFactory(address)": FunctionFragment;
    "addFee(address,uint256,uint256)": FunctionFragment;
    "addModule(address)": FunctionFragment;
    "addResource(address,uint256)": FunctionFragment;
    "addSet(address)": FunctionFragment;
    "editFee(address,uint256,uint256)": FunctionFragment;
    "editFeeRecipient(address)": FunctionFragment;
    "factories(uint256)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "fees(address,uint256)": FunctionFragment;
    "getFactories()": FunctionFragment;
    "getModuleFee(address,uint256)": FunctionFragment;
    "getModules()": FunctionFragment;
    "getResources()": FunctionFragment;
    "getSets()": FunctionFragment;
    "initialize(address[],address[],address[],uint256[])": FunctionFragment;
    "isFactory(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isModule(address)": FunctionFragment;
    "isResource(address)": FunctionFragment;
    "isSet(address)": FunctionFragment;
    "isSystemContract(address)": FunctionFragment;
    "modules(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFactory(address)": FunctionFragment;
    "removeModule(address)": FunctionFragment;
    "removeResource(uint256)": FunctionFragment;
    "removeSet(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resourceId(uint256)": FunctionFragment;
    "resources(uint256)": FunctionFragment;
    "sets(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addModule", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addResource",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addSet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "editFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "factories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResources",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "isFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isModule", values: [string]): string;
  encodeFunctionData(functionFragment: "isResource", values: [string]): string;
  encodeFunctionData(functionFragment: "isSet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSystemContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "modules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeResource",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeSet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourceId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resources",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sets", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isResource", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSystemContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resourceId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resources", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FactoryAdded(address)": EventFragment;
    "FactoryRemoved(address)": EventFragment;
    "FeeEdited(address,uint256,uint256)": EventFragment;
    "FeeRecipientChanged(address)": EventFragment;
    "ModuleAdded(address)": EventFragment;
    "ModuleRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ResourceAdded(address,uint256)": EventFragment;
    "ResourceRemoved(address,uint256)": EventFragment;
    "SetAdded(address,address)": EventFragment;
    "SetRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FactoryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResourceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResourceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRemoved"): EventFragment;
}

export class Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ControllerInterface;

  functions: {
    addFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFee(
      _module: string,
      _feeType: BigNumberish,
      _newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addResource(
      _resource: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editFee(
      _module: string,
      _feeType: BigNumberish,
      _newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editFeeRecipient(
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factories(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    fees(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFactories(overrides?: CallOverrides): Promise<[string[]]>;

    getModuleFee(
      _moduleAddress: string,
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getModules(overrides?: CallOverrides): Promise<[string[]]>;

    getResources(overrides?: CallOverrides): Promise<[string[]]>;

    getSets(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _factories: string[],
      _modules: string[],
      _resources: string[],
      _resourceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isFactory(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isModule(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isResource(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSet(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSystemContract(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeResource(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resourceId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    resources(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    sets(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFee(
    _module: string,
    _feeType: BigNumberish,
    _newFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addModule(
    _module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addResource(
    _resource: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSet(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editFee(
    _module: string,
    _feeType: BigNumberish,
    _newFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editFeeRecipient(
    _newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factories(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  fees(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFactories(overrides?: CallOverrides): Promise<string[]>;

  getModuleFee(
    _moduleAddress: string,
    _feeType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getModules(overrides?: CallOverrides): Promise<string[]>;

  getResources(overrides?: CallOverrides): Promise<string[]>;

  getSets(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _factories: string[],
    _modules: string[],
    _resources: string[],
    _resourceIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isFactory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isModule(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isResource(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isSet(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isSystemContract(
    _contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    _module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeResource(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSet(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resourceId(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  resources(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  sets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFactory(_factory: string, overrides?: CallOverrides): Promise<void>;

    addFee(
      _module: string,
      _feeType: BigNumberish,
      _newFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addModule(_module: string, overrides?: CallOverrides): Promise<void>;

    addResource(
      _resource: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addSet(_setToken: string, overrides?: CallOverrides): Promise<void>;

    editFee(
      _module: string,
      _feeType: BigNumberish,
      _newFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editFeeRecipient(
      _newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    factories(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    fees(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFactories(overrides?: CallOverrides): Promise<string[]>;

    getModuleFee(
      _moduleAddress: string,
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModules(overrides?: CallOverrides): Promise<string[]>;

    getResources(overrides?: CallOverrides): Promise<string[]>;

    getSets(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      _factories: string[],
      _modules: string[],
      _resources: string[],
      _resourceIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isFactory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isModule(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isResource(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isSet(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isSystemContract(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFactory(_factory: string, overrides?: CallOverrides): Promise<void>;

    removeModule(_module: string, overrides?: CallOverrides): Promise<void>;

    removeResource(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeSet(_setToken: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resourceId(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    resources(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    sets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FactoryAdded(
      _factory?: string | null
    ): TypedEventFilter<[string], { _factory: string }>;

    FactoryRemoved(
      _factory?: string | null
    ): TypedEventFilter<[string], { _factory: string }>;

    FeeEdited(
      _module?: string | null,
      _feeType?: BigNumberish | null,
      _feePercentage?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _module: string; _feeType: BigNumber; _feePercentage: BigNumber }
    >;

    FeeRecipientChanged(
      _newFeeRecipient?: null
    ): TypedEventFilter<[string], { _newFeeRecipient: string }>;

    ModuleAdded(
      _module?: string | null
    ): TypedEventFilter<[string], { _module: string }>;

    ModuleRemoved(
      _module?: string | null
    ): TypedEventFilter<[string], { _module: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ResourceAdded(
      _resource?: string | null,
      _id?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _resource: string; _id: BigNumber }
    >;

    ResourceRemoved(
      _resource?: string | null,
      _id?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _resource: string; _id: BigNumber }
    >;

    SetAdded(
      _setToken?: string | null,
      _factory?: string | null
    ): TypedEventFilter<
      [string, string],
      { _setToken: string; _factory: string }
    >;

    SetRemoved(
      _setToken?: string | null
    ): TypedEventFilter<[string], { _setToken: string }>;
  };

  estimateGas: {
    addFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFee(
      _module: string,
      _feeType: BigNumberish,
      _newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addResource(
      _resource: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editFee(
      _module: string,
      _feeType: BigNumberish,
      _newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editFeeRecipient(
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    fees(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFactories(overrides?: CallOverrides): Promise<BigNumber>;

    getModuleFee(
      _moduleAddress: string,
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModules(overrides?: CallOverrides): Promise<BigNumber>;

    getResources(overrides?: CallOverrides): Promise<BigNumber>;

    getSets(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _factories: string[],
      _modules: string[],
      _resources: string[],
      _resourceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isFactory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isModule(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isResource(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSystemContract(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeResource(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resourceId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resources(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFee(
      _module: string,
      _feeType: BigNumberish,
      _newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addResource(
      _resource: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editFee(
      _module: string,
      _feeType: BigNumberish,
      _newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editFeeRecipient(
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactories(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModuleFee(
      _moduleAddress: string,
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getResources(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _factories: string[],
      _modules: string[],
      _resources: string[],
      _resourceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isFactory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isModule(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isResource(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSystemContract(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeResource(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSet(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resourceId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resources(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
