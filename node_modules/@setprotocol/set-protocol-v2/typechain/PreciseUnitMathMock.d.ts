/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PreciseUnitMathMockInterface extends ethers.utils.Interface {
  functions: {
    "approximatelyEquals(uint256,uint256,uint256)": FunctionFragment;
    "conservativePreciseDiv(int256,int256)": FunctionFragment;
    "conservativePreciseMul(int256,int256)": FunctionFragment;
    "divDown(int256,int256)": FunctionFragment;
    "maxInt256()": FunctionFragment;
    "minInt256()": FunctionFragment;
    "preciseDiv(int256,int256)": FunctionFragment;
    "preciseDivCeil(uint256,uint256)": FunctionFragment;
    "preciseMul(uint256,uint256)": FunctionFragment;
    "preciseMulCeil(uint256,uint256)": FunctionFragment;
    "preciseMulInt(int256,int256)": FunctionFragment;
    "preciseUnit()": FunctionFragment;
    "preciseUnitInt()": FunctionFragment;
    "safePower(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approximatelyEquals",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conservativePreciseDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conservativePreciseMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divDown",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxInt256", values?: undefined): string;
  encodeFunctionData(functionFragment: "minInt256", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preciseDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preciseDivCeil",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preciseMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preciseMulCeil",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preciseMulInt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preciseUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preciseUnitInt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safePower",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approximatelyEquals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservativePreciseDiv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservativePreciseMul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "divDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxInt256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minInt256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preciseDiv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preciseDivCeil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "preciseMul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preciseMulCeil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preciseMulInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preciseUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preciseUnitInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safePower", data: BytesLike): Result;

  events: {};
}

export class PreciseUnitMathMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PreciseUnitMathMockInterface;

  functions: {
    approximatelyEquals(
      a: BigNumberish,
      b: BigNumberish,
      range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    conservativePreciseDiv(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    conservativePreciseMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    divDown(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxInt256(overrides?: CallOverrides): Promise<[BigNumber]>;

    minInt256(overrides?: CallOverrides): Promise<[BigNumber]>;

    "preciseDiv(int256,int256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "preciseDiv(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    preciseDivCeil(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    preciseMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    preciseMulCeil(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    preciseMulInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    preciseUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    preciseUnitInt(overrides?: CallOverrides): Promise<[BigNumber]>;

    safePower(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  approximatelyEquals(
    a: BigNumberish,
    b: BigNumberish,
    range: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  conservativePreciseDiv(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  conservativePreciseMul(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  divDown(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxInt256(overrides?: CallOverrides): Promise<BigNumber>;

  minInt256(overrides?: CallOverrides): Promise<BigNumber>;

  "preciseDiv(int256,int256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "preciseDiv(uint256,uint256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  preciseDivCeil(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  preciseMul(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  preciseMulCeil(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  preciseMulInt(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  preciseUnit(overrides?: CallOverrides): Promise<BigNumber>;

  preciseUnitInt(overrides?: CallOverrides): Promise<BigNumber>;

  safePower(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    approximatelyEquals(
      a: BigNumberish,
      b: BigNumberish,
      range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    conservativePreciseDiv(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservativePreciseMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divDown(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxInt256(overrides?: CallOverrides): Promise<BigNumber>;

    minInt256(overrides?: CallOverrides): Promise<BigNumber>;

    "preciseDiv(int256,int256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "preciseDiv(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseDivCeil(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseMulCeil(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseMulInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseUnit(overrides?: CallOverrides): Promise<BigNumber>;

    preciseUnitInt(overrides?: CallOverrides): Promise<BigNumber>;

    safePower(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    approximatelyEquals(
      a: BigNumberish,
      b: BigNumberish,
      range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservativePreciseDiv(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservativePreciseMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divDown(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxInt256(overrides?: CallOverrides): Promise<BigNumber>;

    minInt256(overrides?: CallOverrides): Promise<BigNumber>;

    "preciseDiv(int256,int256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "preciseDiv(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseDivCeil(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseMulCeil(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseMulInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preciseUnit(overrides?: CallOverrides): Promise<BigNumber>;

    preciseUnitInt(overrides?: CallOverrides): Promise<BigNumber>;

    safePower(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approximatelyEquals(
      a: BigNumberish,
      b: BigNumberish,
      range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conservativePreciseDiv(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conservativePreciseMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divDown(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxInt256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minInt256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "preciseDiv(int256,int256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "preciseDiv(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preciseDivCeil(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preciseMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preciseMulCeil(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preciseMulInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preciseUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preciseUnitInt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safePower(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
