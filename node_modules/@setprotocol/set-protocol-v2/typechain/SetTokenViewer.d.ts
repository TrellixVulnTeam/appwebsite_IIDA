/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SetTokenViewerInterface extends ethers.utils.Interface {
  functions: {
    "batchFetchDetails(address[],address[])": FunctionFragment;
    "batchFetchManagers(address[])": FunctionFragment;
    "batchFetchModuleStates(address[],address[])": FunctionFragment;
    "getSetDetails(address,address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchFetchDetails",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFetchManagers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFetchModuleStates",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSetDetails",
    values: [string, string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchFetchDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFetchManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFetchModuleStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSetDetails",
    data: BytesLike
  ): Result;

  events: {};
}

export class SetTokenViewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SetTokenViewerInterface;

  functions: {
    batchFetchDetails(
      _setTokens: string[],
      _moduleList: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          string[],
          number[],
          ([string, string, BigNumber, number, string] & {
            component: string;
            module: string;
            unit: BigNumber;
            positionState: number;
            data: string;
          })[],
          BigNumber
        ] & {
          name: string;
          symbol: string;
          manager: string;
          modules: string[];
          moduleStatuses: number[];
          positions: ([string, string, BigNumber, number, string] & {
            component: string;
            module: string;
            unit: BigNumber;
            positionState: number;
            data: string;
          })[];
          totalSupply: BigNumber;
        })[]
      ]
    >;

    batchFetchManagers(
      _setTokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    batchFetchModuleStates(
      _setTokens: string[],
      _modules: string[],
      overrides?: CallOverrides
    ): Promise<[number[][]]>;

    getSetDetails(
      _setToken: string,
      _moduleList: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string[],
          number[],
          ([string, string, BigNumber, number, string] & {
            component: string;
            module: string;
            unit: BigNumber;
            positionState: number;
            data: string;
          })[],
          BigNumber
        ] & {
          name: string;
          symbol: string;
          manager: string;
          modules: string[];
          moduleStatuses: number[];
          positions: ([string, string, BigNumber, number, string] & {
            component: string;
            module: string;
            unit: BigNumber;
            positionState: number;
            data: string;
          })[];
          totalSupply: BigNumber;
        }
      ]
    >;
  };

  batchFetchDetails(
    _setTokens: string[],
    _moduleList: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      string[],
      number[],
      ([string, string, BigNumber, number, string] & {
        component: string;
        module: string;
        unit: BigNumber;
        positionState: number;
        data: string;
      })[],
      BigNumber
    ] & {
      name: string;
      symbol: string;
      manager: string;
      modules: string[];
      moduleStatuses: number[];
      positions: ([string, string, BigNumber, number, string] & {
        component: string;
        module: string;
        unit: BigNumber;
        positionState: number;
        data: string;
      })[];
      totalSupply: BigNumber;
    })[]
  >;

  batchFetchManagers(
    _setTokens: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  batchFetchModuleStates(
    _setTokens: string[],
    _modules: string[],
    overrides?: CallOverrides
  ): Promise<number[][]>;

  getSetDetails(
    _setToken: string,
    _moduleList: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string[],
      number[],
      ([string, string, BigNumber, number, string] & {
        component: string;
        module: string;
        unit: BigNumber;
        positionState: number;
        data: string;
      })[],
      BigNumber
    ] & {
      name: string;
      symbol: string;
      manager: string;
      modules: string[];
      moduleStatuses: number[];
      positions: ([string, string, BigNumber, number, string] & {
        component: string;
        module: string;
        unit: BigNumber;
        positionState: number;
        data: string;
      })[];
      totalSupply: BigNumber;
    }
  >;

  callStatic: {
    batchFetchDetails(
      _setTokens: string[],
      _moduleList: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        string[],
        number[],
        ([string, string, BigNumber, number, string] & {
          component: string;
          module: string;
          unit: BigNumber;
          positionState: number;
          data: string;
        })[],
        BigNumber
      ] & {
        name: string;
        symbol: string;
        manager: string;
        modules: string[];
        moduleStatuses: number[];
        positions: ([string, string, BigNumber, number, string] & {
          component: string;
          module: string;
          unit: BigNumber;
          positionState: number;
          data: string;
        })[];
        totalSupply: BigNumber;
      })[]
    >;

    batchFetchManagers(
      _setTokens: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    batchFetchModuleStates(
      _setTokens: string[],
      _modules: string[],
      overrides?: CallOverrides
    ): Promise<number[][]>;

    getSetDetails(
      _setToken: string,
      _moduleList: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string[],
        number[],
        ([string, string, BigNumber, number, string] & {
          component: string;
          module: string;
          unit: BigNumber;
          positionState: number;
          data: string;
        })[],
        BigNumber
      ] & {
        name: string;
        symbol: string;
        manager: string;
        modules: string[];
        moduleStatuses: number[];
        positions: ([string, string, BigNumber, number, string] & {
          component: string;
          module: string;
          unit: BigNumber;
          positionState: number;
          data: string;
        })[];
        totalSupply: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    batchFetchDetails(
      _setTokens: string[],
      _moduleList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchFetchManagers(
      _setTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchFetchModuleStates(
      _setTokens: string[],
      _modules: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSetDetails(
      _setToken: string,
      _moduleList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchFetchDetails(
      _setTokens: string[],
      _moduleList: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchFetchManagers(
      _setTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchFetchModuleStates(
      _setTokens: string[],
      _modules: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSetDetails(
      _setToken: string,
      _moduleList: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
