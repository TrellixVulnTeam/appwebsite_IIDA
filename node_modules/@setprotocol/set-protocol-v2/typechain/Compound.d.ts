/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CompoundInterface extends ethers.utils.Interface {
  functions: {
    "getBorrowCalldata(ICErc20,uint256)": FunctionFragment;
    "getEnterMarketsCalldata(ICErc20,IComptroller)": FunctionFragment;
    "getExitMarketCalldata(ICErc20,IComptroller)": FunctionFragment;
    "getMintCEtherCalldata(ICErc20,uint256)": FunctionFragment;
    "getMintCTokenCalldata(ICErc20,uint256)": FunctionFragment;
    "getRedeemCalldata(ICErc20,uint256)": FunctionFragment;
    "getRedeemUnderlyingCalldata(ICErc20,uint256)": FunctionFragment;
    "getRepayBorrowCEtherCalldata(ICErc20,uint256)": FunctionFragment;
    "getRepayBorrowCTokenCalldata(ICErc20,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBorrowCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterMarketsCalldata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExitMarketCalldata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintCEtherCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintCTokenCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemUnderlyingCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayBorrowCEtherCalldata",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayBorrowCTokenCalldata",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBorrowCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterMarketsCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExitMarketCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintCEtherCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintCTokenCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemUnderlyingCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayBorrowCEtherCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayBorrowCTokenCalldata",
    data: BytesLike
  ): Result;

  events: {};
}

export class Compound extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CompoundInterface;

  functions: {
    getBorrowCalldata(
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getEnterMarketsCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getExitMarketCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getMintCEtherCalldata(
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getMintCTokenCalldata(
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRedeemCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRedeemUnderlyingCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRepayBorrowCEtherCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRepayBorrowCTokenCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;
  };

  getBorrowCalldata(
    _cToken: string,
    _notionalBorrowQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getEnterMarketsCalldata(
    _cToken: string,
    _comptroller: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getExitMarketCalldata(
    _cToken: string,
    _comptroller: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getMintCEtherCalldata(
    _cEther: string,
    _mintNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getMintCTokenCalldata(
    _cToken: string,
    _mintNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRedeemCalldata(
    _cToken: string,
    _redeemNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRedeemUnderlyingCalldata(
    _cToken: string,
    _redeemNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRepayBorrowCEtherCalldata(
    _cToken: string,
    _repayNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRepayBorrowCTokenCalldata(
    _cToken: string,
    _repayNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  callStatic: {
    getBorrowCalldata(
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getEnterMarketsCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getExitMarketCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getMintCEtherCalldata(
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getMintCTokenCalldata(
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRedeemCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRedeemUnderlyingCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRepayBorrowCEtherCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRepayBorrowCTokenCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;
  };

  filters: {};

  estimateGas: {
    getBorrowCalldata(
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnterMarketsCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitMarketCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintCEtherCalldata(
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintCTokenCalldata(
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemUnderlyingCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepayBorrowCEtherCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepayBorrowCTokenCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBorrowCalldata(
      _cToken: string,
      _notionalBorrowQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnterMarketsCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExitMarketCalldata(
      _cToken: string,
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintCEtherCalldata(
      _cEther: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintCTokenCalldata(
      _cToken: string,
      _mintNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemUnderlyingCalldata(
      _cToken: string,
      _redeemNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepayBorrowCEtherCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepayBorrowCTokenCalldata(
      _cToken: string,
      _repayNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
